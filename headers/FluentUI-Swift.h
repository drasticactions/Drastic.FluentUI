#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
#ifndef FLUENTUI_SWIFT_H
#define FLUENTUI_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FluentUI",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class UIView;
@class NSString;

/// AccessibleViewDelegate is used to pass responsibility for built in accessibility methods from a view to its parent view controller.
/// Each AccessibleViewDelegate method is meant to be called in the native accessibility method of the view that has the same name as AccessibleViewDelegate method prefix (eg. accessibilityActivate -> accessibilityActivateForAccessibleView)
/// All AccessibleViewDelegate method are optionals
SWIFT_PROTOCOL("_TtP8FluentUI22AccessibleViewDelegate_")
@protocol AccessibleViewDelegate
@optional
- (NSString * _Nullable)accessibilityValueForAccessibleView:(UIView * _Nonnull)accessibleView SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)accessibilityLabelForAccessibleView:(UIView * _Nonnull)accessibleView SWIFT_WARN_UNUSED_RESULT;
- (BOOL)accessibilityActivateForAccessibleView:(UIView * _Nonnull)accessibleView SWIFT_WARN_UNUSED_RESULT;
- (void)accessibilityIncrementForAccessibleView:(UIView * _Nonnull)accessibleView;
- (void)accessibilityDecrementForAccessibleView:(UIView * _Nonnull)accessibleView;
- (BOOL)accessibilityPerformMagicTapForAccessibleView:(UIView * _Nonnull)accessibleView SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nullable)accessibilityElementsForAccessibleView:(UIView * _Nonnull)accessibleView SWIFT_WARN_UNUSED_RESULT;
@end

@class NSIndexPath;
@class UITableView;

SWIFT_PROTOCOL("_TtP8FluentUI27AccessibleTableViewDelegate_")
@protocol AccessibleTableViewDelegate <AccessibleViewDelegate>
@optional
- (NSString * _Nullable)accessibilityValueForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath forTableView:(UITableView * _Nonnull)forTableView SWIFT_WARN_UNUSED_RESULT;
@end


enum MSFTableViewCellSeparatorType : NSInteger;
enum MSFTableViewCellBackgroundStyleType : NSInteger;
@class UIButton;
@class NSCoder;
enum MSFActionsCellActionType : NSInteger;

/// <code>ActionsCell</code> is used to present a button or set of buttons (max of 2) as a row in a table view. After being added to the table view a target can be added to the button(s) with a corresponding action.
/// <code>ActionsCell</code> supports a maximum of 2 buttons that are displayed in a single row with a vertical separator between them. A button can be denoted ‘destructive’ by setting the ‘action(X)ActionType’ parameter to <code>.destructive</code>. When <code>.destructive</code>, this property causes the button to be displayed with red title label text to signify a ‘destructive’ action. When <code>.communication</code> is passed in, the button will be displayed with communication blue color.
/// <code>topSeparatorType</code> and <code>bottomSeparatorType</code> can be used to show custom horizontal separators. Make sure to remove the <code>UITableViewCell</code> built-in separator by setting <code>separatorStyle = .none</code> on your table view.
SWIFT_CLASS_NAMED("ActionsCell")
@interface MSFActionsCell : UITableViewCell
/// Style describing whether or not the cell’s custom top separator should be visible and how wide it should extend
@property (nonatomic) enum MSFTableViewCellSeparatorType topSeparatorType;
/// Style describing whether or not the cell’s custom bottom separator should be visible and how wide it should extend
@property (nonatomic) enum MSFTableViewCellSeparatorType bottomSeparatorType;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@property (nonatomic) enum MSFTableViewCellBackgroundStyleType backgroundStyleType;
@property (nonatomic, readonly, strong) UIButton * _Nonnull action1Button;
@property (nonatomic, readonly, strong) UIButton * _Nonnull action2Button;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Sets up the action cell with 1 or 2 actions.
/// \param action1Title The title of the first action.
///
/// \param action2Title The title of the second action.
///
/// \param action1Type type describing if the first action has ‘.regular’, ‘.destructive’ or ‘.communication’ color.
///
/// \param action2Type type describing if the second action has ‘.regular’, ‘.destructive’ or ‘.communication’ color.
///
- (void)setupWithAction1Title:(NSString * _Nonnull)action1Title action2Title:(NSString * _Nonnull)action2Title action1Type:(enum MSFActionsCellActionType)action1Type action2Type:(enum MSFActionsCellActionType)action2Type;
/// Sets up the action cell with 1 action
- (void)setupWithAction1Title:(NSString * _Nonnull)action1Title action1Type:(enum MSFActionsCellActionType)action1Type;
- (void)layoutSubviews;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)didMoveToWindow;
- (void)prepareForReuse;
- (void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MSFActionsCellActionType, "ActionType", closed) {
  MSFActionsCellActionTypeRegular = 0,
  MSFActionsCellActionTypeDestructive = 1,
  MSFActionsCellActionTypeCommunication = 2,
};


SWIFT_CLASS_NAMED("ActivityIndicatorCell")
@interface MSFActivityIndicatorCell : UITableViewCell
@property (nonatomic) enum MSFTableViewCellBackgroundStyleType backgroundStyleType;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)didMoveToWindow;
- (void)prepareForReuse;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
@end

@class CALayer;

/// An animation synchronizer syncs homogeneous layer animations by calculating the appropriate timeOffset
/// of a referenceLayer so that newly added animations can stay in sync with existing animations.
SWIFT_PROTOCOL_NAMED("AnimationSynchronizerProtocol")
@protocol MSFAnimationSynchronizerProtocol
/// Current reference layer to compare timing against.
@property (nonatomic, strong) CALayer * _Nullable referenceLayer;
/// Get the time offset for the given layer in order to sync the given layer
/// with the referenceLayer.
/// \param layer Layer to get the time offset for to sync with the referenceLayer.
///
- (CFTimeInterval)timeOffsetFor:(CALayer * _Nonnull)layer SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("AnimationSynchronizer")
@interface MSFAnimationSynchronizer : NSObject <MSFAnimationSynchronizerProtocol>
- (nonnull instancetype)initWithReferenceLayer:(CALayer * _Nullable)referenceLayer OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, weak) CALayer * _Nullable referenceLayer;
- (CFTimeInterval)timeOffsetFor:(CALayer * _Nonnull)layer SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class MSFBadgeView;
@class MSFBadgeViewDataSource;
@protocol MSFBadgeFieldDelegate;

/// BadgeField is a UIView that acts as a UITextField that can contains badges with enclosed text.
/// It supports:
/// <ul>
///   <li>
///     badge selection. Selection leaves the order of pills unchanged.
///   </li>
///   <li>
///     badge drag and drop between multiple BadgeFields
///   </li>
///   <li>
///     placeholder (hidden when text is not empty) or introduction text (not hidden when text is not empty)
///   </li>
///   <li>
///     custom input accessory view
///   </li>
///   <li>
///     max number of lines, with custom “+XX” badge to indicate badges that are not displayed
///   </li>
///   <li>
///     voiceover and dynamic text sizing
///   </li>
/// </ul>
SWIFT_CLASS_NAMED("BadgeField")
@interface MSFBadgeField : UIView
@property (nonatomic, copy) NSString * _Nonnull label;
@property (nonatomic, copy) NSString * _Nonnull placeholder;
/// The max number of lines on which the badges should be laid out. If badges can’t fit in the available number of lines, the textfield will add a <code>moreBadge</code> at the end of the last displayed line.
/// Set <code>numberOfLines</code> to 0 to remove any limit for the number of lines.
/// The default value is 0.
/// Note:  Drag and drop should not be used with text fields that have a <code>numberOfLines</code> != 0. The resulting behavior is unknown.
@property (nonatomic) NSInteger numberOfLines;
/// Indicates whether or not the badge field is “editable”. Note: if <code>isEditable</code> is false and in “non-editable” mode, the user CAN select badges but CAN’T add, delete or drag badge views.
@property (nonatomic) BOOL isEditable;
/// <code>isActive</code> is a proxy property that is transmitted to all the badge views. Badge views should have their style altered if this is true. But this is the decision of whoever implement a new badge view abstract class. Note that this does not change the touch handling behavior in any way.
@property (nonatomic) BOOL isActive;
/// Set <code>allowsDragAndDrop</code>to determine whether or not the dragging and dropping of badges between badge fields is allowed.
@property (nonatomic) BOOL allowsDragAndDrop;
/// “Soft” means that the <code>badgeField</code> badges the text only under certain conditions.
/// It’s the delegate’s responsibility to define these conditions, via <code>badgeField(_, shouldBadgeText:, forSoftBadgingString:)</code>
@property (nonatomic, copy) NSString * _Nonnull softBadgingCharacters;
/// “Hard” means that the <code>badgeField</code> badges the text as soon as one of these character is used.
@property (nonatomic, copy) NSString * _Nonnull hardBadgingCharacters;
@property (nonatomic, readonly, copy) NSArray<MSFBadgeView *> * _Nonnull badges;
@property (nonatomic, readonly, copy) NSArray<MSFBadgeViewDataSource *> * _Nonnull badgeDataSources;
@property (nonatomic, weak) id <MSFBadgeFieldDelegate> _Nullable badgeFieldDelegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Sets up the view using the badge data sources.
- (void)setupWithDataSources:(NSArray<MSFBadgeViewDataSource *> * _Nonnull)dataSources;
/// Updates the view using existing data sources. This is a bit of a hack since it’s better to assume <code>BadgeViewDataSource</code> is immutable, but this is necessary to update badge style without losing the current state.
- (void)reload;
- (void)layoutSubviews;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (CGFloat)heightThatFitsWithBadgeHeight:(CGFloat)badgeHeight numberOfLines:(NSInteger)numberOfLines SWIFT_WARN_UNUSED_RESULT;
/// Badges the current text field content
- (void)badgeText;
- (void)addBadgesWithDataSources:(NSArray<MSFBadgeViewDataSource *> * _Nonnull)dataSources;
- (void)addBadgeWithDataSource:(MSFBadgeViewDataSource * _Nonnull)dataSource fromUserAction:(BOOL)fromUserAction updateConstrainedBadges:(BOOL)updateConstrainedBadges;
- (void)deleteBadgesWithDataSource:(MSFBadgeViewDataSource * _Nonnull)dataSource;
- (void)deleteAllBadges;
- (void)selectBadge:(MSFBadgeView * _Nonnull)badge;
@property (nonatomic, readonly, copy) NSString * _Nonnull textFieldContent;
- (void)resetTextFieldContent;
- (BOOL)becomeFirstResponder;
@property (nonatomic, readonly) BOOL isFirstResponder;
- (BOOL)resignFirstResponder;
- (NSInteger)accessibilityElementCount SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)accessibilityElementAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)indexOfAccessibilityElement:(id _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
- (void)voiceOverFocusOnTextFieldAndAnnounce:(NSString * _Nullable)announcement;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL_NAMED("BadgeViewDelegate")
@protocol MSFBadgeViewDelegate
- (void)didSelectBadge:(MSFBadgeView * _Nonnull)badge;
- (void)didTapSelectedBadge:(MSFBadgeView * _Nonnull)badge;
@end


@interface MSFBadgeField (SWIFT_EXTENSION(FluentUI)) <MSFBadgeViewDelegate>
- (void)didSelectBadge:(MSFBadgeView * _Nonnull)badge;
- (void)didTapSelectedBadge:(MSFBadgeView * _Nonnull)badge;
@end

@class UITextField;

@interface MSFBadgeField (SWIFT_EXTENSION(FluentUI)) <UITextFieldDelegate>
- (BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldEndEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL_NAMED("BadgeFieldDelegate")
@protocol MSFBadgeFieldDelegate
@optional
- (MSFBadgeViewDataSource * _Nonnull)badgeField:(MSFBadgeField * _Nonnull)badgeField badgeDataSourceForText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (void)badgeField:(MSFBadgeField * _Nonnull)badgeField willChangeTextFieldContentWithText:(NSString * _Nonnull)newText;
- (void)badgeFieldDidChangeTextFieldContent:(MSFBadgeField * _Nonnull)badgeField isPaste:(BOOL)isPaste;
- (BOOL)badgeField:(MSFBadgeField * _Nonnull)badgeField shouldBadgeText:(NSString * _Nonnull)text forSoftBadgingString:(NSString * _Nonnull)badgingString SWIFT_WARN_UNUSED_RESULT;
/// <code>didAddBadge</code> and <code>didDeleteBadge</code> won’t be called in the following case:
/// add/delete were not triggered by a user action. In this case, handle the consequences of a add/delete after the external class called setupViewWithBadgeDataSources or addBadgeWithDataSource
- (void)badgeField:(MSFBadgeField * _Nonnull)badgeField didAddBadge:(MSFBadgeView * _Nonnull)badge;
- (void)badgeField:(MSFBadgeField * _Nonnull)badgeField didDeleteBadge:(MSFBadgeView * _Nonnull)badge;
/// <code>shouldAddBadgeForBadgeDataSource</code> defaults to true. Called only if the add results from a user action.
- (BOOL)badgeField:(MSFBadgeField * _Nonnull)badgeField shouldAddBadgeForBadgeDataSource:(MSFBadgeViewDataSource * _Nonnull)badgeDataSource SWIFT_WARN_UNUSED_RESULT;
- (MSFBadgeView * _Nonnull)badgeField:(MSFBadgeField * _Nonnull)badgeField newBadgeForBadgeDataSource:(MSFBadgeViewDataSource * _Nonnull)badgeDataSource SWIFT_WARN_UNUSED_RESULT;
- (MSFBadgeView * _Nonnull)badgeField:(MSFBadgeField * _Nonnull)badgeField newMoreBadgeForBadgeDataSources:(NSArray<MSFBadgeViewDataSource *> * _Nonnull)badgeDataSources SWIFT_WARN_UNUSED_RESULT;
- (void)badgeFieldContentHeightDidChange:(MSFBadgeField * _Nonnull)badgeField;
- (void)badgeField:(MSFBadgeField * _Nonnull)badgeField didTapSelectedBadge:(MSFBadgeView * _Nonnull)badge;
- (BOOL)badgeField:(MSFBadgeField * _Nonnull)badgeField shouldDragBadge:(MSFBadgeView * _Nonnull)badge SWIFT_WARN_UNUSED_RESULT;
/// <code>destinationBadgeField</code> is nil if the badge is animated back to its original field.
/// <code>newBadge</code> is nil if the destination field returned false to <code>badgeField:shouldAddBadgeForBadgeDataSource</code> when the user dropped the badge.
- (void)badgeField:(MSFBadgeField * _Nonnull)originbadgeField didEndDraggingOriginBadge:(MSFBadgeView * _Nonnull)originBadge toBadgeField:(MSFBadgeField * _Nullable)destinationBadgeField withNewBadge:(MSFBadgeView * _Nullable)newBadge;
- (BOOL)badgeFieldShouldBeginEditing:(MSFBadgeField * _Nonnull)badgeField SWIFT_WARN_UNUSED_RESULT;
- (void)badgeFieldDidBeginEditing:(MSFBadgeField * _Nonnull)badgeField;
- (void)badgeFieldDidEndEditing:(MSFBadgeField * _Nonnull)badgeField;
/// <code>badgeFieldShouldReturn</code> is called only when there’s no text in the text field, otherwise <code>BadgeField</code> badges the text and doesn’t call this.
- (BOOL)badgeFieldShouldReturn:(MSFBadgeField * _Nonnull)badgeField SWIFT_WARN_UNUSED_RESULT;
/// This is called to check if we should make badges inactive on textFieldDidEndEditing.
/// If not implemented, the default value assumed is false.
- (BOOL)badgeFieldShouldKeepBadgesActiveOnEndEditing:(MSFBadgeField * _Nonnull)badgeField SWIFT_WARN_UNUSED_RESULT;
@end

@class UIColor;

/// <code>BadgeView</code> is used to present text with a colored background in the form of a “badge”. It is used in <code>BadgeField</code> to represent a selected item.
/// <code>BadgeView</code> can be selected with a tap gesture and tapped again after entering a selected state for the purpose of displaying more details about the entity represented by the selected badge.
SWIFT_CLASS_NAMED("BadgeView")
@interface MSFBadgeView : UIView
@property (nonatomic, strong) MSFBadgeViewDataSource * _Nullable dataSource;
@property (nonatomic, weak) id <MSFBadgeViewDelegate> _Nullable delegate;
@property (nonatomic) BOOL isActive;
@property (nonatomic) BOOL isSelected;
@property (nonatomic, strong) UIColor * _Nullable labelTextColor;
@property (nonatomic, strong) UIColor * _Nonnull selectedLabelTextColor;
@property (nonatomic, strong) UIColor * _Nullable disabledLabelTextColor;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
@property (nonatomic, strong) UIColor * _Nullable selectedBackgroundColor;
@property (nonatomic) NSLineBreakMode lineBreakMode;
@property (nonatomic) CGFloat minWidth;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithDataSource:(MSFBadgeViewDataSource * _Nonnull)dataSource OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)didMoveToWindow;
@property (nonatomic, copy) NSString * _Nullable accessibilityLabel;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MSFBadgeViewStyle, "Style", closed) {
  MSFBadgeViewStyleDefault = 0,
  MSFBadgeViewStyleWarning = 1,
  MSFBadgeViewStyleError = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFBadgeViewSize, "Size", closed) {
  MSFBadgeViewSizeSmall = 0,
  MSFBadgeViewSizeMedium = 1,
};

@class NSNumber;

SWIFT_CLASS_NAMED("BadgeViewDataSource")
@interface MSFBadgeViewDataSource : NSObject
@property (nonatomic, copy) NSString * _Nonnull text;
@property (nonatomic) enum MSFBadgeViewStyle style;
@property (nonatomic) enum MSFBadgeViewSize size;
@property (nonatomic, strong) UIView * _Nullable customView;
@property (nonatomic, strong) NSNumber * _Nullable customViewVerticalPadding;
@property (nonatomic, strong) NSNumber * _Nullable customViewPaddingLeft;
@property (nonatomic, strong) NSNumber * _Nullable customViewPaddingRight;
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text style:(enum MSFBadgeViewStyle)style size:(enum MSFBadgeViewSize)size OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text style:(enum MSFBadgeViewStyle)style size:(enum MSFBadgeViewSize)size customView:(UIView * _Nullable)customView customViewVerticalPadding:(NSNumber * _Nullable)customViewVerticalPadding customViewPaddingLeft:(NSNumber * _Nullable)customViewPaddingLeft customViewPaddingRight:(NSNumber * _Nullable)customViewPaddingRight;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC8FluentUI14BarButtonItems")
@interface BarButtonItems : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("BlurringView")
@interface MSFBlurringView : UIView
- (nonnull instancetype)initWithStyle:(UIBlurEffectStyle)style backgroundColor:(UIColor * _Nullable)backgroundColor OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)updateBackgroundWithBackgroundColor:(UIColor * _Nullable)backgroundColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


enum MSFTableViewCellCustomViewSize : NSInteger;
enum MSFTableViewCellAccessoryType : NSInteger;
@class NSAttributedString;
@class UITouch;
@class UIEvent;
@class UICellConfigurationState;

/// <code>TableViewCell</code> is used to present a cell with one, two, or three lines of text with an optional custom view and an accessory.
/// The <code>title</code> is displayed as the first line of text with the <code>subtitle</code> as the second line and the <code>footer</code> the third line.
/// If a <code>subtitle</code> and <code>footer</code> are not provided the cell will be configured as a “small” size cell showing only the <code>title</code> line of text and a smaller custom view.
/// If a <code>subtitle</code> is provided and a <code>footer</code> is not provided the cell will display two lines of text and will leave space for the <code>title</code> if it is not provided.
/// If a <code>footer</code> is provided the cell will display three lines of text and will leave space for the <code>subtitle</code> and <code>title</code> if they are not provided.
/// If a <code>customView</code> is not provided the <code>customView</code> will be hidden and the displayed text will take up the empty space left by the hidden <code>customView</code>.
/// Specify <code>accessoryType</code> on setup to show either a disclosure indicator or a <code>detailButton</code>. The <code>detailButton</code> will display a button with an ellipsis icon which can be configured by passing in a closure to the cell’s <code>onAccessoryTapped</code> property or by implementing UITableViewDelegate’s <code>accessoryButtonTappedForRowWith</code> method.
/// NOTE: This cell implements its own custom separator. Make sure to remove the UITableViewCell built-in separator by setting <code>separatorStyle = .none</code> on your table view. To remove the cell’s custom separator set <code>bottomSeparatorType</code> to <code>.none</code>.
SWIFT_CLASS_NAMED("TableViewCell")
@interface MSFTableViewCell : UITableViewCell
/// The height for the cell based on the text provided. Useful when <code>numberOfLines</code> of <code>title</code>, <code>subtitle</code>, <code>footer</code> is 1.
/// <code>smallHeight</code> - Height for the cell when only the <code>title</code> is provided in a single line of text.
/// <code>mediumHeight</code> - Height for the cell when only the <code>title</code> and <code>subtitle</code> are provided in 2 lines of text.
/// <code>largeHeight</code> - Height for the cell when the <code>title</code>, <code>subtitle</code>, and <code>footer</code> are provided in 3 lines of text.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat smallHeight;)
+ (CGFloat)smallHeight SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat mediumHeight;)
+ (CGFloat)mediumHeight SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat largeHeight;)
+ (CGFloat)largeHeight SWIFT_WARN_UNUSED_RESULT;
/// Identifier string for TableViewCell
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull identifier;)
+ (NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// A constant representing the number of lines for a label in which no change will be made when the <code>preferredContentSizeCategory</code> returns a size greater than <code>.large</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger defaultNumberOfLinesForLargerDynamicType;)
+ (NSInteger)defaultNumberOfLinesForLargerDynamicType SWIFT_WARN_UNUSED_RESULT;
/// The default leading padding in the cell.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultPaddingLeading;)
+ (CGFloat)defaultPaddingLeading SWIFT_WARN_UNUSED_RESULT;
/// The default trailing padding in the cell.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultPaddingTrailing;)
+ (CGFloat)defaultPaddingTrailing SWIFT_WARN_UNUSED_RESULT;
/// The height of the cell based on the height of its content.
/// \param title The title string
///
/// \param subtitle The subtitle string
///
/// \param footer The footer string
///
/// \param titleLeadingAccessoryView The accessory view on the leading edge of the title
///
/// \param titleTrailingAccessoryView The accessory view on the trailing edge of the title
///
/// \param subtitleLeadingAccessoryView The accessory view on the leading edge of the subtitle
///
/// \param subtitleTrailingAccessoryView The accessory view on the trailing edge of the subtitle
///
/// \param footerLeadingAccessoryView The accessory view on the leading edge of the footer
///
/// \param footerTrailingAccessoryView The accessory view on the trailing edge of the footer
///
/// \param customViewSize The custom view size for the cell based on <code>TableViewCell.CustomViewSize</code>
///
/// \param customAccessoryView The custom accessory view that appears near the trailing edge of the cell
///
/// \param accessoryType The <code>TableViewCellAccessoryType</code> that the cell should display
///
/// \param titleNumberOfLines The number of lines that the title should display
///
/// \param subtitleNumberOfLines The number of lines that the subtitle should display
///
/// \param footerNumberOfLines The number of lines that the footer should display
///
/// \param customAccessoryViewExtendsToEdge Boolean defining whether custom accessory view is extended to the trailing edge of the cell or not (ignored when accessory type is not <code>.none</code>)
///
/// \param containerWidth The width of the cell’s super view (e.g. the table view’s width)
///
/// \param isInSelectionMode Boolean describing if the cell is in multi-selection mode which shows/hides a checkmark image on the leading edge
///
///
/// returns:
/// a value representing the calculated height of the cell
+ (CGFloat)heightWithTitle:(NSString * _Nonnull)title subtitle:(NSString * _Nonnull)subtitle footer:(NSString * _Nonnull)footer titleLeadingAccessoryView:(UIView * _Nullable)titleLeadingAccessoryView titleTrailingAccessoryView:(UIView * _Nullable)titleTrailingAccessoryView subtitleLeadingAccessoryView:(UIView * _Nullable)subtitleLeadingAccessoryView subtitleTrailingAccessoryView:(UIView * _Nullable)subtitleTrailingAccessoryView footerLeadingAccessoryView:(UIView * _Nullable)footerLeadingAccessoryView footerTrailingAccessoryView:(UIView * _Nullable)footerTrailingAccessoryView customViewSize:(enum MSFTableViewCellCustomViewSize)customViewSize customAccessoryView:(UIView * _Nullable)customAccessoryView accessoryType:(enum MSFTableViewCellAccessoryType)accessoryType titleNumberOfLines:(NSInteger)titleNumberOfLines subtitleNumberOfLines:(NSInteger)subtitleNumberOfLines footerNumberOfLines:(NSInteger)footerNumberOfLines customAccessoryViewExtendsToEdge:(BOOL)customAccessoryViewExtendsToEdge containerWidth:(CGFloat)containerWidth isInSelectionMode:(BOOL)isInSelectionMode SWIFT_WARN_UNUSED_RESULT;
/// The preferred width of the cell based on the width of its content.
/// \param title The title string
///
/// \param subtitle The subtitle string
///
/// \param footer The footer string
///
/// \param titleLeadingAccessoryView The accessory view on the leading edge of the title
///
/// \param titleTrailingAccessoryView The accessory view on the trailing edge of the title
///
/// \param subtitleLeadingAccessoryView The accessory view on the leading edge of the subtitle
///
/// \param subtitleTrailingAccessoryView The accessory view on the trailing edge of the subtitle
///
/// \param footerLeadingAccessoryView The accessory view on the leading edge of the footer
///
/// \param footerTrailingAccessoryView The accessory view on the trailing edge of the footer
///
/// \param customViewSize The custom view size for the cell based on <code>TableViewCell.CustomViewSize</code>
///
/// \param customAccessoryView The custom accessory view that appears near the trailing edge of the cell
///
/// \param accessoryType The <code>TableViewCellAccessoryType</code> that the cell should display
///
/// \param customAccessoryViewExtendsToEdge Boolean defining whether custom accessory view is extended to the trailing edge of the cell or not (ignored when accessory type is not <code>.none</code>)
///
/// \param isInSelectionMode Boolean describing if the cell is in multi-selection mode which shows/hides a checkmark image on the leading edge
///
///
/// returns:
/// a value representing the preferred width of the cell
+ (CGFloat)preferredWidthWithTitle:(NSString * _Nonnull)title subtitle:(NSString * _Nonnull)subtitle footer:(NSString * _Nonnull)footer titleLeadingAccessoryView:(UIView * _Nullable)titleLeadingAccessoryView titleTrailingAccessoryView:(UIView * _Nullable)titleTrailingAccessoryView subtitleLeadingAccessoryView:(UIView * _Nullable)subtitleLeadingAccessoryView subtitleTrailingAccessoryView:(UIView * _Nullable)subtitleTrailingAccessoryView footerLeadingAccessoryView:(UIView * _Nullable)footerLeadingAccessoryView footerTrailingAccessoryView:(UIView * _Nullable)footerTrailingAccessoryView customViewSize:(enum MSFTableViewCellCustomViewSize)customViewSize customAccessoryView:(UIView * _Nullable)customAccessoryView accessoryType:(enum MSFTableViewCellAccessoryType)accessoryType customAccessoryViewExtendsToEdge:(BOOL)customAccessoryViewExtendsToEdge isInSelectionMode:(BOOL)isInSelectionMode SWIFT_WARN_UNUSED_RESULT;
/// Text that appears as the first line of text
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Text that appears as the second line of text
@property (nonatomic, readonly, copy) NSString * _Nonnull subtitle;
/// Text that appears as the third line of text
@property (nonatomic, readonly, copy) NSString * _Nonnull footer;
/// The attributedText for the title.
@property (nonatomic, strong) NSAttributedString * _Nullable attributedTitle;
/// The attributedText for the subtitle.
@property (nonatomic, strong) NSAttributedString * _Nullable attributedSubtitle;
/// The attributedText for the footer.
@property (nonatomic, strong) NSAttributedString * _Nullable attributedFooter;
/// The leading padding.
@property (nonatomic) CGFloat paddingLeading;
/// The trailing padding.
@property (nonatomic) CGFloat paddingTrailing;
/// The maximum number of lines to be shown for <code>title</code>
@property (nonatomic) NSInteger titleNumberOfLines;
/// The maximum number of lines to be shown for <code>subtitle</code>
@property (nonatomic) NSInteger subtitleNumberOfLines;
/// The maximum number of lines to be shown for <code>footer</code>
@property (nonatomic) NSInteger footerNumberOfLines;
/// The number of lines to show for the <code>title</code> if <code>preferredContentSizeCategory</code> is set to a size greater than <code>.large</code>. The default value indicates that no change will be made to the <code>title</code> and <code>titleNumberOfLines</code> will be used for all content sizes.
@property (nonatomic) NSInteger titleNumberOfLinesForLargerDynamicType;
/// The number of lines to show for the <code>subtitle</code> if <code>preferredContentSizeCategory</code> is set to a size greater than <code>.large</code>. The default value indicates that no change will be made to the <code>subtitle</code> and <code>subtitleNumberOfLines</code> will be used for all content sizes.
@property (nonatomic) NSInteger subtitleNumberOfLinesForLargerDynamicType;
/// The number of lines to show for the <code>footer</code> if <code>preferredContentSizeCategory</code> is set to a size greater than <code>.large</code>. The default value indicates that no change will be made to the <code>footer</code> and <code>footerNumberOfLines</code> will be used for all content sizes.
@property (nonatomic) NSInteger footerNumberOfLinesForLargerDynamicType;
/// Updates the lineBreakMode of the <code>title</code>
@property (nonatomic) NSLineBreakMode titleLineBreakMode;
/// Updates the lineBreakMode of the <code>subtitle</code>
@property (nonatomic) NSLineBreakMode subtitleLineBreakMode;
/// Updates the lineBreakMode of the <code>footer</code>
@property (nonatomic) NSLineBreakMode footerLineBreakMode;
/// The accessory view on the leading edge of the title
@property (nonatomic, strong) UIView * _Nullable titleLeadingAccessoryView;
/// The accessory view on the trailing edge of the title
@property (nonatomic, strong) UIView * _Nullable titleTrailingAccessoryView;
/// The accessory view on the leading edge of the subtitle
@property (nonatomic, strong) UIView * _Nullable subtitleLeadingAccessoryView;
/// The accessory view on the trailing edge of the subtitle
@property (nonatomic, strong) UIView * _Nullable subtitleTrailingAccessoryView;
/// The accessory view on the leading edge of the footer
@property (nonatomic, strong) UIView * _Nullable footerLeadingAccessoryView;
/// The accessory view on the trailing edge of the footer
@property (nonatomic, strong) UIView * _Nullable footerTrailingAccessoryView;
/// Override to set a specific <code>MSFTableViewCellCustomViewSize</code> on the <code>customView</code>
@property (nonatomic) enum MSFTableViewCellCustomViewSize customViewSize;
/// The custom accessory view of the TableViewCell.
@property (nonatomic, readonly, strong) UIView * _Nullable customAccessoryView;
/// Extends custom accessory view to the trailing edge of the cell. Ignored when accessory type is not <code>.none</code> since in this case the built-in accessory is placed at the edge of the cell preventing custom accessory view from extending.
@property (nonatomic) BOOL customAccessoryViewExtendsToEdge;
/// Style describing whether or not the cell’s top separator should be visible and how wide it should extend
@property (nonatomic) enum MSFTableViewCellSeparatorType topSeparatorType;
/// Style describing whether or not the cell’s bottom separator should be visible and how wide it should extend
@property (nonatomic) enum MSFTableViewCellSeparatorType bottomSeparatorType;
@property (nonatomic) enum MSFTableViewCellBackgroundStyleType backgroundStyleType;
/// When <code>isEnabled</code> is <code>false</code>, disables ability for a user to interact with a cell and dims cell’s contents
@property (nonatomic) BOOL isEnabled;
/// Enables / disables multi-selection mode by showing / hiding a checkmark selection indicator on the leading edge
@property (nonatomic) BOOL isInSelectionMode;
/// <code>onAccessoryTapped</code> is called when <code>detailButton</code> accessory view is tapped
@property (nonatomic, copy) void (^ _Nullable onAccessoryTapped)(void);
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@property (nonatomic) CGRect bounds;
@property (nonatomic) CGRect frame;
@property (nonatomic, copy) NSString * _Nullable accessibilityHint;
@property (nonatomic, copy) NSString * _Nullable accessibilityValue;
@property (nonatomic) CGPoint accessibilityActivationPoint;
/// Initializes TableViewCell with the cell style.
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Sets up the cell with text, a custom view, a custom accessory view, and an accessory type
/// \param title Text that appears as the first line of text
///
/// \param subtitle Text that appears as the second line of text
///
/// \param footer Text that appears as the third line of text
///
/// \param customView The custom view that appears near the leading edge next to the text
///
/// \param customAccessoryView The view acting as an accessory view that appears on the trailing edge, next to the accessory type if provided
///
/// \param accessoryType The type of accessory that appears on the trailing edge: a disclosure indicator or a details button with an ellipsis icon
///
- (void)setupWithTitle:(NSString * _Nonnull)title subtitle:(NSString * _Nonnull)subtitle footer:(NSString * _Nonnull)footer customView:(UIView * _Nullable)customView customAccessoryView:(UIView * _Nullable)customAccessoryView accessoryType:(enum MSFTableViewCellAccessoryType)accessoryType;
/// Sets up the cell with text, a custom view, a custom accessory view, and an accessory type
/// \param title Text that appears as the first line of text
///
/// \param attributedTitle Optional attributed text for the first line of text. If this is not set, the title will be used
///
/// \param subtitle Text that appears as the second line of text
///
/// \param attributedSubtitle Optional attributed text for the second line of text. If this is not set, the subtitle will be used
///
/// \param footer Text that appears as the third line of text
///
/// \param attributedFooter Optional attributed text for the third line of text. If this is not set, the footer will be used
///
/// \param customView The custom view that appears near the leading edge next to the text
///
/// \param customAccessoryView The view acting as an accessory view that appears on the trailing edge, next to the accessory type if provided
///
/// \param accessoryType The type of accessory that appears on the trailing edge: a disclosure indicator or a details button with an ellipsis icon
///
- (void)setupWithTitle:(NSString * _Nonnull)title attributedTitle:(NSAttributedString * _Nullable)attributedTitle subtitle:(NSString * _Nonnull)subtitle attributedSubtitle:(NSAttributedString * _Nullable)attributedSubtitle footer:(NSString * _Nonnull)footer attributedFooter:(NSAttributedString * _Nullable)attributedFooter customView:(UIView * _Nullable)customView customAccessoryView:(UIView * _Nullable)customAccessoryView accessoryType:(enum MSFTableViewCellAccessoryType)accessoryType;
/// Allows to change the accessory type without doing a full <code>setup</code>.
- (void)changeAccessoryTypeTo:(enum MSFTableViewCellAccessoryType)accessoryType;
/// Sets the multi-selection state of the cell, optionally animating the transition between states.
/// \param isInSelectionMode true to set the cell as in selection mode, false to set it as not in selection mode. The default is false.
///
/// \param animated true to animate the transition in / out of selection mode, false to make the transition immediate.
///
- (void)setIsInSelectionMode:(BOOL)isInSelectionMode animated:(BOOL)animated;
/// Any color or stylistic changes on TableViewCell labels should be done through attributedTitle
/// To set color for title label
/// \param color UIColor to set
///
- (void)setTitleLabelTextColorWithColor:(UIColor * _Nonnull)color SWIFT_DEPRECATED_MSG("Any color or stylistic changes on TableViewCell labels should be done through NSAttributedString (attributedTitle parameter of the setup method).");
/// Any color or stylistic changes on TableViewCell labels should be done through attributedSubtitle
/// To set color for subTitle label
/// \param color UIColor to set
///
- (void)setSubTitleLabelTextColorWithColor:(UIColor * _Nonnull)color SWIFT_DEPRECATED_MSG("Any color or stylistic changes on TableViewCell labels should be done through NSAttributedString (attributedSubtitle parameter of the setup method).");
- (void)layoutSubviews;
- (void)prepareForReuse;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)didMoveToWindow;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (void)_bridgedUpdateConfigurationUsingState:(UICellConfigurationState * _Nonnull)state;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MSFTableViewCellSeparatorType, "SeparatorType", closed) {
  MSFTableViewCellSeparatorTypeNone = 0,
  MSFTableViewCellSeparatorTypeInset = 1,
  MSFTableViewCellSeparatorTypeFull = 2,
};


/// <code>BooleanCell</code> is used to present a cell with one line of text with an optional custom view and a UISwitch accessory view.
/// Use the <code>isOn</code> property to update the cell accessory view’s <code>isOn</code> property.
/// Use the <code>isSwitchEnabled</code> property to update the cell accessory view’s <code>isEnabled</code> property.
/// Use <code>onValueChanged</code> as a callback for an event that changes the value of the accessory view.
SWIFT_CLASS_NAMED("BooleanCell")
@interface MSFBooleanCell : MSFTableViewCell
/// Updates the cell accessory view’s <code>isOn</code> property
@property (nonatomic) BOOL isOn;
/// Updates the cell accessory view’s <code>isEnabled</code> property
@property (nonatomic) BOOL isSwitchEnabled;
@property (nonatomic) BOOL isEnabled;
/// <code>onValueChanged</code> is called when the cell accessory view’s value has changed
@property (nonatomic, copy) void (^ _Nullable onValueChanged)(void);
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Sets up the content of the cell
/// \param title Text that appears as a single line
///
/// \param customView An optional custom view that appears on the leading edge, adjacent to the start of the <code>title</code> text
///
/// \param isOn A boolean value describing the <code>isOn</code> state of the accessory view
///
- (void)setupWithTitle:(NSString * _Nonnull)title customView:(UIView * _Nullable)customView isOn:(BOOL)isOn;
/// Sets up the content of the cell
/// \param title Text that appears as a single line
///
/// \param customView An optional custom view that appears on the leading edge, adjacent to the start of the <code>title</code> text
///
/// \param isOn A boolean value describing the <code>isOn</code> state of the accessory view
///
/// \param isSwitchEnabled A boolean value describing the <code>isEnabled</code> state of the accessory view
///
- (void)setupWithTitle:(NSString * _Nonnull)title customView:(UIView * _Nullable)customView isOn:(BOOL)isOn isSwitchEnabled:(BOOL)isSwitchEnabled;
- (void)didMoveToWindow;
@end

@class MSFCommandingItem;
@class MSFCommandingSection;
@class UILayoutGuide;
@protocol MSFBottomCommandingControllerDelegate;
@class UIViewPropertyAnimator;
@class UITraitCollection;
@protocol UIViewControllerTransitionCoordinator;
@class NSBundle;

/// Persistent commanding surface displayed at the bottom of the available area.
/// The presentation style automatically varies depending on the current horizontal <code>UIUserInterfaceSizeClass</code>:
/// <code>.unspecified</code> and <code>.compact</code> - the surface is displayed as an expandable bottom sheet.
/// <code>.regular</code> -  the surface is displayed as a floating bottom bar.
/// In both styles, <code>heroItems</code> are always presented in a horizontal stack.
/// Items from the <code>expandedListSections</code> are either presented in an expanded sheet or a popover, depending on the current style.
SWIFT_CLASS_NAMED("BottomCommandingController")
@interface MSFBottomCommandingController : UIViewController
/// View controller that will be displayed below the bottom commanding UI.
@property (nonatomic, strong) UIViewController * _Nullable contentViewController;
/// Items to be displayed in an area that’s always visible. This is either the top of the the sheet,
/// or the main bottom bar area, depending on current horizontal UIUserInterfaceSizeClass.
/// At most 5 hero items are supported.
@property (nonatomic, copy) NSArray<MSFCommandingItem *> * _Nonnull heroItems;
/// Sections with items to be displayed in the list area.
@property (nonatomic, copy) NSArray<MSFCommandingSection *> * _Nonnull expandedListSections;
/// Indicates if the bottom commanding UI is hidden
/// Changes to this property are animated.
@property (nonatomic) BOOL isHidden;
/// Indicates whether a more button is visible in the sheet style when <code>expandedListSections</code> is non-empty.
/// Tapping the button will expand or collapse the sheet.
@property (nonatomic) BOOL prefersSheetMoreButtonVisible;
/// Indicates if the sheet should always fill the available width. The default value is true.
@property (nonatomic) BOOL sheetShouldAlwaysFillWidth;
/// A layout guide that covers the on-screen portion of the current commanding view.
@property (nonatomic, readonly, strong) UILayoutGuide * _Nonnull commandingLayoutGuide;
/// Height of the portion of the collapsed commanding UI that’s in the safe area.
/// When using the bottom bar style, this will include the entire height of the bottom bar.
/// Valid after the root view is loaded.
/// Use this to adjust <code>contentInsets</code> on your scroll views. This height won’t change when the commanding UI is hidden or expanded.
@property (nonatomic, readonly) CGFloat collapsedHeightInSafeArea;
/// The object that acts as the delegate of this controller.
@property (nonatomic, weak) id <MSFBottomCommandingControllerDelegate> _Nullable delegate;
/// Sets the <code>isHidden</code> property with a completion handler.
/// \param isHidden The new value.
///
/// \param animated Indicates if the change should be animated. The default value is <code>true</code>.
///
/// \param completion Closure to be called when the state change completes.
///
- (void)setIsHidden:(BOOL)isHidden animated:(BOOL)animated completion:(void (^ _Nullable)(BOOL))completion;
/// Initiates an interactive <code>isHidden</code> state change driven by the returned <code>UIViewPropertyAnimator</code>.
/// For usage details, see <code>BottomSheetController.prepareInteractiveIsHiddenChange</code>.
/// \param isHidden The target state.
///
/// \param completion Closure to be called when the state change completes.
///
///
/// returns:
/// A <code>UIViewPropertyAnimator</code>. The associated animations start in a paused state.
- (UIViewPropertyAnimator * _Nullable)prepareInteractiveIsHiddenChange:(BOOL)isHidden completion:(void (^ _Nullable)(UIViewAnimatingPosition))completion SWIFT_WARN_UNUSED_RESULT;
/// Initializes the bottom commanding controller with a given content view controller.
/// \param contentViewController View controller that will be displayed below the bottom commanding UI.
///
- (nonnull instancetype)initWith:(UIViewController * _Nullable)contentViewController OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// Current rectangle of the view that represents the given hero item.
/// \param heroItem A <code>CommandingItem</code> contained in <code>heroItems</code>.
///
///
/// returns:
/// The current rectangle in the coordinate system of the receiver.
- (CGRect)rectForHeroItem:(MSFCommandingItem * _Nonnull)heroItem SWIFT_WARN_UNUSED_RESULT;
- (void)loadView;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (void)willTransitionToTraitCollection:(UITraitCollection * _Nonnull)newCollection withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)viewSafeAreaInsetsDidChange;
/// A string to optionally customize the accessibility label of the bottom sheet handle.
/// The message should convey the “Expand” action and will be used when the bottom sheet is collapsed.
@property (nonatomic, copy) NSString * _Nullable handleExpandCustomAccessibilityLabel;
/// A string to optionally customize the accessibility label of the bottom sheet handle.
/// The message should convey the “Collapse” action and will be used when the bottom sheet is expanded.
@property (nonatomic, copy) NSString * _Nullable handleCollapseCustomAccessibilityLabel;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UIPresentationController;

@interface MSFBottomCommandingController (SWIFT_EXTENSION(FluentUI)) <UIPopoverPresentationControllerDelegate>
- (void)presentationControllerDidDismiss:(UIPresentationController * _Nonnull)presentationController;
@end

@class MSFBottomSheetController;
enum BottomSheetExpansionState : NSInteger;
enum BottomSheetInteraction : NSInteger;

SWIFT_PROTOCOL_NAMED("BottomSheetControllerDelegate")
@protocol MSFBottomSheetControllerDelegate
@optional
/// Called after a transition to a new expansion state completes.
/// External changes to<code>isExpanded</code> or <code>isHidden</code> will not trigger this callback.
/// \param bottomSheetController The caller object.
///
/// \param expansionState The expansion state that the sheet moved to.
///
/// \param interaction The user interaction that caused the state change.
///
- (void)bottomSheetController:(MSFBottomSheetController * _Nonnull)bottomSheetController didMoveTo:(enum BottomSheetExpansionState)expansionState interaction:(enum BottomSheetInteraction)interaction;
/// Called when <code>collapsedHeightInSafeArea</code> changes.
- (void)bottomSheetControllerCollapsedHeightInSafeAreaDidChange:(MSFBottomSheetController * _Nonnull)bottomSheetController;
@end


@interface MSFBottomCommandingController (SWIFT_EXTENSION(FluentUI)) <MSFBottomSheetControllerDelegate>
- (void)bottomSheetControllerCollapsedHeightInSafeAreaDidChange:(MSFBottomSheetController * _Nonnull)bottomSheetController;
- (void)bottomSheetController:(MSFBottomSheetController * _Nonnull)bottomSheetController didMoveTo:(enum BottomSheetExpansionState)expansionState interaction:(enum BottomSheetInteraction)interaction;
@end


@interface MSFBottomCommandingController (SWIFT_EXTENSION(FluentUI)) <UITableViewDataSource>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


@interface MSFBottomCommandingController (SWIFT_EXTENSION(FluentUI)) <UITableViewDelegate>
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


enum BottomCommandingInteraction : NSInteger;

SWIFT_PROTOCOL_NAMED("BottomCommandingControllerDelegate")
@protocol MSFBottomCommandingControllerDelegate
@optional
/// Called when <code>collapsedHeightInSafeArea</code> changes.
- (void)bottomCommandingControllerCollapsedHeightInSafeAreaDidChange:(MSFBottomCommandingController * _Nonnull)bottomCommandingController;
/// Called after the bottom sheet expansion state changes.
/// External changes to <code>isHidden</code> will not trigger this callback.
/// \param bottomCommandingController The caller object.
///
/// \param expansionState The expansion state the sheet moved to.
///
/// \param commandingInteraction If the state change was caused by user interaction, it will be indicated using this enum.
///
/// \param sheetInteraction If <code>commandingInteraction</code> is <code>.sheetInteraction</code>, this enum will contain more information about what triggered the state change.
///
- (void)bottomCommandingController:(MSFBottomCommandingController * _Nonnull)bottomCommandingController sheetDidMoveTo:(enum BottomSheetExpansionState)expansionState commandingInteraction:(enum BottomCommandingInteraction)commandingInteraction sheetInteraction:(enum BottomSheetInteraction)sheetInteraction;
/// Called after the bottom bar popover is presented.
/// \param bottomCommandingController The caller object.
///
/// \param commandingInteraction The user interaction that caused the popover to show.
///
- (void)bottomCommandingController:(MSFBottomCommandingController * _Nonnull)bottomCommandingController didPresentPopoverWith:(enum BottomCommandingInteraction)commandingInteraction;
/// Called after the bottom bar popover is dismissed.
/// \param bottomCommandingController The caller object.
///
/// \param commandingInteraction The user interaction that caused the popover to dismiss.
///
- (void)bottomCommandingController:(MSFBottomCommandingController * _Nonnull)bottomCommandingController didDismissPopoverWith:(enum BottomCommandingInteraction)commandingInteraction;
@end

/// Interactions that can trigger a state change.
typedef SWIFT_ENUM(NSInteger, BottomCommandingInteraction, closed) {
  BottomCommandingInteractionNoUserAction = 0,
  BottomCommandingInteractionOtherUserAction = 1,
  BottomCommandingInteractionSheetInteraction = 2,
  BottomCommandingInteractionMoreButtonTap = 3,
  BottomCommandingInteractionCommandTap = 4,
};

@class UIScrollView;
@class MSFContentHeightResolutionContext;

SWIFT_CLASS_NAMED("BottomSheetController")
@interface MSFBottomSheetController : UIViewController
/// Initializes the bottom sheet controller
/// \param headerContentView Top part of the sheet content that is visible in both collapsed and expanded state.
///
/// \param expandedContentView Sheet content below the header which is only visible when the sheet is expanded.
///
/// \param shouldShowDimmingView Indicates if the main content is dimmed when the sheet is expanded.
///
- (nonnull instancetype)initWithHeaderContentView:(UIView * _Nullable)headerContentView expandedContentView:(UIView * _Nonnull)expandedContentView shouldShowDimmingView:(BOOL)shouldShowDimmingView OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Top part of the sheet content that is visible in both collapsed and expanded state.
@property (nonatomic, readonly, strong) UIView * _Nullable headerContentView;
/// Sheet content below the header which is only visible when the sheet is expanded.
@property (nonatomic, readonly, strong) UIView * _Nonnull expandedContentView;
/// A scroll view in <code>expandedContentView</code>’s view hierarchy.
/// Provide this to ensure the bottom sheet pan gesture recognizer coordinates with the scroll view to enable scrolling based on current bottom sheet position and content offset.
@property (nonatomic, strong) UIScrollView * _Nullable hostedScrollView;
/// Indicates if the bottom sheet is expandable.
@property (nonatomic) BOOL isExpandable;
/// Indicates if the bottom sheet view is hidden.
/// Changes to this property are animated. When hiding, new value is reflected after the animation completes.
@property (nonatomic) BOOL isHidden;
/// Indicates if the sheet height is flexible.
/// When set to <code>false</code>, the sheet height is static and always corresponds to the height of the maximum expansion state.
/// Interacting with the sheet will only vertically translate it, moving it partially on/off-screen.
/// When set to <code>true</code>, moving the sheet beyond the <code>.collapsed</code> state will resize it.
/// Use flexible height if you have views attached to the bottom of <code>expandedContentView</code> that should always be visible.
@property (nonatomic) BOOL isFlexibleHeight;
/// Height of <code>headerContentView</code>.
/// Setting this is required when the <code>headerContentView</code> is non-nil.
@property (nonatomic) CGFloat headerContentHeight;
/// Preferred height of <code>expandedContentView</code>.
/// The default value is 0, which results in a full screen sheet expansion.
@property (nonatomic) CGFloat preferredExpandedContentHeight;
/// A string to optionally customize the accessibility label of the bottom sheet handle.
/// The message should convey the “Expand” action and will be used when the bottom sheet is collapsed.
@property (nonatomic, copy) NSString * _Nullable handleExpandCustomAccessibilityLabel;
/// A string to optionally customize the accessibility label of the bottom sheet handle.
/// The message should convey the “Collapse” action and will be used when the bottom sheet is expanded.
@property (nonatomic, copy) NSString * _Nullable handleCollapseCustomAccessibilityLabel;
/// Indicates if the bottom sheet is expanded.
/// Changes to this property are animated. A new value is reflected in the getter only after the animation completes.
@property (nonatomic) BOOL isExpanded;
/// A closure for resolving the desired collapsed sheet height given a resolution context.
@property (nonatomic, copy) CGFloat (^ _Nullable collapsedHeightResolver)(MSFContentHeightResolutionContext * _Nonnull);
/// Height of the top portion of the content view that should be visible when the bottom sheet is collapsed.
/// When set to 0, <code>headerContentHeight</code> will be used.
@property (nonatomic) CGFloat collapsedContentHeight;
/// Indicates if the content should be hidden when the sheet is collapsed
@property (nonatomic) BOOL shouldHideCollapsedContent;
/// Indicates if the sheet should always fill the available width. The default value is true.
@property (nonatomic) BOOL shouldAlwaysFillWidth;
/// When enabled, users will be able to move the sheet to the hidden state by swiping down.
@property (nonatomic) BOOL allowsSwipeToHide;
/// Current height of the portion of a collapsed sheet that’s in the safe area.
@property (nonatomic, readonly) CGFloat collapsedHeightInSafeArea;
/// A layout guide that covers the on-screen portion of the sheet view.
@property (nonatomic, readonly, strong) UILayoutGuide * _Nonnull sheetLayoutGuide;
/// The object that acts as the delegate of the bottom sheet.
@property (nonatomic, weak) id <MSFBottomSheetControllerDelegate> _Nullable delegate;
/// Height of the resizing handle
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat resizingHandleHeight;)
+ (CGFloat)resizingHandleHeight SWIFT_WARN_UNUSED_RESULT;
/// Sets the <code>isExpanded</code> property with a completion handler.
/// \param isExpanded The new value.
///
/// \param animated Indicates if the change should be animated. The default value is <code>true</code>.
///
/// \param completion Closure to be called when the state change completes.
///
- (void)setIsExpanded:(BOOL)isExpanded animated:(BOOL)animated completion:(void (^ _Nullable)(BOOL))completion;
/// Changes the <code>isHidden</code> state with a completion handler.
/// \param isHidden The new value.
///
/// \param animated Indicates if the change should be animated. The default value is <code>true</code>.
///
/// \param completion Closure to be called when the state change completes.
///
- (void)setIsHidden:(BOOL)isHidden animated:(BOOL)animated completion:(void (^ _Nullable)(BOOL))completion;
/// Initiates an interactive <code>isHidden</code> state change driven by the returned <code>UIViewPropertyAnimator</code>.
/// The returned animator comes preloaded with all the animations required to reach the target <code>isHidden</code> state.
/// You can modify the <code>fractionComplete</code> property of the animator to interactively drive the animation in the paused state.
/// You can also change the <code>isReversed</code> property to swap the start and target <code>isHidden</code> states.
/// When you are done driving the animation interactively, you must call <code>startAnimation</code> on the animator to let the animation resume
/// from the current value of <code>fractionComplete</code>.
/// \param isHidden The target state.
///
/// \param completion Closure to be called when the state change completes.
///
///
/// returns:
/// A <code>UIViewPropertyAnimator</code>. The associated animations start in a paused state.
- (UIViewPropertyAnimator * _Nullable)prepareInteractiveIsHiddenChange:(BOOL)isHidden completion:(void (^ _Nullable)(UIViewAnimatingPosition))completion SWIFT_WARN_UNUSED_RESULT;
/// Forces a call to <code>collapsedHeightResolver</code> to fetch the latest desired sheet height.
- (void)invalidateSheetSize;
- (void)loadView;
- (void)viewDidLayoutSubviews;
- (void)viewSafeAreaInsetsDidChange;
- (void)willTransitionToTraitCollection:(UITraitCollection * _Nonnull)newCollection withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UIGestureRecognizer;

@interface MSFBottomSheetController (SWIFT_EXTENSION(FluentUI)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldBeRequiredToFailByGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end


/// Defines the position the sheet is currently in
typedef SWIFT_ENUM(NSInteger, BottomSheetExpansionState, closed) {
  BottomSheetExpansionStateExpanded = 0,
  BottomSheetExpansionStateCollapsed = 1,
  BottomSheetExpansionStateHidden = 2,
  BottomSheetExpansionStateTransitioning = 3,
};

/// Interactions that can trigger a state change.
typedef SWIFT_ENUM(NSInteger, BottomSheetInteraction, closed) {
  BottomSheetInteractionNoUserAction = 0,
  BottomSheetInteractionSwipe = 1,
  BottomSheetInteractionResizingHandleTap = 2,
  BottomSheetInteractionDimmingViewTap = 3,
};

enum MSFButtonStyle : NSInteger;
@class UIImage;
@class UIFocusUpdateContext;
@class UIFocusAnimationCoordinator;

/// By default, <code>titleLabel</code>‘s <code>adjustsFontForContentSizeCategory</code> is set to true to automatically update its font when device’s content size category changes
IB_DESIGNABLE
SWIFT_CLASS_NAMED("Button")
@interface MSFButton : UIButton
@property (nonatomic) enum MSFButtonStyle style;
/// The button’s image.
/// For ButtonStyle.primaryFilled and ButtonStyle.primaryOutline, the image must be 24x24.
/// For ButtonStyle.secondaryOutline and ButtonStyle.borderless, the image must be 20x20.
/// For other styles, the image is not displayed.
@property (nonatomic, strong) UIImage * _Nullable image;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (void)didUpdateFocusInContext:(UIFocusUpdateContext * _Nonnull)context withAnimationCoordinator:(UIFocusAnimationCoordinator * _Nonnull)coordinator;
- (void)didMoveToWindow;
- (void)layoutSubviews;
- (CGRect)imageRectForContentRect:(CGRect)contentRect SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithStyle:(enum MSFButtonStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MSFButtonStyle, "ButtonStyle", closed) {
  MSFButtonStylePrimaryFilled = 0,
  MSFButtonStylePrimaryOutline = 1,
  MSFButtonStyleDangerFilled = 2,
  MSFButtonStyleDangerOutline = 3,
  MSFButtonStyleSecondaryOutline = 4,
  MSFButtonStyleTertiaryOutline = 5,
  MSFButtonStyleBorderless = 6,
};


@class NSDate;
@class NSCalendar;

/// Representation of how a calendar can be configured, including what the first day of the week is, and what the range of shown dates are
SWIFT_CLASS_NAMED("CalendarConfiguration")
@interface MSFCalendarConfiguration : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) MSFCalendarConfiguration * _Nonnull default_;)
+ (MSFCalendarConfiguration * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
/// By default, this is Sunday (‘1’)
@property (nonatomic) NSInteger firstWeekday;
/// By default, this is today minus 3 years. If overridden, make sure it’s before (less than) the ‘referenceEndDate’
@property (nonatomic, copy) NSDate * _Nonnull referenceStartDate;
/// By default, this is the default ‘referenceStartDate’ plus 10 years.  If overridden, make sure it’s after (greater than) the ‘referenceStartDate’
@property (nonatomic, copy) NSDate * _Nonnull referenceEndDate;
/// Creates a new CalendarConfiguration instance that holds information about how a calendar should be set up
/// \param calendar Calendar object used to determine the referenceStartDate and referenceEndDate
///
- (nonnull instancetype)initWithCalendar:(NSCalendar * _Nonnull)calendar OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Color style can be app colors, neutral colors, or custom colors. The style affects the background, border, title, subtitle and icon colors
typedef SWIFT_ENUM_NAMED(NSInteger, MSFCardColorStyle, "CardColorStyle", closed) {
  MSFCardColorStyleAppColor = 0,
  MSFCardColorStyleNeutral = 1,
  MSFCardColorStyleCustom = 2,
};

@class MSFCardView;

/// Delegate protocol to handle user interaction with the CardView
SWIFT_PROTOCOL_NAMED("CardDelegate")
@protocol MSFCardDelegate
@optional
/// Called after the Card or the button inside the Card is tapped
/// \param card The Card that was tapped
///
- (void)didTapCard:(MSFCardView * _Nonnull)card;
@end

/// Pre-defined sizes of the Card.
typedef SWIFT_ENUM_NAMED(NSInteger, MSFCardSize, "CardSize", closed) {
  MSFCardSizeSmall = 0,
  MSFCardSizeLarge = 1,
};


/// <code>CardView</code> is a UIView used to display information in a card
/// A card has a title, an optional subtitle, an icon, a size, and a color style
/// Use <code>titleNumberOfLines</code> and <code>subtitleNumberOfLines</code>  to set the number of lines the title and subtitle should have respectively. When the string can not fit in the number of lines set, it will get truncated
/// Use one of the defined color styles for an app color style, or a neutral gray color style
/// When CardColorStyle.custom is used, default colors will be set unless a custom color is provided by setting the properties: <code>customBackgroundColor</code>, <code>customTitleColor</code>, <code>customSubtitleColor</code>, <code>customIconTintColor</code>, and <code>customBorderColor</code>
/// Conform to the <code>CardDelegate</code> in order to provide a handler for the card tap event
SWIFT_CLASS_NAMED("CardView")
@interface MSFCardView : UIView
/// Delegate to handle user interaction with the CardView
@property (nonatomic, weak) id <MSFCardDelegate> _Nullable delegate;
/// All card sizes have a title. Setting <code>primaryText</code> will refresh the layout constraints.
@property (nonatomic, copy) NSString * _Nonnull primaryText;
/// Setting <code>secondaryText</code> is a way to add/remove the subtitle which will also refresh the layout constraints to adjust to the change
@property (nonatomic, copy) NSString * _Nullable secondaryText;
/// The card’s icon.
@property (nonatomic, strong) UIImage * _Nonnull icon;
/// The color style determines the border color, background color, icon tint color, and text color. When using the custom style, set custom properties to override the default color values
@property (nonatomic) enum MSFCardColorStyle colorStyle;
/// Set <code>titleNumberOfLines</code> in order to control how many lines the title has. Setting this property will refresh the layout constrinats to adjust to the change
@property (nonatomic) BOOL twoLineTitle;
/// Set <code>customBackgroundColor</code> in order to set the background color when using the custom color style
@property (nonatomic, strong) UIColor * _Nonnull customBackgroundColor;
/// Set <code>customTitleColor</code> in order to set the title’s text color when using the custom color style
@property (nonatomic, strong) UIColor * _Nonnull customTitleColor;
/// Set <code>customSubtitleColor</code> in order to set the subtitle’s text color when using the custom color style
@property (nonatomic, strong) UIColor * _Nonnull customSubtitleColor;
/// Set <code>customIconTintColor</code> in order to set the icon’s tint color when using the custom color style
@property (nonatomic, strong) UIColor * _Nonnull customIconTintColor;
/// Set <code>customBorderColor</code> in order to set the border’s color when using the custom color style
@property (nonatomic, strong) UIColor * _Nonnull customBorderColor;
/// Set <code>customWidth</code> in order to set the width of the card
@property (nonatomic) CGFloat customWidth;
/// Initializes <code>CardView</code>
/// <ul>
///   <li>
///   </li>
/// </ul>
/// \param size The size of the card
///
/// \param title The title of the card
///
/// \param subtitle The subtitle of the card - optional
///
/// \param icon The icon of the card
///
/// \param colorStyle The Card’s color style; appColor, neutral, or custom
///
- (nonnull instancetype)initWithSize:(enum MSFCardSize)size title:(NSString * _Nonnull)title subtitle:(NSString * _Nullable)subtitle icon:(UIImage * _Nonnull)icon colorStyle:(enum MSFCardColorStyle)colorStyle OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (void)didMoveToWindow;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("CenteredLabelCell")
@interface MSFCenteredLabelCell : UITableViewCell
@property (nonatomic) enum MSFTableViewCellBackgroundStyleType backgroundStyleType;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Set up the cell with text to be displayed in the centered label
/// \param text The text to be displayed
///
- (void)setupWithText:(NSString * _Nonnull)text;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
- (void)didMoveToWindow;
- (void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
@end

@class UIWindow;

/// Protocol through which consumers can provide colors to “theme” their experiences
/// The window in which the color will be shown is sent to allow apps to provide different experiences per each window
SWIFT_PROTOCOL_NAMED("ColorProviding")
@protocol MSFColorProviding
/// Primary branding color. If this protocol is not conformed to, communicationBlue will be used
- (UIColor * _Nullable)primaryColorFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
/// Tint colors. If this protocol is not conformed to, communicationBlueTint* colors will be used
- (UIColor * _Nullable)primaryTint10ColorFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)primaryTint20ColorFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)primaryTint30ColorFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)primaryTint40ColorFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
/// Shade colors. If this protocol is not conformed to, communicationBlueShade* colors will be used
- (UIColor * _Nullable)primaryShade10ColorFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)primaryShade20ColorFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)primaryShade30ColorFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
@end


/// A platform-agnostic representation of a 32-bit RGBA color value.
SWIFT_CLASS_NAMED("ColorValue")
@interface MSFColorValue : NSObject
/// Creates a color value instance with the specified three-channel, 8-bit-per-channel color value, usually in hex.
/// For example: <code>0xFF0000</code> represents red, <code>0x00FF00</code> green, and <code>0x0000FF</code> blue.
/// There is no way to specify an alpha channel via this initializer. For that, use <code>init(r:g:b:a)</code> instead.
/// \param hexValue The color value to store, in 24-bit (three-channel, 8-bit) RGB.
///
///
/// returns:
/// A color object that stores the provided color information.
- (nonnull instancetype)init:(uint32_t)hexValue OBJC_DESIGNATED_INITIALIZER;
/// Creates a color value instance with the specified channel values.
/// Parameters work just like <code>UIColor</code>, <code>NSColor</code>, or <code>SwiftUI.Color</code>, and should all be in the range of <code>0.0 ≤ value ≤ 1.0</code>.
/// Any channel that is above 1.0 will be clipped down to 1.0; results are undefined for negative inputs.
/// \param r The red channel.
///
/// \param g The green channel.
///
/// \param b The blue channel.
///
/// \param a The alpha channel.
///
///
/// returns:
/// A color object that stores the provided color information.
- (nonnull instancetype)initWithR:(CGFloat)r g:(CGFloat)g b:(CGFloat)b a:(CGFloat)a OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum MSFColorPalette : NSInteger;

SWIFT_CLASS_NAMED("Colors")
@interface MSFColors : NSObject
/// Associates a <code>ColorProvider</code> with a given <code>UIWindow</code> instance.
/// \param provider The <code>ColorProvider</code> whose colors should be used for controls in this window.
///
/// \param window The window where these colors should be applied.
///
+ (void)setProviderWithProvider:(id <MSFColorProviding> _Nonnull)provider for:(UIWindow * _Nonnull)window;
/// Removes any associated <code>ColorProvider</code> from the given <code>UIWindow</code> instance.
/// \param window The window that should have its <code>ColorProvider</code> removed.
///
+ (void)removeProviderFor:(UIWindow * _Nonnull)window;
/// Use these funcs to grab a color customized by a ColorProviding object for a specific window.. If no colorProvider exists for the window, falls back to deprecated singleton theme color
+ (UIColor * _Nonnull)primaryFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)primaryTint10For:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)primaryTint20For:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)primaryTint30For:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)primaryTint40For:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)primaryShade10For:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)primaryShade20For:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)primaryShade30For:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
/// Customization of primary colors should happen through the ColorProviding protocol rather than this singleton. Doing so
/// will allow hosts of fluentui controls to simultaneously host different experiences with different themes
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primary SWIFT_DEPRECATED_MSG("", "setProvider(_:forWindow:)");)
+ (UIColor * _Nonnull)primary SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimary:(UIColor * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primaryTint10 SWIFT_DEPRECATED_MSG("", "setProvider(_:forWindow:)");)
+ (UIColor * _Nonnull)primaryTint10 SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimaryTint10:(UIColor * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primaryTint20 SWIFT_DEPRECATED_MSG("", "setProvider(_:forWindow:)");)
+ (UIColor * _Nonnull)primaryTint20 SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimaryTint20:(UIColor * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primaryTint30 SWIFT_DEPRECATED_MSG("", "setProvider(_:forWindow:)");)
+ (UIColor * _Nonnull)primaryTint30 SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimaryTint30:(UIColor * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primaryTint40 SWIFT_DEPRECATED_MSG("", "setProvider(_:forWindow:)");)
+ (UIColor * _Nonnull)primaryTint40 SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimaryTint40:(UIColor * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primaryShade10 SWIFT_DEPRECATED_MSG("", "setProvider(_:forWindow:)");)
+ (UIColor * _Nonnull)primaryShade10 SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimaryShade10:(UIColor * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primaryShade20 SWIFT_DEPRECATED_MSG("", "setProvider(_:forWindow:)");)
+ (UIColor * _Nonnull)primaryShade20 SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimaryShade20:(UIColor * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull primaryShade30 SWIFT_DEPRECATED_MSG("", "setProvider(_:forWindow:)");)
+ (UIColor * _Nonnull)primaryShade30 SWIFT_WARN_UNUSED_RESULT;
+ (void)setPrimaryShade30:(UIColor * _Nonnull)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull foregroundOnPrimary SWIFT_DEPRECATED_MSG("", "textOnAccent");)
+ (UIColor * _Nonnull)foregroundOnPrimary SWIFT_WARN_UNUSED_RESULT;
+ (void)setForegroundOnPrimary:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray950;)
+ (UIColor * _Nonnull)gray950 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray900;)
+ (UIColor * _Nonnull)gray900 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray800;)
+ (UIColor * _Nonnull)gray800 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray700;)
+ (UIColor * _Nonnull)gray700 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray600;)
+ (UIColor * _Nonnull)gray600 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray500;)
+ (UIColor * _Nonnull)gray500 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray400;)
+ (UIColor * _Nonnull)gray400 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray300;)
+ (UIColor * _Nonnull)gray300 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray200;)
+ (UIColor * _Nonnull)gray200 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray100;)
+ (UIColor * _Nonnull)gray100 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray50;)
+ (UIColor * _Nonnull)gray50 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull gray25;)
+ (UIColor * _Nonnull)gray25 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull error;)
+ (UIColor * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull warning;)
+ (UIColor * _Nonnull)warning SWIFT_WARN_UNUSED_RESULT;
/// Used for hyperlinks
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull communicationBlue;)
+ (UIColor * _Nonnull)communicationBlue SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull disabled SWIFT_DEPRECATED_MSG("", "textDisabled");)
+ (UIColor * _Nonnull)disabled SWIFT_WARN_UNUSED_RESULT;
/// text color used for main level in the screen. eg. title in dialog, title in navigationbar with <code>surfacePrimary</code>, etc
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull textDominant;)
+ (UIColor * _Nonnull)textDominant SWIFT_WARN_UNUSED_RESULT;
/// text color used for titles
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull textPrimary;)
+ (UIColor * _Nonnull)textPrimary SWIFT_WARN_UNUSED_RESULT;
+ (void)setTextPrimary:(UIColor * _Nonnull)value;
/// text color used for subtitles
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull textSecondary;)
+ (UIColor * _Nonnull)textSecondary SWIFT_WARN_UNUSED_RESULT;
/// text color used in disabled state
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull textDisabled;)
+ (UIColor * _Nonnull)textDisabled SWIFT_WARN_UNUSED_RESULT;
/// text appears on top of the surface that uses <code>Colors.primary</code> as background color
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull textOnAccent;)
+ (UIColor * _Nonnull)textOnAccent SWIFT_WARN_UNUSED_RESULT;
/// icon used as call-to-actions without a label attached. They need to reach a minimum contrast ratio 4.5:1 to its background
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull iconPrimary;)
+ (UIColor * _Nonnull)iconPrimary SWIFT_WARN_UNUSED_RESULT;
/// icon that are attached to a label and are only used for decorative purposes
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull iconSecondary;)
+ (UIColor * _Nonnull)iconSecondary SWIFT_WARN_UNUSED_RESULT;
/// icon color used in disabled state
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull iconDisabled;)
+ (UIColor * _Nonnull)iconDisabled SWIFT_WARN_UNUSED_RESULT;
/// icon appears on top of surfaces that uses <code>Colors.primary</code> as background color
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull iconOnAccent;)
+ (UIColor * _Nonnull)iconOnAccent SWIFT_WARN_UNUSED_RESULT;
/// In Darkmode, our system use two sets of background colors – called base and elevated – to enhance the perception of depath when one dark interface is layered above another.
/// The dark base colors are darker, making background interface appear to recede, and the elevate colors are lighter, making foreground interfaces appear to advance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIColor * _Nonnull surfacePrimary;)
+ (UIColor * _Nonnull)surfacePrimary SWIFT_WARN_UNUSED_RESULT;
+ (void)setSurfacePrimary:(UIColor * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull surfaceSecondary;)
+ (UIColor * _Nonnull)surfaceSecondary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull surfaceTertiary;)
+ (UIColor * _Nonnull)surfaceTertiary SWIFT_WARN_UNUSED_RESULT;
/// also used for disabled background color
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull surfaceQuaternary;)
+ (UIColor * _Nonnull)surfaceQuaternary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull dividerOnPrimary;)
+ (UIColor * _Nonnull)dividerOnPrimary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull dividerOnSecondary;)
+ (UIColor * _Nonnull)dividerOnSecondary SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull dividerOnTertiary;)
+ (UIColor * _Nonnull)dividerOnTertiary SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)colorFromPalette:(enum MSFColorPalette)palette SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// colors defined in asset catalog
typedef SWIFT_ENUM_NAMED(NSInteger, MSFColorPalette, "Palette", closed) {
  MSFColorPaletteAnchorShade30 = 0,
  MSFColorPaletteAnchorTint40 = 1,
  MSFColorPaletteBeigeShade30 = 2,
  MSFColorPaletteBeigeTint40 = 3,
  MSFColorPaletteBlueShade30 = 4,
  MSFColorPaletteBlueTint40 = 5,
  MSFColorPaletteBrassShade30 = 6,
  MSFColorPaletteBrassTint40 = 7,
  MSFColorPaletteBrownShade30 = 8,
  MSFColorPaletteBrownTint40 = 9,
  MSFColorPaletteCornFlowerShade30 = 10,
  MSFColorPaletteCornFlowerTint40 = 11,
  MSFColorPaletteCranberryShade30 = 12,
  MSFColorPaletteCranberryTint40 = 13,
  MSFColorPaletteDarkGreenShade30 = 14,
  MSFColorPaletteDarkGreenTint40 = 15,
  MSFColorPaletteDarkRedShade30 = 16,
  MSFColorPaletteDarkRedTint40 = 17,
  MSFColorPaletteForestShade30 = 18,
  MSFColorPaletteForestTint40 = 19,
  MSFColorPaletteGoldShade30 = 20,
  MSFColorPaletteGoldTint40 = 21,
  MSFColorPaletteGrapeShade30 = 22,
  MSFColorPaletteGrapeTint40 = 23,
  MSFColorPaletteLavenderShade30 = 24,
  MSFColorPaletteLavenderTint40 = 25,
  MSFColorPaletteLightTealShade30 = 26,
  MSFColorPaletteLightTealTint40 = 27,
  MSFColorPaletteLilacShade30 = 28,
  MSFColorPaletteLilacTint40 = 29,
  MSFColorPaletteMagentaShade30 = 30,
  MSFColorPaletteMagentaTint40 = 31,
  MSFColorPaletteMarigoldShade30 = 32,
  MSFColorPaletteMarigoldTint40 = 33,
  MSFColorPaletteMinkShade30 = 34,
  MSFColorPaletteMinkTint40 = 35,
  MSFColorPaletteNavyShade30 = 36,
  MSFColorPaletteNavyTint40 = 37,
  MSFColorPalettePeachShade30 = 38,
  MSFColorPalettePeachTint40 = 39,
  MSFColorPalettePinkShade30 = 40,
  MSFColorPalettePinkTint40 = 41,
  MSFColorPalettePlatinumShade30 = 42,
  MSFColorPalettePlatinumTint40 = 43,
  MSFColorPalettePlumShade30 = 44,
  MSFColorPalettePlumTint40 = 45,
  MSFColorPalettePumpkinShade30 = 46,
  MSFColorPalettePumpkinTint40 = 47,
  MSFColorPalettePurpleShade30 = 48,
  MSFColorPalettePurpleTint40 = 49,
  MSFColorPaletteRedShade30 = 50,
  MSFColorPaletteRedTint40 = 51,
  MSFColorPaletteRoyalBlueShade30 = 52,
  MSFColorPaletteRoyalBlueTint40 = 53,
  MSFColorPaletteSeafoamShade30 = 54,
  MSFColorPaletteSeafoamTint40 = 55,
  MSFColorPaletteSteelShade30 = 56,
  MSFColorPaletteSteelTint40 = 57,
  MSFColorPaletteTealShade30 = 58,
  MSFColorPaletteTealTint40 = 59,
  MSFColorPalettePinkRed10 = 60,
  MSFColorPaletteRed20 = 61,
  MSFColorPaletteRed10 = 62,
  MSFColorPaletteOrange30 = 63,
  MSFColorPaletteOrange20 = 64,
  MSFColorPaletteOrangeYellow20 = 65,
  MSFColorPaletteGreen20 = 66,
  MSFColorPaletteGreen10 = 67,
  MSFColorPaletteCyan30 = 68,
  MSFColorPaletteCyan20 = 69,
  MSFColorPaletteCyanBlue20 = 70,
  MSFColorPaletteCyanBlue10 = 71,
  MSFColorPaletteBlue10 = 72,
  MSFColorPaletteBlueMagenta30 = 73,
  MSFColorPaletteBlueMagenta20 = 74,
  MSFColorPaletteMagenta20 = 75,
  MSFColorPaletteMagenta10 = 76,
  MSFColorPaletteMagentaPink10 = 77,
  MSFColorPaletteGray40 = 78,
  MSFColorPaletteGray30 = 79,
  MSFColorPaletteGray20 = 80,
  MSFColorPaletteGray25 = 81,
  MSFColorPaletteGray50 = 82,
  MSFColorPaletteGray100 = 83,
  MSFColorPaletteGray200 = 84,
  MSFColorPaletteGray300 = 85,
  MSFColorPaletteGray400 = 86,
  MSFColorPaletteGray500 = 87,
  MSFColorPaletteGray600 = 88,
  MSFColorPaletteGray700 = 89,
  MSFColorPaletteGray800 = 90,
  MSFColorPaletteGray900 = 91,
  MSFColorPaletteGray950 = 92,
  MSFColorPaletteCommunicationBlue = 93,
  MSFColorPaletteCommunicationBlueTint40 = 94,
  MSFColorPaletteCommunicationBlueTint30 = 95,
  MSFColorPaletteCommunicationBlueTint20 = 96,
  MSFColorPaletteCommunicationBlueTint10 = 97,
  MSFColorPaletteCommunicationBlueShade30 = 98,
  MSFColorPaletteCommunicationBlueShade20 = 99,
  MSFColorPaletteCommunicationBlueShade10 = 100,
  MSFColorPaletteDangerPrimary = 101,
  MSFColorPaletteDangerTint40 = 102,
  MSFColorPaletteDangerTint30 = 103,
  MSFColorPaletteDangerTint20 = 104,
  MSFColorPaletteDangerTint10 = 105,
  MSFColorPaletteDangerShade30 = 106,
  MSFColorPaletteDangerShade20 = 107,
  MSFColorPaletteDangerShade10 = 108,
  MSFColorPaletteWarningPrimary = 109,
  MSFColorPaletteWarningTint40 = 110,
  MSFColorPaletteWarningTint30 = 111,
  MSFColorPaletteWarningTint20 = 112,
  MSFColorPaletteWarningTint10 = 113,
  MSFColorPaletteWarningShade30 = 114,
  MSFColorPaletteWarningShade20 = 115,
  MSFColorPaletteWarningShade10 = 116,
  MSFColorPaletteSuccessPrimary = 117,
  MSFColorPaletteSuccessTint40 = 118,
  MSFColorPaletteSuccessTint30 = 119,
  MSFColorPaletteSuccessTint20 = 120,
  MSFColorPaletteSuccessTint10 = 121,
  MSFColorPaletteSuccessShade30 = 122,
  MSFColorPaletteSuccessShade20 = 123,
  MSFColorPaletteSuccessShade10 = 124,
  MSFColorPalettePresenceAvailable = 125,
  MSFColorPalettePresenceAway = 126,
  MSFColorPalettePresenceBlocked = 127,
  MSFColorPalettePresenceBusy = 128,
  MSFColorPalettePresenceDnd = 129,
  MSFColorPalettePresenceOffline = 130,
  MSFColorPalettePresenceOof = 131,
  MSFColorPalettePresenceUnknown = 132,
};












@interface MSFColors (SWIFT_EXTENSION(FluentUI))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull drawerBackground;)
+ (UIColor * _Nonnull)drawerBackground SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull popoverBackground;)
+ (UIColor * _Nonnull)popoverBackground SWIFT_WARN_UNUSED_RESULT;
@end


@interface MSFColors (SWIFT_EXTENSION(FluentUI))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull navigationBarBackground;)
+ (UIColor * _Nonnull)navigationBarBackground SWIFT_WARN_UNUSED_RESULT;
@end


@interface MSFColors (SWIFT_EXTENSION(FluentUI))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull tableBackground;)
+ (UIColor * _Nonnull)tableBackground SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull tableBackgroundGrouped;)
+ (UIColor * _Nonnull)tableBackgroundGrouped SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull tableCellBackground;)
+ (UIColor * _Nonnull)tableCellBackground SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull tableCellBackgroundGrouped;)
+ (UIColor * _Nonnull)tableCellBackgroundGrouped SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull tableCellBackgroundSelected;)
+ (UIColor * _Nonnull)tableCellBackgroundSelected SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull tableCellImage;)
+ (UIColor * _Nonnull)tableCellImage SWIFT_WARN_UNUSED_RESULT;
@end

@class MSFCommandBarItem;

/// <code>CommandBar</code> is a horizontal scrollable list of icon buttons divided by groups.
/// Set the <code>delegate</code> property to receive callbacks when scroll events occur.
/// Provide <code>itemGroups</code> in <code>init</code> to set the buttons in the scrollable area. Optional <code>leadingItemGroups</code> and <code>trailingItemGroups</code> add buttons in leading and trailing positions. Each <code>CommandBarItem</code> will be represented as a button.
SWIFT_CLASS_NAMED("CommandBar")
@interface MSFCommandBar : UIView
- (nonnull instancetype)initWithItemGroups:(NSArray<NSArray<MSFCommandBarItem *> *> * _Nonnull)itemGroups leadingItem:(MSFCommandBarItem * _Nullable)leadingItem trailingItem:(MSFCommandBarItem * _Nullable)trailingItem;
- (nonnull instancetype)initWithItemGroups:(NSArray<NSArray<MSFCommandBarItem *> *> * _Nonnull)itemGroups leadingItemGroups:(NSArray<NSArray<MSFCommandBarItem *> *> * _Nullable)leadingItemGroups trailingItemGroups:(NSArray<NSArray<MSFCommandBarItem *> *> * _Nullable)trailingItemGroups OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// Apply <code>isEnabled</code> and <code>isSelected</code> state from <code>CommandBarItem</code> to the buttons
- (void)updateButtonsState;
/// Sets the scoll position  to the start of the scroll view
- (void)resetScrollPosition:(BOOL)animated;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface MSFCommandBar (SWIFT_EXTENSION(FluentUI)) <UIScrollViewDelegate>
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end

@class UIFont;
@class UIMenu;

SWIFT_CLASS_NAMED("CommandBarItem")
@interface MSFCommandBarItem : NSObject
- (nonnull instancetype)initWithIconImage:(UIImage * _Nullable)iconImage title:(NSString * _Nullable)title titleFont:(UIFont * _Nullable)titleFont isEnabled:(BOOL)isEnabled isSelected:(BOOL)isSelected itemTappedHandler:(void (^ _Nonnull)(UIView * _Nonnull, MSFCommandBarItem * _Nonnull))itemTappedHandler accessibilityLabel:(NSString * _Nullable)accessibilityLabel accessibilityHint:(NSString * _Nullable)accessibilityHint OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIconImage:(UIImage * _Nullable)iconImage title:(NSString * _Nullable)title titleFont:(UIFont * _Nullable)titleFont isEnabled:(BOOL)isEnabled isSelected:(BOOL)isSelected itemTappedHandler:(void (^ _Nonnull)(UIView * _Nonnull, MSFCommandBarItem * _Nonnull))itemTappedHandler menu:(UIMenu * _Nonnull)menu showsMenuAsPrimaryAction:(BOOL)showsMenuAsPrimaryAction accessibilityLabel:(NSString * _Nullable)accessibilityLabel accessibilityHint:(NSString * _Nullable)accessibilityHint OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) UIImage * _Nullable iconImage;
/// Image displayed behind the <code>iconImage</code> to provide fill or accent if desired. Image is always displayed with <code>UIImage.RenderingMode.alwaysTemplate</code>.
/// Set <code>accentImageTintColor</code> to apply desired tint color to image.
@property (nonatomic, strong) UIImage * _Nullable accentImage;
/// Tint color applied to <code>accentImage</code>.
@property (nonatomic, strong) UIColor * _Nullable accentImageTintColor;
/// Title for the item. Only valid when <code>iconImage</code> is <code>nil</code>.
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, strong) UIFont * _Nullable titleFont;
@property (nonatomic) BOOL isEnabled;
@property (nonatomic) BOOL isHidden;
/// If <code>isPersistSelection</code> is <code>true</code>, this value would be changed to reflect the selection state of the button. Setting this value before providing to <code>CommandBar</code> would set the initial selection state.
@property (nonatomic) BOOL isSelected;
/// A string that uniquely identifies the element, typically for automation purposes
@property (nonatomic, copy) NSString * _Nullable accessibilityIdentifier;
@property (nonatomic, copy) NSString * _Nullable accessibilityValue;
/// Set <code>isSelected</code> to desired value in this handler. Default implementation is toggling <code>isSelected</code> property.
@property (nonatomic, copy) void (^ _Nonnull itemTappedHandler)(UIView * _Nonnull, MSFCommandBarItem * _Nonnull);
/// If set, the <code>UIView</code> returned from the closure will be shown inside <code>CommandBarButton</code> instead of the <code>title</code> and <code>image</code>. Setting this
/// property will disable the <code>itemTappedHandler</code>. The customControlView must manually handle gesutres.
@property (nonatomic, copy) UIView * _Nonnull (^ _Nullable customControlView)(void);
@property (nonatomic, strong) UIMenu * _Nullable menu;
@property (nonatomic) BOOL showsMenuAsPrimaryAction;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object representing a command.
/// <code>CommandingItem</code> defines the high level properties and behavior of a command. Its visual representation is determined by
/// the <code>BottomCommandingController</code>.
SWIFT_CLASS_NAMED("CommandingItem")
@interface MSFCommandingItem : NSObject
/// A closure that’s called when the command is triggered
@property (nonatomic, copy) void (^ _Nullable action)(MSFCommandingItem * _Nonnull);
/// The title of the command item.
@property (nonatomic, copy) NSString * _Nullable title;
/// A <code>UIImage</code> to be displayed with the command.
@property (nonatomic, strong) UIImage * _Nullable image;
/// A <code>UIImage</code> used when the command is represented as a button in selected state.
@property (nonatomic, strong) UIImage * _Nullable selectedImage;
/// Used in large content viewer if this command is represented using a view that cannot scale with Dynamic Type.
/// When this is <code>nil</code>, <code>image</code> will be used instead.
@property (nonatomic, strong) UIImage * _Nullable largeImage;
/// Indicates whether the command is currently on.
/// When <code>isToggleable</code> is <code>true</code>, this property is toggled automatically before <code>action</code> is called.
@property (nonatomic) BOOL isOn;
/// Indicates whether the command is enabled.
@property (nonatomic) BOOL isEnabled;
/// Applications can use this to keep track of items.
@property (nonatomic) NSInteger tag;
/// Indicates whether <code>isOn</code> should be toggled automatically before <code>action</code> is called.
@property (nonatomic, readonly) BOOL isToggleable;
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title image:(UIImage * _Nonnull)image action:(void (^ _Nonnull)(MSFCommandingItem * _Nonnull))action isToggleable:(BOOL)isToggleable OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIsToggleable:(BOOL)isToggleable OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A named container of <code>CommandingItem</code> objects.
SWIFT_CLASS_NAMED("CommandingSection")
@interface MSFCommandingSection : NSObject
/// The title of the section.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// An <code>Array</code> of <code>CommandingItem</code> objects.
@property (nonatomic, copy) NSArray<MSFCommandingItem *> * _Nonnull items;
/// Initializes a commanding section.
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title items:(NSArray<MSFCommandingItem *> * _Nonnull)items OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Contains all information necessary to determine desired height of content inside of a container.
SWIFT_CLASS_NAMED("ContentHeightResolutionContext")
@interface MSFContentHeightResolutionContext : NSObject
/// Maximum height of the content.
@property (nonatomic, readonly) CGFloat maximumHeight;
/// Trait collection of the content container.
@property (nonatomic, readonly, strong) UITraitCollection * _Nonnull containerTraitCollection;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Common wrapper for hosting and exposing SwiftUI components to UIKit-based clients.
SWIFT_CLASS("_TtC8FluentUI18ControlHostingView")
@interface ControlHostingView : UIView
/// The intrinsic content size of the wrapped SwiftUI view.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Asks the view to calculate and return the size that best fits the specified size.
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

/// Defines the string format of the date (time not included) of a Date
typedef SWIFT_ENUM_NAMED(NSInteger, MSFDateStringCompactness, "DateStringCompactness", closed) {
  MSFDateStringCompactnessLongDaynameDayMonth = 1,
  MSFDateStringCompactnessLongDaynameDayMonthYear = 2,
  MSFDateStringCompactnessShortDayname = 3,
  MSFDateStringCompactnessShortDaynameShortMonthnameDay = 4,
  MSFDateStringCompactnessShortDaynameShortMonthnameDayFullYear = 5,
  MSFDateStringCompactnessPartialDaynameShortDayMonth = 6,
  MSFDateStringCompactnessLongDaynameDayMonthHoursColumnsMinutes = 7,
  MSFDateStringCompactnessShortDaynameShortMonthnameHoursColumnsMinutes = 8,
  MSFDateStringCompactnessPartialDaynameShortDayMonthHoursColumsMinutes = 9,
  MSFDateStringCompactnessPartialMonthnameDaynameFullYear = 10,
  MSFDateStringCompactnessPartialMonthnameDaynameHoursColumnsMinutes = 11,
  MSFDateStringCompactnessPartialMonthnameDayname = 12,
  MSFDateStringCompactnessLongMonthNameFullYear = 13,
  MSFDateStringCompactnessShortDaynameHoursColumnMinutes = 14,
  MSFDateStringCompactnessShortDayMonth = 15,
  MSFDateStringCompactnessLongDayMonthYearTime = 16,
  MSFDateStringCompactnessShortDaynameDayShortMonthYear = 17,
};

@protocol MSFDateTimePickerDelegate;
enum MSFDateTimePickerMode : NSInteger;
enum MSFDateTimePickerDatePickerType : NSInteger;
enum MSFDateTimePickerDateRangePresentation : NSInteger;
@class MSFDateTimePickerTitles;
@class UIBarButtonItem;

/// Manages the presentation and coordination of different date and time pickers
SWIFT_CLASS_NAMED("DateTimePicker")
@interface MSFDateTimePicker : NSObject
@property (nonatomic, weak) id <MSFDateTimePickerDelegate> _Nullable delegate;
/// Presents a picker or set of pickers from a <code>presentingController</code> depending on the mode selected. Also handles accessibility replacement presentation.
/// The picker has a default range of dates available that works for most scenarios. To change that range, override referenceStartDate and referenceEndDate in the default instance of CalendarConfiguration.
/// \param presentingController The view controller that is presenting these pickers
///
/// \param mode Enum describing which mode of pickers should be presented
///
/// \param startDate The initial date selected on the presented pickers
///
/// \param endDate An optional end date to pick a range of dates. Ignored if mode is <code>.date</code> or <code>.dateTime</code>. If the mode selected is either <code>.dateRange</code> or <code>.dateTimeRange</code>, and this is omitted, it will be set to a default 1 day or 1 hour range, respectively.
///
/// \param datePickerType The type of UI to use for picking dates: calendar or spinners representing date components (day, month, and year) or date (when time picking is also enabled). <code>.components</code> will be forced when VoiceOver is running. <code>.paged</code> date range presentation is not supported for <code>.components</code> date picker type (tabbed presentation will be used instead).
///
/// \param dateRangePresentation The <code>DateRangePresentation</code> in which to show any date pickers when <code>mode</code> is <code>.dateRange</code> or <code>.dateTimeRange</code>. Does not affect the time picker, which is always tabbed in range mode, but may change whether the date picker is presented in certain modes.
///
/// \param titles A <code>Titles</code> object that holds strings for use in overriding the default picker titles, subtitles, and tab titles. If a string is provided for a property that does not apply to the current mode, it will be ignored.
///
- (void)presentFrom:(UIViewController * _Nonnull)presentingController with:(enum MSFDateTimePickerMode)mode startDate:(NSDate * _Nonnull)startDate endDate:(NSDate * _Nullable)endDate datePickerType:(enum MSFDateTimePickerDatePickerType)datePickerType dateRangePresentation:(enum MSFDateTimePickerDateRangePresentation)dateRangePresentation titles:(MSFDateTimePickerTitles * _Nullable)titles;
/// Presents a picker or set of pickers from a <code>presentingController</code> depending on the mode selected. Also handles accessibility replacement presentation.
/// The picker has a default range of dates available that works for most scenarios. To change that range, override referenceStartDate and referenceEndDate in the default instance of CalendarConfiguration.
/// \param presentingController The view controller that is presenting these pickers
///
/// \param mode Enum describing which mode of pickers should be presented
///
/// \param startDate The initial date selected on the presented pickers
///
/// \param endDate An optional end date to pick a range of dates. Ignored if mode is <code>.date</code> or <code>.dateTime</code>. If the mode selected is either <code>.dateRange</code> or <code>.dateTimeRange</code>, and this is omitted, it will be set to a default 1 day or 1 hour range, respectively.
///
/// \param calendarConfiguration An optional configuration to modify what the first weekday is, and/or what the starting reference date is, and/or what the end reference date is
///
/// \param datePickerType The type of UI to use for picking dates: calendar or spinners representing date components (day, month, and year) or date (when time picking is also enabled). <code>.components</code> will be forced when VoiceOver is running. <code>.paged</code> date range presentation is not supported for <code>.components</code> date picker type (tabbed presentation will be used instead).
///
/// \param dateRangePresentation The <code>DateRangePresentation</code> in which to show any date pickers when <code>mode</code> is <code>.dateRange</code> or <code>.dateTimeRange</code>. Does not affect the time picker, which is always tabbed in range mode, but may change whether the date picker is presented in certain modes.
///
/// \param titles A <code>Titles</code> object that holds strings for use in overriding the default picker titles, subtitles, and tab titles. If a string is provided for a property that does not apply to the current mode, it will be ignored.
///
- (void)presentFrom:(UIViewController * _Nonnull)presentingController with:(enum MSFDateTimePickerMode)mode startDate:(NSDate * _Nonnull)startDate endDate:(NSDate * _Nullable)endDate calendarConfiguration:(MSFCalendarConfiguration * _Nullable)calendarConfiguration datePickerType:(enum MSFDateTimePickerDatePickerType)datePickerType dateRangePresentation:(enum MSFDateTimePickerDateRangePresentation)dateRangePresentation titles:(MSFDateTimePickerTitles * _Nullable)titles;
/// Presents a picker or set of pickers from a <code>presentingController</code> depending on the mode selected. Also handles accessibility replacement presentation.
/// The picker has a default range of dates available that works for most scenarios. To change that range, override referenceStartDate and referenceEndDate in the default instance of CalendarConfiguration.
/// \param presentingController The view controller that is presenting these pickers
///
/// \param mode Enum describing which mode of pickers should be presented
///
/// \param startDate The initial date selected on the presented pickers
///
/// \param endDate An optional end date to pick a range of dates. Ignored if mode is <code>.date</code> or <code>.dateTime</code>. If the mode selected is either <code>.dateRange</code> or <code>.dateTimeRange</code>, and this is omitted, it will be set to a default 1 day or 1 hour range, respectively.
///
/// \param datePickerType The type of UI to use for picking dates: calendar or spinners representing date components (day, month, and year) or date (when time picking is also enabled). <code>.components</code> will be forced when VoiceOver is running. <code>.paged</code> date range presentation is not supported for <code>.components</code> date picker type (tabbed presentation will be used instead).
///
/// \param dateRangePresentation The <code>DateRangePresentation</code> in which to show any date pickers when <code>mode</code> is <code>.dateRange</code> or <code>.dateTimeRange</code>. Does not affect the time picker, which is always tabbed in range mode, but may change whether the date picker is presented in certain modes.
///
/// \param titles A <code>Titles</code> object that holds strings for use in overriding the default picker titles, subtitles, and tab titles. If a string is provided for a property that does not apply to the current mode, it will be ignored.
///
/// \param leftBarButtonItem optional UIBarButtonItem to be presented as left bar-button.
///
/// \param rightBarButtonItem optional UIBarButtonItem to be presented as right bar-button. Note that if this view is presented, the Confirm button is not generated automatically.
///
- (void)presentFrom:(UIViewController * _Nonnull)presentingController with:(enum MSFDateTimePickerMode)mode startDate:(NSDate * _Nonnull)startDate endDate:(NSDate * _Nullable)endDate datePickerType:(enum MSFDateTimePickerDatePickerType)datePickerType dateRangePresentation:(enum MSFDateTimePickerDateRangePresentation)dateRangePresentation titles:(MSFDateTimePickerTitles * _Nullable)titles leftBarButtonItem:(UIBarButtonItem * _Nullable)leftBarButtonItem rightBarButtonItem:(UIBarButtonItem * _Nullable)rightBarButtonItem;
/// Presents a picker or set of pickers from a <code>presentingController</code> depending on the mode selected. Also handles accessibility replacement presentation.
/// The picker has a default range of dates available that works for most scenarios. To change that range, override referenceStartDate and referenceEndDate in the default instance of CalendarConfiguration.
/// \param presentingController The view controller that is presenting these pickers
///
/// \param mode Enum describing which mode of pickers should be presented
///
/// \param startDate The initial date selected on the presented pickers
///
/// \param endDate An optional end date to pick a range of dates. Ignored if mode is <code>.date</code> or <code>.dateTime</code>. If the mode selected is either <code>.dateRange</code> or <code>.dateTimeRange</code>, and this is omitted, it will be set to a default 1 day or 1 hour range, respectively.
///
/// \param calendarConfiguration An optional configuration to modify what the first weekday is, and/or what the starting reference date is, and/or what the end reference date is
///
/// \param datePickerType The type of UI to use for picking dates: calendar or spinners representing date components (day, month, and year) or date (when time picking is also enabled). <code>.components</code> will be forced when VoiceOver is running. <code>.paged</code> date range presentation is not supported for <code>.components</code> date picker type (tabbed presentation will be used instead).
///
/// \param dateRangePresentation The <code>DateRangePresentation</code> in which to show any date pickers when <code>mode</code> is <code>.dateRange</code> or <code>.dateTimeRange</code>. Does not affect the time picker, which is always tabbed in range mode, but may change whether the date picker is presented in certain modes.
///
/// \param titles A <code>Titles</code> object that holds strings for use in overriding the default picker titles, subtitles, and tab titles. If a string is provided for a property that does not apply to the current mode, it will be ignored.
///
/// \param leftBarButtonItem optional UIBarButtonItem to be presented as left bar-button.
///
/// \param rightBarButtonItem optional UIBarButtonItem to be presented as right bar-button. Note that if this view is presented, the Confirm button is not generated automatically.
///
- (void)presentFrom:(UIViewController * _Nonnull)presentingController with:(enum MSFDateTimePickerMode)mode startDate:(NSDate * _Nonnull)startDate endDate:(NSDate * _Nullable)endDate calendarConfiguration:(MSFCalendarConfiguration * _Nullable)calendarConfiguration datePickerType:(enum MSFDateTimePickerDatePickerType)datePickerType dateRangePresentation:(enum MSFDateTimePickerDateRangePresentation)dateRangePresentation titles:(MSFDateTimePickerTitles * _Nullable)titles leftBarButtonItem:(UIBarButtonItem * _Nullable)leftBarButtonItem rightBarButtonItem:(UIBarButtonItem * _Nullable)rightBarButtonItem;
- (void)dismiss;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MSFDateTimePickerDatePickerType, "DatePickerType", closed) {
/// Date picker is represented as a calendar with 7 columns to show days of week and each row showing one week of dates.
  MSFDateTimePickerDatePickerTypeCalendar = 0,
/// Date picker is represented by a set of “spinners” each allowing to modify one component of a date: day, month, or year. Only one spinner for the entire date is shown when time picking is also allowed.
  MSFDateTimePickerDatePickerTypeComponents = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFDateTimePickerDateRangePresentation, "DateRangePresentation", closed) {
  MSFDateTimePickerDateRangePresentationPaged = 0,
  MSFDateTimePickerDateRangePresentationTabbed = 1,
};


SWIFT_CLASS_NAMED("Titles")
@interface MSFDateTimePickerTitles : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_PROTOCOL_NAMED("DateTimePickerDelegate")
@protocol MSFDateTimePickerDelegate
/// Allows a class to be notified when a user confirms their selected date
- (void)dateTimePicker:(MSFDateTimePicker * _Nonnull)dateTimePicker didPickStartDate:(NSDate * _Nonnull)startDate endDate:(NSDate * _Nonnull)endDate;
@optional
/// Allows for some validation and cancellation of picking behavior, including the dismissal of DateTimePicker classes when Done is pressed. If false is returned, the dismissal and <code>didPickStartDate</code> delegate calls will not occur. This is not called when dismissing the modal without selection, such as when tapping outside to dismiss.
- (BOOL)dateTimePicker:(MSFDateTimePicker * _Nonnull)dateTimePicker shouldEndPickingStartDate:(NSDate * _Nonnull)startDate endDate:(NSDate * _Nonnull)endDate SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MSFDateTimePickerMode, "DateTimePickerMode", closed) {
  MSFDateTimePickerModeDate = 0,
  MSFDateTimePickerModeDateTime = 1,
  MSFDateTimePickerModeDateRange = 2,
  MSFDateTimePickerModeDateTimeRange = 3,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFDayOfWeek, "DayOfWeek", closed) {
  MSFDayOfWeekSunday = 0,
  MSFDayOfWeekMonday = 1,
  MSFDayOfWeekTuesday = 2,
  MSFDayOfWeekWednesday = 3,
  MSFDayOfWeekThursday = 4,
  MSFDayOfWeekFriday = 5,
  MSFDayOfWeekSaturday = 6,
};

enum MSFDimmingViewType : NSInteger;

SWIFT_CLASS_NAMED("DimmingView")
@interface MSFDimmingView : UIView
- (nonnull instancetype)initWithType:(enum MSFDimmingViewType)type OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


typedef SWIFT_ENUM_NAMED(NSInteger, MSFDimmingViewType, "DimmingViewType", closed) {
  MSFDimmingViewTypeWhite = 1,
  MSFDimmingViewTypeBlack = 2,
  MSFDimmingViewTypeNone = 3,
};


SWIFT_CLASS_NAMED("DotView")
@interface MSFDotView : UIView
@property (nonatomic, strong) UIColor * _Nullable color;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
@end

enum MSFDrawerPresentationStyle : NSInteger;
enum MSFDrawerPresentationBackground : NSInteger;
@class UIPanGestureRecognizer;
enum MSFDrawerResizingBehavior : NSInteger;
@protocol MSFDrawerControllerDelegate;
enum MSFDrawerPresentationDirection : NSInteger;
@protocol UIContentContainer;

/// <code>DrawerController</code> is used to present a portion of UI in a slider frame that shows from a side on iPhone/iPad and in a popover on iPad.
/// Use <code>presentationDirection</code> to pick the direction of presentation and <code>presentationOrigin</code> to specify the offset (in screen coordinates) from which to show drawer. If not provided it will be calculated automatically: bottom of navigation bar for <code>.down</code> presentation and edge of the screen for other presentations.
/// <code>DrawerController</code> will be presented as a popover on iPad (for vertical presentation) and so requires either <code>sourceView</code>/<code>sourceRect</code> or <code>barButtonItem</code> to be provided via available initializers. Use <code>permittedArrowDirections</code> to specify the direction of the popover arrow.
/// Set either <code>contentController</code> or <code>contentView</code> to provide content for the drawer. Desired content size can be specified by using either drawer’s or content controller’s <code>preferredContentSize</code>. If the size is not specified by these means, it will be auto-calculated from the fitting size of the content view.
/// Use <code>resizingBehavior</code> to allow a user to resize or dismiss the drawer by tapping and dragging any area that does not handle this gesture itself.
SWIFT_CLASS_NAMED("DrawerController")
@interface MSFDrawerController : UIViewController
/// Set <code>backgroundColor</code> to customize background color of the drawer
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// Set <code>contentController</code> to provide a controller that will represent drawer’s content. Its view will be hosted in the root view of the drawer and will be sized and positioned to accommodate any shell UI of the drawer.
/// Content controller can provide <code>preferredContentSize</code> which will be used as a content size to calculate the size of the drawer on screen.
@property (nonatomic, strong) UIViewController * _Nullable contentController;
/// Set <code>contentView</code> to provide a view that will represent drawer’s content. It will be hosted in the root view of the drawer and will be sized and positioned to accommodate any shell UI of the drawer.
/// If you want to specify the size of the content inside the drawer then you can do this through drawer’s <code>preferredContentSize</code> which will be used to calculate the size of the drawer on screen. Otherwise the fitting size of the content view will be used.
@property (nonatomic, strong) UIView * _Nullable contentView;
/// Set <code>contentScrollView</code> to allow drawer to resize as the result of scrolling in this view (scrolling will be blocked until drawer cannot resize anymore).
@property (nonatomic, strong) UIScrollView * _Nullable contentScrollView;
/// When <code>presentationStyle</code> is <code>.automatic</code> (the default value) drawer is presented as a slideover in horizontally compact environments and as a popover otherwise. For horizontal presentation a slideover is always used. Set this property to a specific presentation style to enforce it in all environments.
@property (nonatomic) enum MSFDrawerPresentationStyle presentationStyle;
/// Use <code>presentationOffset</code> to offset drawer from the presentation base in the direction of presentation. Only supported in horizontally regular environments for vertical presentation.
@property (nonatomic) CGFloat presentationOffset;
@property (nonatomic) enum MSFDrawerPresentationBackground presentationBackground;
/// Use <code>passThroughView</code> to make underlying view interactable. This view can be set from presenting view controller to recieve all the touch events from drawer’s presentation background.
@property (nonatomic, weak) UIView * _Nullable passThroughView SWIFT_DEPRECATED_MSG("Use BottomSheetController for better accessibility support");
/// Set <code>presentingGesture</code> before calling <code>present</code> to provide a gesture recognizer that resulted in the presentation of the drawer and to allow this presentation to be interactive.
/// Only supported for a horizontal presentation direction.
@property (nonatomic, strong) UIPanGestureRecognizer * _Nullable presentingGesture;
/// When <code>resizingBehavior</code> is not <code>.none</code> a user can resize the drawer by tapping and dragging any area that does not handle this gesture itself. For example, if <code>contentController</code> constains a <code>UINavigationController</code>, a user can tap and drag navigation bar to resize the drawer.
/// By resizing a drawer a user can switch between several predefined states:
/// <ul>
///   <li>
///     a drawer can be expanded (see <code>isExpanded</code> property, only for vertical presentation);
///   </li>
///   <li>
///     returned to normal state from expanded state;
///   </li>
///   <li>
///     or dismissed.
///   </li>
/// </ul>
/// When <code>resizingBehavior</code> is <code>.dismiss</code> the expanding behavior is not available - drawer can only be dismissed.
/// The corresponding <code>delegate</code> methods will be called for these state changes: see <code>drawerControllerDidChangeExpandedState</code> and <code>drawerControllerWillDismiss</code>/<code>drawerControllerDidDismiss</code>.
/// Resizing is supported only when drawer is presented as a slideover. <code>.dismissOrExpand</code> is not supported for horizontal presentation.
@property (nonatomic) enum MSFDrawerResizingBehavior resizingBehavior;
/// Set <code>resizingHandleViewBackgroundColor</code> to customize background color of resizingHandleView if it is shown
@property (nonatomic, strong) UIColor * _Nonnull resizingHandleViewBackgroundColor;
/// Set <code>isExpanded</code> to <code>true</code> to maximize the drawer’s height to fill the device screen vertically minus the safe areas. Set to <code>false</code> to restore it to the normal size.
/// Not supported for horizontal presentation. Transition is always animated when drawer is visible.
@property (nonatomic) BOOL isExpanded;
/// Set <code>adjustsHeightForKeyboard</code> to <code>true</code> to allow drawer to adjust its height when keyboard is shown or hidden, so that drawer’s content is always visible.
/// Supported only when drawer is presented as a slideover with the <code>.up</code> presentation direction.
@property (nonatomic) BOOL adjustsHeightForKeyboard;
/// Use <code>permittedArrowDirections</code> to specify the direction of the popover arrow for popover presentation on iPad.
@property (nonatomic) UIPopoverArrowDirection permittedArrowDirections;
@property (nonatomic) CGSize preferredContentSize;
/// For <code>vertical</code> presentation shown when horizontal size is <code>.compact</code>, the content width will be the full width of the presenting window. If set to false, the <code>preferredContentSize.width</code> will be used for calculation in landscape mode.
@property (nonatomic) BOOL shouldUseWindowFullWidthInLandscape;
/// Limits the full window width to its safe area for <code>vertical</code> presentation.
@property (nonatomic) BOOL shouldRespectSafeAreaForWindowFullWidth;
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
/// <code>onDismiss</code> is called when drawer is being dismissed.
@property (nonatomic, copy) void (^ _Nullable onDismiss)(void);
/// <code>onDismissCompleted</code> is called after drawer has been dismissed.
@property (nonatomic, copy) void (^ _Nullable onDismissCompleted)(void);
@property (nonatomic, weak) id <MSFDrawerControllerDelegate> _Nullable delegate;
/// Initializes <code>DrawerController</code> to be presented as a popover from <code>sourceRect</code> in <code>sourceView</code> on iPad and as a slideover on iPhone/iPad.
/// \param sourceView The view containing the anchor rectangle for the popover.
///
/// \param sourceRect The rectangle in the specified view in which to anchor the popover.
///
/// \param presentationOrigin The offset (in screen coordinates) from which to show a slideover. If not provided it will be calculated automatically: bottom of navigation bar for <code>.down</code> presentation and edge of the screen for other presentations.
///
/// \param presentationDirection The direction of slideover presentation.
///
/// \param preferredMaximumHeight The maximum height to which the drawer is preferred to expand
///
- (nonnull instancetype)initWithSourceView:(UIView * _Nonnull)sourceView sourceRect:(CGRect)sourceRect presentationOrigin:(CGFloat)presentationOrigin presentationDirection:(enum MSFDrawerPresentationDirection)presentationDirection preferredMaximumHeight:(CGFloat)preferredMaximumHeight OBJC_DESIGNATED_INITIALIZER;
/// Initializes <code>DrawerController</code> to be presented as a popover from <code>barButtonItem</code> on iPad and as a slideover on iPhone/iPad.
/// \param barButtonItem The bar button item on which to anchor the popover.
///
/// \param presentationOrigin The offset (in screen coordinates) from which to show a slideover. If not provided it will be calculated automatically: bottom of navigation bar for <code>.down</code> presentation and edge of the screen for other presentations.
///
/// \param presentationDirection The direction of slideover presentation.
///
- (nonnull instancetype)initWithBarButtonItem:(UIBarButtonItem * _Nonnull)barButtonItem presentationOrigin:(CGFloat)presentationOrigin presentationDirection:(enum MSFDrawerPresentationDirection)presentationDirection preferredMaximumHeight:(CGFloat)preferredMaximumHeight OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)willTransitionToTraitCollection:(UITraitCollection * _Nonnull)newCollection withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)preferredContentSizeDidChangeForChildContentContainer:(id <UIContentContainer> _Nonnull)container;
- (BOOL)accessibilityPerformEscape SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface MSFDrawerController (SWIFT_EXTENSION(FluentUI)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end



@interface MSFDrawerController (SWIFT_EXTENSION(FluentUI)) <UIPopoverPresentationControllerDelegate>
- (UIModalPresentationStyle)adaptivePresentationStyleForPresentationController:(UIPresentationController * _Nonnull)controller traitCollection:(UITraitCollection * _Nonnull)traitCollection SWIFT_WARN_UNUSED_RESULT;
- (BOOL)presentationControllerShouldDismiss:(UIPresentationController * _Nonnull)presentationController SWIFT_WARN_UNUSED_RESULT;
@end

@protocol UIViewControllerAnimatedTransitioning;
@protocol UIViewControllerInteractiveTransitioning;

@interface MSFDrawerController (SWIFT_EXTENSION(FluentUI)) <UIViewControllerTransitioningDelegate>
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerInteractiveTransitioning> _Nullable)interactionControllerForPresentation:(id <UIViewControllerAnimatedTransitioning> _Nonnull)animator SWIFT_WARN_UNUSED_RESULT;
- (UIPresentationController * _Nullable)presentationControllerForPresentedViewController:(UIViewController * _Nonnull)presented presentingViewController:(UIViewController * _Nullable)presenting sourceViewController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL_NAMED("DrawerControllerDelegate")
@protocol MSFDrawerControllerDelegate
@optional
/// Called when a user resizes the drawer enough to change its expanded state. Use <code>isExpanded</code> property to get the current state.
/// Use this method to turn on/off specific UI features of your drawer’s content that depend on expanded state. Method is called after expanded state has been changed but before animation is completed.
- (void)drawerControllerDidChangeExpandedState:(MSFDrawerController * _Nonnull)controller;
/// Called when drawer is being dismissed.
- (void)drawerControllerWillDismiss:(MSFDrawerController * _Nonnull)controller;
/// Called after drawer has been dismissed.
- (void)drawerControllerDidDismiss:(MSFDrawerController * _Nonnull)controller;
/// Called when drawer is getting dismissed when user tries to dismiss drawer by tapping in background, using resizing handle or dragging drawer to bottom. Use this method to prevent the drawer from being dismissed in these scenarios.
- (BOOL)drawerControllerShouldDismissDrawer:(MSFDrawerController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MSFDrawerPresentationBackground, "DrawerPresentationBackground", closed) {
/// Clear background
  MSFDrawerPresentationBackgroundNone = 0,
/// Black semi-transparent background
  MSFDrawerPresentationBackgroundBlack = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFDrawerPresentationDirection, "DrawerPresentationDirection", closed) {
/// Drawer animated down from a top base
  MSFDrawerPresentationDirectionDown = 0,
/// Drawer animated up from a bottom base
  MSFDrawerPresentationDirectionUp = 1,
/// Drawer animated right from a left base (flipped for RTL)
  MSFDrawerPresentationDirectionFromLeading = 2,
/// Drawer animated left from a right base (flipped for RTL)
  MSFDrawerPresentationDirectionFromTrailing = 3,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFDrawerPresentationStyle, "DrawerPresentationStyle", closed) {
/// Always <code>.slideover</code> for horizontal presentation. For vertical presentation results in <code>.slideover</code> in horizontally compact environments, <code>.popover</code> otherwise.
  MSFDrawerPresentationStyleAutomatic = -1,
  MSFDrawerPresentationStyleSlideover = 0,
  MSFDrawerPresentationStylePopover = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFDrawerResizingBehavior, "DrawerResizingBehavior", closed) {
  MSFDrawerResizingBehaviorNone = 0,
  MSFDrawerResizingBehaviorDismiss = 1,
  MSFDrawerResizingBehaviorExpand = 2,
  MSFDrawerResizingBehaviorDismissOrExpand = 3,
};


SWIFT_CLASS_NAMED("EasyTapButton")
@interface MSFEasyTapButton : UIButton
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// Defines the timing for the call of the onSelected closure/block
typedef SWIFT_ENUM_NAMED(NSInteger, MSFPopupMenuItemExecutionMode, "ExecutionMode", closed) {
/// <code>onSelected</code> is called right after item is tapped, before popup menu dismissal
  MSFPopupMenuItemExecutionModeOnSelection = 0,
/// <code>onSelected</code> is called right after item is tapped, but prevent popup menu dismissal
  MSFPopupMenuItemExecutionModeOnSelectionWithoutDismissal = 1,
/// <code>onSelected</code> is called after popup menu is dismissed, but before its <code>onDismissCompleted</code> is called
  MSFPopupMenuItemExecutionModeAfterPopupMenuDismissal = 2,
/// <code>onSelected</code> is called after popup menu is dismissed and its <code>onDismissCompleted</code> is called
  MSFPopupMenuItemExecutionModeAfterPopupMenuDismissalCompleted = 3,
};


/// Class that represents a file action that will be displayed in the cell accessory view.
SWIFT_CLASS_NAMED("FileAccessoryViewAction")
@interface MSFFileAccessoryViewAction : NSObject
/// Default constructor for a document cell action.
/// \param title the action’s title
///
/// \param image the action’s image
///
/// \param target the action’s target
///
/// \param action the action’s selector
///
/// \param isEnabled true if the action is enabled, false otherwise
///
/// \param canHide false if the action must always be visible, true otherwise
///
/// \param useAppPrimaryColor true if the action’s image should be tinted with the app’s primary color
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title image:(UIImage * _Nonnull)image target:(id _Nullable)target action:(SEL _Nullable)action isEnabled:(BOOL)isEnabled canHide:(BOOL)canHide useAppPrimaryColor:(BOOL)useAppPrimaryColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Base class that allows for customization of global, alias, and control tokens.
SWIFT_CLASS("_TtC8FluentUI11FluentTheme")
@interface FluentTheme : NSObject
/// Initializes and returns a new <code>FluentTheme</code>.
/// Once created, a <code>FluentTheme</code> can have its <code>AliasTokens</code> customized by setting custom values on the
/// <code>aliasTokens</code> property. Control tokens can be customized via <code>register(controlType:tokens:) </code>.
/// See the descriptions of those two for additional information.
///
/// returns:
/// An initialized <code>FluentTheme</code> instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol UIAppearanceContainer;

SWIFT_CLASS("_TtC8FluentUI17FluentUIFramework")
@interface FluentUIFramework : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull resourceBundle;)
+ (NSBundle * _Nonnull)resourceBundle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull colorsBundle;)
+ (NSBundle * _Nonnull)colorsBundle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL usesFluentIcons SWIFT_DEPRECATED_MSG("Non-fluent icons no longer supported. Setting this var no longer has any effect and it will be removed in a future update.");)
+ (BOOL)usesFluentIcons SWIFT_WARN_UNUSED_RESULT;
+ (void)setUsesFluentIcons:(BOOL)value;
+ (void)initializeAppearance SWIFT_DEPRECATED_MSG("", "initializeAppearanceWith:whenContainedInInstancesOf:");
+ (void)initializeAppearanceWith:(UIColor * _Nonnull)primaryColor whenContainedInInstancesOf:(NSArray<Class <UIAppearanceContainer>> * _Nullable)containerTypes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("Fonts")
@interface MSFFonts : NSObject
/// Bold 34pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull largeTitle;)
+ (UIFont * _Nonnull)largeTitle SWIFT_WARN_UNUSED_RESULT;
/// Bold 28 pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull title1;)
+ (UIFont * _Nonnull)title1 SWIFT_WARN_UNUSED_RESULT;
/// Semibold 22pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull title2;)
+ (UIFont * _Nonnull)title2 SWIFT_WARN_UNUSED_RESULT;
/// Semibold 17pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull headline;)
+ (UIFont * _Nonnull)headline SWIFT_WARN_UNUSED_RESULT;
/// Regular 17pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull body;)
+ (UIFont * _Nonnull)body SWIFT_WARN_UNUSED_RESULT;
/// Regular 15pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull subhead;)
+ (UIFont * _Nonnull)subhead SWIFT_WARN_UNUSED_RESULT;
/// Regular 13pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull footnote;)
+ (UIFont * _Nonnull)footnote SWIFT_WARN_UNUSED_RESULT;
/// Medium 15pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull button1;)
+ (UIFont * _Nonnull)button1 SWIFT_WARN_UNUSED_RESULT;
/// Medium 13pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull button2;)
+ (UIFont * _Nonnull)button2 SWIFT_WARN_UNUSED_RESULT;
/// Regular 12pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull caption1;)
+ (UIFont * _Nonnull)caption1 SWIFT_WARN_UNUSED_RESULT;
/// Regular 11pt
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull caption2;)
+ (UIFont * _Nonnull)caption2 SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum MSFNeutralColorsToken : NSInteger;
enum MSFSharedColorSets : NSInteger;
enum MSFSharedColorsTokens : NSInteger;

/// Global Tokens represent a unified set of constants to be used by Fluent UI.
SWIFT_CLASS_NAMED("GlobalTokens")
@interface MSFGlobalTokens : NSObject
+ (MSFColorValue * _Nonnull)neutralColorForToken:(enum MSFNeutralColorsToken)token SWIFT_WARN_UNUSED_RESULT;
+ (MSFColorValue * _Nonnull)sharedColorForColorSet:(enum MSFSharedColorSets)sharedColor token:(enum MSFSharedColorsTokens)token SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MSFNeutralColorsToken, "NeutralColorsToken", closed) {
  MSFNeutralColorsTokenBlack = 0,
  MSFNeutralColorsTokenGrey2 = 1,
  MSFNeutralColorsTokenGrey4 = 2,
  MSFNeutralColorsTokenGrey6 = 3,
  MSFNeutralColorsTokenGrey8 = 4,
  MSFNeutralColorsTokenGrey10 = 5,
  MSFNeutralColorsTokenGrey12 = 6,
  MSFNeutralColorsTokenGrey14 = 7,
  MSFNeutralColorsTokenGrey16 = 8,
  MSFNeutralColorsTokenGrey18 = 9,
  MSFNeutralColorsTokenGrey20 = 10,
  MSFNeutralColorsTokenGrey22 = 11,
  MSFNeutralColorsTokenGrey24 = 12,
  MSFNeutralColorsTokenGrey26 = 13,
  MSFNeutralColorsTokenGrey28 = 14,
  MSFNeutralColorsTokenGrey30 = 15,
  MSFNeutralColorsTokenGrey32 = 16,
  MSFNeutralColorsTokenGrey34 = 17,
  MSFNeutralColorsTokenGrey36 = 18,
  MSFNeutralColorsTokenGrey38 = 19,
  MSFNeutralColorsTokenGrey40 = 20,
  MSFNeutralColorsTokenGrey42 = 21,
  MSFNeutralColorsTokenGrey44 = 22,
  MSFNeutralColorsTokenGrey46 = 23,
  MSFNeutralColorsTokenGrey48 = 24,
  MSFNeutralColorsTokenGrey50 = 25,
  MSFNeutralColorsTokenGrey52 = 26,
  MSFNeutralColorsTokenGrey54 = 27,
  MSFNeutralColorsTokenGrey56 = 28,
  MSFNeutralColorsTokenGrey58 = 29,
  MSFNeutralColorsTokenGrey60 = 30,
  MSFNeutralColorsTokenGrey62 = 31,
  MSFNeutralColorsTokenGrey64 = 32,
  MSFNeutralColorsTokenGrey66 = 33,
  MSFNeutralColorsTokenGrey68 = 34,
  MSFNeutralColorsTokenGrey70 = 35,
  MSFNeutralColorsTokenGrey72 = 36,
  MSFNeutralColorsTokenGrey74 = 37,
  MSFNeutralColorsTokenGrey76 = 38,
  MSFNeutralColorsTokenGrey78 = 39,
  MSFNeutralColorsTokenGrey80 = 40,
  MSFNeutralColorsTokenGrey82 = 41,
  MSFNeutralColorsTokenGrey84 = 42,
  MSFNeutralColorsTokenGrey86 = 43,
  MSFNeutralColorsTokenGrey88 = 44,
  MSFNeutralColorsTokenGrey90 = 45,
  MSFNeutralColorsTokenGrey92 = 46,
  MSFNeutralColorsTokenGrey94 = 47,
  MSFNeutralColorsTokenGrey96 = 48,
  MSFNeutralColorsTokenGrey98 = 49,
  MSFNeutralColorsTokenWhite = 50,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFSharedColorSets, "SharedColorSets", closed) {
  MSFSharedColorSetsDarkRed = 0,
  MSFSharedColorSetsBurgundy = 1,
  MSFSharedColorSetsCranberry = 2,
  MSFSharedColorSetsRed = 3,
  MSFSharedColorSetsDarkOrange = 4,
  MSFSharedColorSetsBronze = 5,
  MSFSharedColorSetsPumpkin = 6,
  MSFSharedColorSetsOrange = 7,
  MSFSharedColorSetsPeach = 8,
  MSFSharedColorSetsMarigold = 9,
  MSFSharedColorSetsYellow = 10,
  MSFSharedColorSetsGold = 11,
  MSFSharedColorSetsBrass = 12,
  MSFSharedColorSetsBrown = 13,
  MSFSharedColorSetsDarkBrown = 14,
  MSFSharedColorSetsLime = 15,
  MSFSharedColorSetsForest = 16,
  MSFSharedColorSetsSeafoam = 17,
  MSFSharedColorSetsLightGreen = 18,
  MSFSharedColorSetsGreen = 19,
  MSFSharedColorSetsDarkGreen = 20,
  MSFSharedColorSetsLightTeal = 21,
  MSFSharedColorSetsTeal = 22,
  MSFSharedColorSetsDarkTeal = 23,
  MSFSharedColorSetsCyan = 24,
  MSFSharedColorSetsSteel = 25,
  MSFSharedColorSetsLightBlue = 26,
  MSFSharedColorSetsBlue = 27,
  MSFSharedColorSetsRoyalBlue = 28,
  MSFSharedColorSetsDarkBlue = 29,
  MSFSharedColorSetsCornflower = 30,
  MSFSharedColorSetsNavy = 31,
  MSFSharedColorSetsLavender = 32,
  MSFSharedColorSetsPurple = 33,
  MSFSharedColorSetsDarkPurple = 34,
  MSFSharedColorSetsOrchid = 35,
  MSFSharedColorSetsGrape = 36,
  MSFSharedColorSetsBerry = 37,
  MSFSharedColorSetsLilac = 38,
  MSFSharedColorSetsPink = 39,
  MSFSharedColorSetsHotPink = 40,
  MSFSharedColorSetsMagenta = 41,
  MSFSharedColorSetsPlum = 42,
  MSFSharedColorSetsBeige = 43,
  MSFSharedColorSetsMink = 44,
  MSFSharedColorSetsSilver = 45,
  MSFSharedColorSetsPlatinum = 46,
  MSFSharedColorSetsAnchor = 47,
  MSFSharedColorSetsCharcoal = 48,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFSharedColorsTokens, "SharedColorsTokens", closed) {
  MSFSharedColorsTokensShade50 = 0,
  MSFSharedColorsTokensShade40 = 1,
  MSFSharedColorsTokensShade30 = 2,
  MSFSharedColorsTokensShade20 = 3,
  MSFSharedColorsTokensShade10 = 4,
  MSFSharedColorsTokensPrimary = 5,
  MSFSharedColorsTokensTint10 = 6,
  MSFSharedColorsTokensTint20 = 7,
  MSFSharedColorsTokensTint30 = 8,
  MSFSharedColorsTokensTint40 = 9,
  MSFSharedColorsTokensTint50 = 10,
  MSFSharedColorsTokensTint60 = 11,
};

@class MSFHUDParams;
@protocol MSFHUDDelegate;

SWIFT_CLASS_NAMED("HUD")
@interface MSFHUD : NSObject
/// Presents a Heads-up display.
/// \param view <code>UIView</code> in which the Heads-up display will be presented.
///
- (void)showIn:(UIView * _Nonnull)view;
/// Presents a Heads-up display.
/// \param view <code>UIView</code> in which the Heads-up display will be presented.
///
/// \param params <code>HUDParams</code> containing the confirguration of the Heads-up display.
///
- (void)showIn:(UIView * _Nonnull)view with:(MSFHUDParams * _Nonnull)params;
/// Presents a Heads-up display.
/// \param view <code>UIView</code> in which the Heads-up display will be presented.
///
/// \param params <code>HUDParams</code> containing the confirguration of the Heads-up display.
///
/// \param onTap Closure or block that will be executed when the user taps on the Heads-up display.
///
- (void)showIn:(UIView * _Nonnull)view with:(MSFHUDParams * _Nonnull)params onTap:(void (^ _Nullable)(void))onTap;
/// Presents a Heads-up display.
/// \param controller <code>UIViewController</code> for the Heads-up display to be presented from.
///
- (void)showFrom:(UIViewController * _Nonnull)controller;
/// Presents a Heads-up display.
/// \param controller <code>UIViewController</code> for the Heads-up display to be presented from.
///
/// \param params <code>HUDParams</code> containing the confirguration of the Heads-up display.
///
- (void)showFrom:(UIViewController * _Nonnull)controller with:(MSFHUDParams * _Nonnull)params;
/// Presents a Heads-up display.
/// \param controller <code>UIViewController</code> for the Heads-up display to be presented from.
///
/// \param params <code>HUDParams</code> containing the confirguration of the Heads-up display.
///
/// \param onTap Closure or block that will be executed when the user taps on the Heads-up display.
///
- (void)showFrom:(UIViewController * _Nonnull)controller with:(MSFHUDParams * _Nonnull)params onTap:(void (^ _Nullable)(void))onTap;
/// Presents a success Heads-up display.
/// \param view <code>UIView</code> in which the Heads-up display will be presented.
///
/// \param caption Value of the caption of the presented Heads-up display.
///
- (void)showSuccessIn:(UIView * _Nonnull)view with:(NSString * _Nonnull)caption;
/// Presents a success Heads-up display.
/// \param controller <code>UIViewController</code> for the Heads-up display to be presented from.
///
/// \param caption Value of the caption of the presented Heads-up display.
///
- (void)showSuccessFrom:(UIViewController * _Nonnull)controller with:(NSString * _Nonnull)caption;
/// Presents a failure Heads-up display.
/// \param view <code>UIView</code> in which the Heads-up display will be presented.
///
/// \param caption Value of the caption of the presented Heads-up display.
///
- (void)showFailureIn:(UIView * _Nonnull)view with:(NSString * _Nonnull)caption;
/// Presents a failure Heads-up display.
/// \param controller <code>UIViewController</code> for the Heads-up display to be presented from.
///
/// \param caption Value of the caption of the presented Heads-up display.
///
- (void)showFailureFrom:(UIViewController * _Nonnull)controller with:(NSString * _Nonnull)caption;
- (void)hideAnimated:(BOOL)animated;
/// Updates the caption of the presented Heads-up display.
/// \param caption Value of the new caption.
///
- (void)updateWith:(NSString * _Nonnull)caption;
/// Shared instance of the <code>HUD</code> class.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MSFHUD * _Nonnull shared;)
+ (MSFHUD * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Optional <code>HUDDelegate</code> instance.
@property (nonatomic, weak) id <MSFHUDDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("HUDDelegate")
@protocol MSFHUDDelegate
- (UIWindow * _Nullable)defaultWindowForHUD:(MSFHUD * _Nonnull)hud SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("HUDParams")
@interface MSFHUDParams : NSObject
@property (nonatomic, copy) NSString * _Nonnull caption;
@property (nonatomic, strong) UIImage * _Nullable image;
@property (nonatomic) BOOL isBlocking;
@property (nonatomic) BOOL isPersistent;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithCaption:(NSString * _Nonnull)caption image:(UIImage * _Nullable)image isPersistent:(BOOL)isPersistent isBlocking:(BOOL)isBlocking;
@end

enum MSFTextColorStyle : NSInteger;
enum MSFTextStyle : NSInteger;

/// By default, <code>adjustsFontForContentSizeCategory</code> is set to true to automatically update its font when device’s content size category changes
SWIFT_CLASS_NAMED("Label")
@interface MSFLabel : UILabel
@property (nonatomic) enum MSFTextColorStyle colorStyle;
@property (nonatomic) enum MSFTextStyle style;
/// The maximum allowed size point for the receiver’s font. This property can be used
/// to restrict the largest size of the label when scaling due to Dynamic Type. The
/// default value is 0, indicating there is no maximum size.
@property (nonatomic) CGFloat maxFontSize;
@property (nonatomic, strong) UIColor * _Null_unspecified textColor;
- (nonnull instancetype)initWithStyle:(enum MSFTextStyle)style colorStyle:(enum MSFTextColorStyle)colorStyle OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)didMoveToWindow;
@property (nonatomic, strong) NSAttributedString * _Nullable attributedText;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Represents a linear gradient as used by FluentUI.
SWIFT_CLASS("_TtC8FluentUI18LinearGradientInfo")
@interface LinearGradientInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum MSFActivityIndicatorSize : NSInteger;
@protocol MSFActivityIndicatorState;

/// UIKit wrapper that exposes the SwiftUI Activity Indicator implementation
SWIFT_CLASS("_TtC8FluentUI20MSFActivityIndicator")
@interface MSFActivityIndicator : ControlHostingView
/// Creates a new MSFActivityIndicator instance.
/// \param size The MSFActivityIndicatorSize value used by the Activity Indicator.
///
- (nonnull instancetype)initWithSize:(enum MSFActivityIndicatorSize)size OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// The object that groups properties that allow control over the Activity Indicator appearance.
@property (nonatomic, readonly, strong) id <MSFActivityIndicatorState> _Nonnull state;
@end

/// Pre-defined sizes of the Activity Indicator.
typedef SWIFT_ENUM(NSInteger, MSFActivityIndicatorSize, closed) {
  MSFActivityIndicatorSizeXSmall = 0,
  MSFActivityIndicatorSizeSmall = 1,
  MSFActivityIndicatorSizeMedium = 2,
  MSFActivityIndicatorSizeLarge = 3,
  MSFActivityIndicatorSizeXLarge = 4,
};


/// Properties available to customize the state of the Activity Indicator state
SWIFT_PROTOCOL("_TtP8FluentUI25MSFActivityIndicatorState_")
@protocol MSFActivityIndicatorState
/// Sets the accessibility label for the Activity Indicator.
@property (nonatomic, copy) NSString * _Nullable accessibilityLabel;
/// Sets the color of the Activity Indicator.
@property (nonatomic, strong) UIColor * _Nullable color;
/// Defines whether the Activity Indicator is animating or stopped.
@property (nonatomic) BOOL isAnimating;
/// Defines whether the Activity Indicator is visible when its animation stops.
@property (nonatomic) BOOL hidesWhenStopped;
/// The MSFActivityIndicatorSize value used by the Activity Indicator.
@property (nonatomic) enum MSFActivityIndicatorSize size;
@end

enum MSFAvatarStyle : NSInteger;
enum MSFAvatarSize : NSInteger;
@protocol MSFAvatarState;

/// UIKit wrapper that exposes the SwiftUI Avatar implementation.
SWIFT_CLASS("_TtC8FluentUI9MSFAvatar")
@interface MSFAvatar : ControlHostingView
/// Creates a new MSFAvatar instance.
/// \param style The MSFAvatarStyle value used by the Avatar.
///
/// \param size The MSFAvatarSize value used by the Avatar.
///
- (nonnull instancetype)initWithStyle:(enum MSFAvatarStyle)style size:(enum MSFAvatarSize)size OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// The object that groups properties that allow control over the Avatar appearance.
@property (nonatomic, readonly, strong) id <MSFAvatarState> _Nonnull state;
@end

enum MSFAvatarGroupStyle : NSInteger;
@protocol MSFAvatarGroupState;

/// UIKit wrapper that exposes the SwiftUI AvatarGroup implementation.
SWIFT_CLASS("_TtC8FluentUI14MSFAvatarGroup")
@interface MSFAvatarGroup : ControlHostingView
/// Creates a new MSFAvatarGroup instance.
/// \param style The MSFAvatarGroupStyle value used by the AvatarGroup.
///
/// \param size The MSFAvatarSize value used by the Avatars that will compose the AvatarGroup.
///
- (nonnull instancetype)initWithStyle:(enum MSFAvatarGroupStyle)style size:(enum MSFAvatarSize)size OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// The object that groups properties that allow control over the AvatarGroup appearance.
@property (nonatomic, readonly, strong) id <MSFAvatarGroupState> _Nonnull state;
@end


/// Properties that can be used to customize the appearance of the Avatar in the AvatarGroup.
SWIFT_PROTOCOL("_TtP8FluentUI25MSFAvatarGroupAvatarState_")
@protocol MSFAvatarGroupAvatarState
/// Sets the accessibility label for the Avatar.
@property (nonatomic, copy) NSString * _Nullable accessibilityLabel;
/// Sets a custom background color for the Avatar.
/// The ring color inherit this color if not set explicitly to a different color.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// The custom foreground color.
/// This property allows customizing the initials text color or the default image tint color.
@property (nonatomic, strong) UIColor * _Nullable foregroundColor;
/// Whether the gap between the ring and the avatar content exists.
@property (nonatomic) BOOL hasRingInnerGap;
/// The image used in the avatar content.
@property (nonatomic, strong) UIImage * _Nullable image;
/// The image used to fill the ring as a custom color.
@property (nonatomic, strong) UIImage * _Nullable imageBasedRingColor;
/// Displays an outer ring for the avatar if set to true.
/// The group style does not support rings.
@property (nonatomic) BOOL isRingVisible;
/// Sets the transparency of the avatar elements (inner and outer ring gaps, presence icon outline).
/// Uses the solid default background color if set to false.
@property (nonatomic) BOOL isTransparent;
/// The primary text of the avatar.
/// Used for computing the initials and background/ring colors.
@property (nonatomic, copy) NSString * _Nullable primaryText;
/// Overrides the default ring color.
@property (nonatomic, strong) UIColor * _Nullable ringColor;
/// The secondary text of the avatar.
/// Used for computing the initials and background/ring colors if primaryText is not set.
@property (nonatomic, copy) NSString * _Nullable secondaryText;
@end


/// Properties that can be used to customize the appearance of the AvatarGroup.
SWIFT_PROTOCOL("_TtP8FluentUI19MSFAvatarGroupState_")
@protocol MSFAvatarGroupState
/// Caps the number of displayed avatars and shows the remaining not displayed in the overflow avatar.
@property (nonatomic) NSInteger maxDisplayedAvatars;
/// Adds to the overflow count in case the calling code did not provide all the avatars, but still wants to convey more
/// items than just the remainder of the avatars that could not be displayed due to the maxDisplayedAvatars property.
@property (nonatomic) NSInteger overflowCount;
/// Style of the AvatarGroup.
@property (nonatomic) enum MSFAvatarGroupStyle style;
/// Size of the AvatarGroup.
@property (nonatomic) enum MSFAvatarSize size;
/// Creates a new Avatar within the AvatarGroup.
- (id <MSFAvatarGroupAvatarState> _Nonnull)createAvatar SWIFT_WARN_UNUSED_RESULT;
/// Creates a new Avatar within the AvatarGroup at a specific index.
- (id <MSFAvatarGroupAvatarState> _Nonnull)createAvatarAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the state object for a specific Avatar so its appearance can be customized.
/// \param index The zero-based index of the Avatar in the AvatarGroup.
///
- (id <MSFAvatarGroupAvatarState> _Nonnull)getAvatarStateAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Remove an Avatar from the AvatarGroup.
/// \param index The zero-based index of the Avatar that will be removed from the AvatarGroup.
///
- (void)removeAvatarAt:(NSInteger)index;
@end

/// Enumeration of the styles used by the AvatarGroup.
/// The stack style presents Avatars laid on top of each other.
/// The pile style presents Avatars side by side.
typedef SWIFT_ENUM(NSInteger, MSFAvatarGroupStyle, closed) {
  MSFAvatarGroupStyleStack = 0,
  MSFAvatarGroupStylePile = 1,
};

typedef SWIFT_ENUM(NSInteger, MSFAvatarPresence, closed) {
  MSFAvatarPresenceNone = 0,
  MSFAvatarPresenceAvailable = 1,
  MSFAvatarPresenceAway = 2,
  MSFAvatarPresenceBlocked = 3,
  MSFAvatarPresenceBusy = 4,
  MSFAvatarPresenceDoNotDisturb = 5,
  MSFAvatarPresenceOffline = 6,
  MSFAvatarPresenceUnknown = 7,
};

/// Pre-defined sizes of the avatar
typedef SWIFT_ENUM(NSInteger, MSFAvatarSize, closed) {
  MSFAvatarSizeSize16 = 0,
  MSFAvatarSizeSize20 = 1,
  MSFAvatarSizeSize24 = 2,
  MSFAvatarSizeSize32 = 3,
  MSFAvatarSizeSize40 = 4,
  MSFAvatarSizeSize56 = 5,
  MSFAvatarSizeSize72 = 6,
};


/// Properties that can be used to customize the appearance of the Avatar.
SWIFT_PROTOCOL("_TtP8FluentUI14MSFAvatarState_")
@protocol MSFAvatarState
/// Sets the accessibility label for the Avatar.
@property (nonatomic, copy) NSString * _Nullable accessibilityLabel;
/// Sets a custom background color for the Avatar.
/// The ring color inherit this color if not set explicitly to a different color.
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// The custom foreground color.
/// This property allows customizing the initials text color or the default image tint color.
@property (nonatomic, strong) UIColor * _Nullable foregroundColor;
/// Configures the Avatar with a button accessibility trait overriding its default image trait.
@property (nonatomic) BOOL hasButtonAccessibilityTrait;
/// Turns iPad Pointer interaction on/off.
@property (nonatomic) BOOL hasPointerInteraction;
/// Whether the gap between the ring and the avatar content exists.
@property (nonatomic) BOOL hasRingInnerGap;
/// The image used in the avatar content.
@property (nonatomic, strong) UIImage * _Nullable image;
/// The image used to fill the ring as a custom color.
@property (nonatomic, strong) UIImage * _Nullable imageBasedRingColor;
/// Defines whether the avatar state transitions are animated or not. Animations are enabled by default.
@property (nonatomic) BOOL isAnimated;
/// Whether the presence status displays its “Out of office” or standard image.
@property (nonatomic) BOOL isOutOfOffice;
/// Displays an outer ring for the avatar if set to true.
/// The group style does not support rings.
@property (nonatomic) BOOL isRingVisible;
/// Sets the transparency of the avatar elements (inner and outer ring gaps, presence icon outline).
/// Uses the solid default background color if set to false.
@property (nonatomic) BOOL isTransparent;
/// Defines the presence displayed by the Avatar.
/// Image displayed depends on the value of the isOutOfOffice property.
/// Presence is not displayed in the xsmall size.
@property (nonatomic) enum MSFAvatarPresence presence;
/// The primary text of the avatar.
/// Used for computing the initials and background/ring colors.
@property (nonatomic, copy) NSString * _Nullable primaryText;
/// Overrides the default ring color.
@property (nonatomic, strong) UIColor * _Nullable ringColor;
/// The secondary text of the avatar.
/// Used for computing the initials and background/ring colors if primaryText is not set.
@property (nonatomic, copy) NSString * _Nullable secondaryText;
/// Defines the size of the avatar.
/// Presence is not displayed in the xsmall size.
@property (nonatomic) enum MSFAvatarSize size;
/// Defines the style of the avatar (including the fallback appearance if initials can’t be computed and no image is set).
@property (nonatomic) enum MSFAvatarStyle style;
@end

/// Pre-defined styles of the avatar
typedef SWIFT_ENUM(NSInteger, MSFAvatarStyle, closed) {
  MSFAvatarStyleDefault = 0,
  MSFAvatarStyleAccent = 1,
  MSFAvatarStyleGroup = 2,
  MSFAvatarStyleOutlined = 3,
  MSFAvatarStyleOutlinedPrimary = 4,
  MSFAvatarStyleOverflow = 5,
};

enum MSFCardNudgeStyle : NSInteger;
@protocol MSFCardNudgeState;

/// UIKit wrapper that exposes the SwiftUI <code>CardNudge</code> implementation
SWIFT_CLASS("_TtC8FluentUI12MSFCardNudge")
@interface MSFCardNudge : ControlHostingView
/// Creates a new MSFCardNudge instance.
/// \param style The MSFCardNudgeStyle value used by the CardNudge.
///
/// \param title The primary text to display in the CardNudge.
///
///
/// returns:
/// An initialized MSFCardNudge instance.
- (nonnull instancetype)initWithStyle:(enum MSFCardNudgeStyle)style title:(NSString * _Nonnull)title OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// The object that groups properties that allow control over the Card Nudge appearance.
@property (nonatomic, readonly, strong) id <MSFCardNudgeState> _Nonnull state;
@end


/// Properties that can be used to customize the appearance of the <code>CardNudge</code>.
SWIFT_PROTOCOL("_TtP8FluentUI17MSFCardNudgeState_")
@protocol MSFCardNudgeState <NSObject>
/// Style to draw the control.
@property (nonatomic) enum MSFCardNudgeStyle style;
/// Text for the main title area of the control.
@property (nonatomic, copy) NSString * _Nonnull title;
/// Optional subtext to draw below the main title area.
@property (nonatomic, copy) NSString * _Nullable subtitle;
/// Optional icon to draw at the leading edge of the control.
@property (nonatomic, strong) UIImage * _Nullable mainIcon;
/// Optional accented text to draw below the main title area.
@property (nonatomic, copy) NSString * _Nullable accentText;
/// Optional small icon to draw at the leading edge of <code>accentText</code>.
@property (nonatomic, strong) UIImage * _Nullable accentIcon;
/// Title to display in the action button on the trailing edge of the control.
/// To show an action button, provide values for both <code>actionButtonTitle</code> and  <code>actionButtonAction</code>.
@property (nonatomic, copy) NSString * _Nullable actionButtonTitle;
/// Action to be dispatched by the action button on the trailing edge of the control.
/// To show an action button, provide values for both <code>actionButtonTitle</code> and  <code>actionButtonAction</code>.
@property (nonatomic, copy) void (^ _Nullable actionButtonAction)(id <MSFCardNudgeState> _Nonnull);
/// Action to be dispatched by the dismiss (“close”) button on the trailing edge of the control.
@property (nonatomic, copy) void (^ _Nullable dismissButtonAction)(id <MSFCardNudgeState> _Nonnull);
@end

/// Style to draw the <code>CardNudge</code> control.
typedef SWIFT_ENUM(NSInteger, MSFCardNudgeStyle, closed) {
/// Drawn with a shaded background and no outline.
  MSFCardNudgeStyleStandard = 0,
/// Drawn with a neutral background and a thin outline.
  MSFCardNudgeStyleOutline = 1,
};

enum MSFDividerOrientation : NSInteger;
enum MSFDividerSpacing : NSInteger;
@protocol MSFDividerState;

/// UIKit wrapper that exposes the SwiftUI Divider implementation.
SWIFT_CLASS("_TtC8FluentUI10MSFDivider")
@interface MSFDivider : ControlHostingView
/// Creates a new MSFDivider instance.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     orientation: The DividerOrientation used by the Divider.
///   </li>
///   <li>
///     spacing: The DividerSpacing used by the Divider.
///   </li>
/// </ul>
- (nonnull instancetype)initWithOrientation:(enum MSFDividerOrientation)orientation spacing:(enum MSFDividerSpacing)spacing OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// The object that groups properties that allow control over the Divider appearance.
@property (nonatomic, readonly, strong) id <MSFDividerState> _Nonnull state;
/// The default thickness for the divider: half pt.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat thickness;)
+ (CGFloat)thickness SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, MSFDividerOrientation, closed) {
  MSFDividerOrientationHorizontal = 0,
  MSFDividerOrientationVertical = 1,
};

/// Pre-defined spacings of the divider
typedef SWIFT_ENUM(NSInteger, MSFDividerSpacing, closed) {
  MSFDividerSpacingNone = 0,
  MSFDividerSpacingMedium = 1,
};


/// Properties that can be used to customize the appearance of the Divider.
SWIFT_PROTOCOL("_TtP8FluentUI15MSFDividerState_")
@protocol MSFDividerState
/// Defines the orientation of the Divider.
@property (nonatomic) enum MSFDividerOrientation orientation;
/// Defines the spacing of the Divider.
@property (nonatomic) enum MSFDividerSpacing spacing;
/// Defines the thickness of the Divider.
@property (nonatomic, readonly) CGFloat thickness;
@end


/// UIKit wrapper that exposes the SwiftUI Heads-up display implementation
SWIFT_CLASS("_TtC8FluentUI17MSFHeadsUpDisplay")
@interface MSFHeadsUpDisplay : ControlHostingView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol MSFIndeterminateProgressBarState;

/// UIKit wrapper that exposes the SwiftUI Indeterminate Progress Bar implementation
SWIFT_CLASS("_TtC8FluentUI27MSFIndeterminateProgressBar")
@interface MSFIndeterminateProgressBar : ControlHostingView
/// Creates a new MSFIndeterminateProgressBar instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nonnull instancetype)new;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// The object that groups properties that allow control over the Indeterminate Progress Bar appearance.
@property (nonatomic, readonly, strong) id <MSFIndeterminateProgressBarState> _Nonnull state;
@end


/// Properties available to customize the state of the Indeterminate Progress Bar.
SWIFT_PROTOCOL("_TtP8FluentUI32MSFIndeterminateProgressBarState_")
@protocol MSFIndeterminateProgressBarState
/// Defines whether the Indeterminate Progress Bar is animating or stopped.
@property (nonatomic) BOOL isAnimating;
/// Defines whether the Indeterminate Progress Bar is visible when its animation stops.
@property (nonatomic) BOOL hidesWhenStopped;
@end

enum MSFNotificationStyle : NSInteger;
@protocol MSFNotificationState;

/// UIKit wrapper that exposes the SwiftUI <code>Notification</code> implementation
SWIFT_CLASS("_TtC8FluentUI15MSFNotification")
@interface MSFNotification : ControlHostingView
/// Creates a new MSFNotification instance.
/// \param style The MSFNotification value used by the Notification.
///
- (nonnull instancetype)initWithStyle:(enum MSFNotificationStyle)style;
/// Creates a new MSFNotification instance.
/// \param style The MSFNotification value used by the Notification.
///
/// \param isFlexibleWidthToast Whether the width of the toast is set based  on the width of the screen or on its contents
///
- (nonnull instancetype)initWithStyle:(enum MSFNotificationStyle)style isFlexibleWidthToast:(BOOL)isFlexibleWidthToast OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) id <MSFNotificationState> _Nonnull state;
/// <code>show</code> is used to present the view inside a container view:
/// insert into layout and show with optional animation. Constraints are used for the view positioning.
/// \param view The container view where this view will be presented.
///
/// \param anchorView The view used as the bottom anchor for presentation
/// (notification view is always presented up from the anchor). When no anchor view is provided the
/// bottom anchor of the container’s safe area is used.
///
/// \param animated Indicates whether to use animation during presentation or not.
///
/// \param completion The closure to be called after presentation is completed.
/// Can be used to call <code>hide</code> with a delay.
///
- (void)showIn:(UIView * _Nonnull)view from:(UIView * _Nullable)anchorView animated:(BOOL)animated completion:(void (^ _Nullable)(MSFNotification * _Nonnull))completion;
/// <code>hide</code> is used to dismiss the presented view:
/// hide with optional animation and remove from the container.
/// \param delay The delay used for the start of dismissal. Default is 0.
///
/// \param animated Indicates whether to use animation during dismissal or not.
///
/// \param completion The closure to be called after dismissal is completed.
///
- (void)hideAfter:(NSTimeInterval)delay animated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL allowsMultipleToasts;)
+ (BOOL)allowsMultipleToasts SWIFT_WARN_UNUSED_RESULT;
+ (void)setAllowsMultipleToasts:(BOOL)value;
@end


/// Properties that can be used to customize the appearance of the <code>Notification</code>.
SWIFT_PROTOCOL("_TtP8FluentUI20MSFNotificationState_")
@protocol MSFNotificationState <NSObject>
/// Style to draw the control.
@property (nonatomic) enum MSFNotificationStyle style;
/// Optional text for the main title area of the control. If there is a title, the message becomes subtext.
@property (nonatomic, copy) NSString * _Nullable message;
/// Optional attributed text for the main title area of the control. If there is a title, the message becomes subtext.
@property (nonatomic, strong) NSAttributedString * _Nullable attributedMessage;
/// Optional text to draw above the message area.
@property (nonatomic, copy) NSString * _Nullable title;
/// Optional attributed text to draw above the message area.
@property (nonatomic, strong) NSAttributedString * _Nullable attributedTitle;
/// Optional icon to draw at the leading edge of the control.
@property (nonatomic, strong) UIImage * _Nullable image;
/// Optional icon to display in the action button if no button title is provided.
/// If the trailingImage is set, the trailingImageAccessibilityLabel should also be set.
@property (nonatomic, strong) UIImage * _Nullable trailingImage;
/// Optional localized accessibility label for the trailing image.
@property (nonatomic, copy) NSString * _Nullable trailingImageAccessibilityLabel;
/// Title to display in the action button on the trailing edge of the control.
/// To show an action button, provide values for both <code>actionButtonTitle</code> and  <code>actionButtonAction</code>.
@property (nonatomic, copy) NSString * _Nullable actionButtonTitle;
/// Action to be dispatched by the action button on the trailing edge of the control.
/// To show an action button, provide values for both <code>actionButtonTitle</code> and  <code>actionButtonAction</code>.
@property (nonatomic, copy) void (^ _Nullable actionButtonAction)(void);
/// Bool to control if the Notification has a dismiss action by default.
@property (nonatomic) BOOL showDefaultDismissActionButton;
/// Action to be dispatched by tapping on the toast/bar notification.
@property (nonatomic, copy) void (^ _Nullable messageButtonAction)(void);
/// Defines whether the notification shows from the bottom of the presenting view or the top.
@property (nonatomic) BOOL showFromBottom;
/// An optional linear gradient to use as the background of the notification.
/// If this property is nil, then this notification will use the background color defined by its design tokens.
@property (nonatomic, strong) LinearGradientInfo * _Nullable backgroundGradient;
@end

/// Pre-defined styles of the notification
typedef SWIFT_ENUM(NSInteger, MSFNotificationStyle, closed) {
/// Floating notification with brand colored text and background.
  MSFNotificationStylePrimaryToast = 0,
/// Floating notification with neutral colored text and background.
  MSFNotificationStyleNeutralToast = 1,
/// Bar notification with brand colored text and background.
  MSFNotificationStylePrimaryBar = 2,
/// Bar notification with brand colored text and neutral colored background.
  MSFNotificationStylePrimaryOutlineBar = 3,
/// Bar notification with neutral colored text and brackground.
  MSFNotificationStyleNeutralBar = 4,
/// Floating notification with red text and background.
  MSFNotificationStyleDangerToast = 5,
/// Floating notification with yellow text and background.
  MSFNotificationStyleWarningToast = 6,
};

enum MSFPersonaButtonSize : NSInteger;
@protocol MSFPersonaButtonState;

/// UIKit wrapper that exposes the SwiftUI PersonaButton implementation
SWIFT_CLASS("_TtC8FluentUI16MSFPersonaButton")
@interface MSFPersonaButton : ControlHostingView
/// Creates a new MSFPersonaButton instance.
/// \param size The MSFPersonaButtonSize value used by the PersonaButton.
///
- (nonnull instancetype)initWithSize:(enum MSFPersonaButtonSize)size OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// The object that groups properties that allow control over the PersonaButton appearance.
@property (nonatomic, readonly, strong) id <MSFPersonaButtonState> _Nonnull state;
@end

@protocol MSFPersonaButtonCarouselState;

/// UIKit wrapper that exposes the SwiftUI PersonaButtonCarousel implementation
SWIFT_CLASS("_TtC8FluentUI24MSFPersonaButtonCarousel")
@interface MSFPersonaButtonCarousel : ControlHostingView
/// Creates a new MSFPersonaButtonCarousel instance.
/// \param size The MSFPersonaButtonSize value used by the PersonaButtonCarousel.
///
- (nonnull instancetype)initWithSize:(enum MSFPersonaButtonSize)size OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// The object that groups properties that allow control over the PersonaButtonCarousel appearance.
@property (nonatomic, readonly, strong) id <MSFPersonaButtonCarouselState> _Nonnull state;
@end

@protocol MSFPersonaCarouselButtonState;

/// Properties that define the appearance of a <code>PersonaButtonCarousel</code>.
SWIFT_PROTOCOL("_TtP8FluentUI29MSFPersonaButtonCarouselState_")
@protocol MSFPersonaButtonCarouselState
/// Determines whether the carousel will display small or large avatars.
@property (nonatomic, readonly) enum MSFPersonaButtonSize buttonSize;
/// Handles the event of tapping one of the <code>PersonaButton</code> items in a <code>PersonaButtonCarousel</code>.
@property (nonatomic, copy) void (^ _Nullable onTapAction)(id <MSFPersonaCarouselButtonState> _Nonnull, NSInteger);
/// Number of <code>PersonaButton</code> instances in the carousel.
@property (nonatomic, readonly) NSInteger count;
/// Adds a <code>PersonaButton</code> to the carousel, and returns an optional reference for additional property setting.
/// \param primaryText The primary text to appear in the <code>PersonaButton</code>
///
/// \param secondaryText The secondary text to appear in the <code>PersonaButton</code>, below <code>primaryText</code>
///
/// \param image The image to use as the persona’s avatar
///
///
/// returns:
/// An optional reference to the added <code>PersonaButton</code>, which can be used to set additional properties or to update later.
- (id <MSFPersonaCarouselButtonState> _Nonnull)addWithPrimaryText:(NSString * _Nullable)primaryText secondaryText:(NSString * _Nullable)secondaryText image:(UIImage * _Nullable)image;
/// Retrieves the <code>PersonaButton</code> at a given index, or nil if the index is out of bounds.
/// \param index The index of the <code>PersonaButton</code> to retrieve
///
///
/// returns:
/// A reference to the  <code>PersonaButton</code> at the given index if one exists.
- (id <MSFPersonaCarouselButtonState> _Nullable)personaButtonStateAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Removes a <code>PersonaButton</code> from the carousel.
/// \param personaState The reference to a <code>PersonaButton</code> to be removed.
///
- (void)remove:(id <MSFPersonaCarouselButtonState> _Nonnull)personaState;
/// Removes a <code>PersonaButton</code> from the carousel at the given index.
/// \param index The index at which the <code>PersonaButton</code> to be removed can be currently found.
///
- (void)removeAt:(NSInteger)index;
@end

/// Pre-defined sizes of the persona button
typedef SWIFT_ENUM(NSInteger, MSFPersonaButtonSize, closed) {
  MSFPersonaButtonSizeSmall = 0,
  MSFPersonaButtonSizeLarge = 1,
};


/// Properties that define the appearance of a <code>PersonaButton</code>.
SWIFT_PROTOCOL("_TtP8FluentUI21MSFPersonaButtonState_")
@protocol MSFPersonaButtonState
/// Specifies whether to use small or large avatars.
@property (nonatomic) enum MSFPersonaButtonSize buttonSize;
/// Handles tap events for the persona button.
@property (nonatomic, copy) void (^ _Nullable onTapAction)(void);
/// Indicates whether the image should interact with pointer hover.
@property (nonatomic) BOOL hasPointerInteraction;
/// Indicates whether there is a gap between the ring and the image.
@property (nonatomic) BOOL hasRingInnerGap;
/// Indicates if the avatar should be drawn with transparency.
@property (nonatomic) BOOL isTransparent;
/// Background color for the persona image.
@property (nonatomic, strong) UIColor * _Nullable avatarBackgroundColor;
/// Foreground color for the persona image.
@property (nonatomic, strong) UIColor * _Nullable avatarForegroundColor;
/// Iimage to display for persona.
@property (nonatomic, strong) UIImage * _Nullable image;
/// Image to use as a backdrop for the ring.
@property (nonatomic, strong) UIImage * _Nullable imageBasedRingColor;
/// Indicates whether to show out of office status.
@property (nonatomic) BOOL isOutOfOffice;
/// Indicates if the status ring should be visible.
@property (nonatomic) BOOL isRingVisible;
/// Enum that describes persence status for the persona.
@property (nonatomic) enum MSFAvatarPresence presence;
/// Primary text to be displayed under the persona image (e.g. first name).
@property (nonatomic, copy) NSString * _Nullable primaryText;
/// Color to draw the status ring, if one is visible.
@property (nonatomic, strong) UIColor * _Nullable ringColor;
/// Secondary text to be displayed under the persona image (e.g. last name or email address).
@property (nonatomic, copy) NSString * _Nullable secondaryText;
@end


/// Properties that can be used to customize the appearance of the PersonaButton in the PersonaButtonCarousel.
SWIFT_PROTOCOL("_TtP8FluentUI29MSFPersonaCarouselButtonState_")
@protocol MSFPersonaCarouselButtonState
/// Background color for the persona image
@property (nonatomic, strong) UIColor * _Nullable avatarBackgroundColor;
/// Foreground color for the persona image
@property (nonatomic, strong) UIColor * _Nullable avatarForegroundColor;
/// Iimage to display for persona
@property (nonatomic, strong) UIImage * _Nullable image;
/// Image to use as a backdrop for the ring
@property (nonatomic, strong) UIImage * _Nullable imageBasedRingColor;
/// Indicates whether to show out of office status
@property (nonatomic) BOOL isOutOfOffice;
/// Indicates if the status ring should be visible
@property (nonatomic) BOOL isRingVisible;
/// Enum that describes persence status for the persona
@property (nonatomic) enum MSFAvatarPresence presence;
/// Primary text to be displayed under the persona image (e.g. first name)
@property (nonatomic, copy) NSString * _Nullable primaryText;
/// Color to draw the status ring, if one is visible
@property (nonatomic, strong) UIColor * _Nullable ringColor;
/// Secondary text to be displayed under the persona image (e.g. last name or email address)
@property (nonatomic, copy) NSString * _Nullable secondaryText;
@end

/// Shimmer style can be either concealing or revealing.
/// The style affects the default shimmer alpha value and the default shimmer tint color.
typedef SWIFT_ENUM(NSInteger, MSFShimmerStyle, closed) {
/// Concealing shimmer: the gradient conceals parts of the subviews as it moves leaving most parts of the subviews unblocked.
  MSFShimmerStyleConcealing = 0,
/// Revealing shimmer: the gradient reveals parts of the subviews as it moves leaving most parts of the subview blocked.
  MSFShimmerStyleRevealing = 1,
};

/// Pre-defined sizes of the customView size.
typedef SWIFT_ENUM(NSInteger, MSFTableViewCellCustomViewSize, closed) {
  MSFTableViewCellCustomViewSizeDefault = 0,
  MSFTableViewCellCustomViewSizeZero = 1,
  MSFTableViewCellCustomViewSizeSmall = 2,
  MSFTableViewCellCustomViewSizeMedium = 3,
};


@protocol MSFPersona;
enum MSFNavigationBarElementSize : NSInteger;

/// UINavigationBar subclass, with a content view that contains various custom UIElements
/// Contains the MSNavigationTitleView class and handles passing animatable progress through
/// Custom UI can be hidden if desired
SWIFT_CLASS_NAMED("NavigationBar")
@interface MSFNavigationBar : UINavigationBar
/// An object that conforms to the <code>MSFPersona</code> protocol and provides text and an optional image for display as an <code>MSAvatar</code> next to the large title. Only displayed if <code>showsLargeTitle</code> is true on the current navigation item. If avatar is nil, it won’t show the avatar view.
@property (nonatomic, strong) id <MSFPersona> _Nullable personaData;
/// A string to optionally customize the accessibility label of the large title’s avatar
@property (nonatomic, copy) NSString * _Nullable avatarCustomAccessibilityLabel;
/// An element size to describe the behavior of large title’s avatar. If <code>.automatic</code>, avatar will resize when <code>expand(animated:)</code> and <code>contract(animated:)</code> are called.
@property (nonatomic) enum MSFNavigationBarElementSize avatarSize;
- (UIView * _Nullable)visibleAvatarView SWIFT_WARN_UNUSED_RESULT;
/// Returns the first match of an optional view for a bar button item with the given tag.
- (UIView * _Nullable)barButtonItemViewWith:(NSInteger)tag SWIFT_WARN_UNUSED_RESULT;
/// An element size to describe the behavior of the navigation bar’s expanded height. Set automatically when the values of <code>avatarSize</code> and <code>titleSize</code> are changed. The bar will lock to expanded size if either element is set to <code>.expanded</code>, lock to contracted if both elements are <code>.contracted</code>, and stay automatic in any other case.
@property (nonatomic, readonly) enum MSFNavigationBarElementSize barHeight;
/// An element size to describe the behavior of the navigation bar’s large title. If <code>.automatic</code>, the title label will resize when <code>expand(animated:)</code> and <code>contract(animated:)</code> are called.
@property (nonatomic) enum MSFNavigationBarElementSize titleSize;
/// An optional closure to be called when the avatar view is tapped, if it is present.
@property (nonatomic, copy) void (^ _Nullable onAvatarTapped)(void);
/// The navigation bar’s default leading content margin.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultContentLeadingMargin;)
+ (CGFloat)defaultContentLeadingMargin SWIFT_WARN_UNUSED_RESULT;
/// The navigation bar’s default trailing content margin.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultContentTrailingMargin;)
+ (CGFloat)defaultContentTrailingMargin SWIFT_WARN_UNUSED_RESULT;
/// The navigation bar’s leading content margin.
@property (nonatomic) CGFloat contentLeadingMargin;
/// The navigation bar’s trailing content margin.
@property (nonatomic) CGFloat contentTrailingMargin;
@property (nonatomic) CGPoint center;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Guarantees that the custom UI remains on top of the subview stack
/// Fetches the current navigation item and triggers a UI update
- (void)layoutSubviews;
- (void)didMoveToWindow;
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
/// Override the avatar with given style rather than using avatar data
/// \param style style used in  the avatar
///
- (void)overrideAvatarWith:(enum MSFAvatarStyle)style;
@end

/// If the style is <code>.custom</code>, UINavigationItem’s <code>navigationBarColor</code> is used for all the subviews’ backgroundColor
typedef SWIFT_ENUM_NAMED(NSInteger, MSFNavigationBarStyle, "Style", closed) {
  MSFNavigationBarStyleDefault = 0,
  MSFNavigationBarStylePrimary = 1,
  MSFNavigationBarStyleSystem = 2,
  MSFNavigationBarStyleCustom = 3,
};

/// Describes the sizing behavior of navigation bar elements (title, avatar, bar height)
typedef SWIFT_ENUM_NAMED(NSInteger, MSFNavigationBarElementSize, "ElementSize", closed) {
  MSFNavigationBarElementSizeAutomatic = 0,
  MSFNavigationBarElementSizeContracted = 1,
  MSFNavigationBarElementSizeExpanded = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFNavigationBarShadow, "Shadow", closed) {
  MSFNavigationBarShadowAutomatic = 0,
  MSFNavigationBarShadowAlwaysHidden = 1,
};


/// Layout attributes for a navigation bar’s top accessory view.
SWIFT_CLASS_NAMED("NavigationBarTopAccessoryViewAttributes")
@interface MSFNavigationBarTopAccessoryViewAttributes : NSObject
/// The width multiplier is the propotion of the navigation bar’s width that the top accessory view will occupy.
@property (nonatomic, readonly) CGFloat widthMultiplier;
/// The maximum width of the top accessory view.
@property (nonatomic, readonly) CGFloat maxWidth;
/// The minimum width of the top accessory view.
@property (nonatomic, readonly) CGFloat minWidth;
- (nonnull instancetype)initWithWidthMultiplier:(CGFloat)widthMultiplier maxWidth:(CGFloat)maxWidth minWidth:(CGFloat)minWidth OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Layout attributes for a navigation bar’s top search bar.
SWIFT_CLASS_NAMED("NavigationBarTopSearchBarAttributes")
@interface MSFNavigationBarTopSearchBarAttributes : MSFNavigationBarTopAccessoryViewAttributes
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithWidthMultiplier:(CGFloat)widthMultiplier maxWidth:(CGFloat)maxWidth minWidth:(CGFloat)minWidth SWIFT_UNAVAILABLE;
@end

@protocol UINavigationControllerDelegate;

/// <code>UINavigationController</code> subclass that supports Large Title presentation and accessory view by wrapping each view controller that needs this functionality into a controller that provides the required behavior. The original view controller can be accessed by using <code>topContentViewController</code> or <code>contentViewController(for:)</code>.
SWIFT_CLASS_NAMED("NavigationController")
@interface MSFNavigationController : UINavigationController
/// allow users to collapse or expand the large header view while scrolling <code>contentScrollView</code>
@property (nonatomic) BOOL allowResizeOfNavigationBarOnScroll;
@property (nonatomic, readonly, strong) MSFNavigationBar * _Nonnull msfNavigationBar;
@property (nonatomic, readonly, strong) UIViewController * _Nullable topContentViewController;
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForStatusBarStyle;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
@property (nonatomic, strong) id <UINavigationControllerDelegate> _Nullable delegate;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillLayoutSubviews;
- (void)pushViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
- (void)setViewControllers:(NSArray<UIViewController *> * _Nonnull)viewControllers animated:(BOOL)animated;
- (void)expandNavigationBarWithAnimated:(BOOL)animated;
- (void)contractNavigationBarWithAnimated:(BOOL)animated;
- (UIViewController * _Nonnull)contentViewControllerFor:(UIViewController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
- (void)setNavigationBarHidden:(BOOL)hidden animated:(BOOL)animated;
@end


@interface MSFNavigationController (SWIFT_EXTENSION(FluentUI)) <UINavigationControllerDelegate>
- (void)navigationController:(UINavigationController * _Nonnull)navigationController willShowViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
- (void)navigationController:(UINavigationController * _Nonnull)navigationController didShowViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
- (UIInterfaceOrientationMask)navigationControllerSupportedInterfaceOrientations:(UINavigationController * _Nonnull)navigationController SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerInteractiveTransitioning> _Nullable)navigationController:(UINavigationController * _Nonnull)navigationController interactionControllerForAnimationController:(id <UIViewControllerAnimatedTransitioning> _Nonnull)animationController SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)navigationController:(UINavigationController * _Nonnull)navigationController animationControllerForOperation:(UINavigationControllerOperation)operation fromViewController:(UIViewController * _Nonnull)fromVC toViewController:(UIViewController * _Nonnull)toVC SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MSFObscureStyle, "ObscureStyle", closed) {
  MSFObscureStyleBlur = 0,
  MSFObscureStyleDim = 1,
};


/// Presents viewController views as “cards” in a paged scrollView
SWIFT_CLASS_NAMED("PageCardPresenterController")
@interface MSFPageCardPresenterController : UIViewController
@property (nonatomic) UIModalPresentationStyle modalPresentationStyle;
@property (nonatomic, strong) id <UIViewControllerTransitioningDelegate> _Nullable transitioningDelegate;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillLayoutSubviews;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface MSFPageCardPresenterController (SWIFT_EXTENSION(FluentUI)) <UIScrollViewDelegate>
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
@end


@interface MSFPageCardPresenterController (SWIFT_EXTENSION(FluentUI)) <UIViewControllerTransitioningDelegate>
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed SWIFT_WARN_UNUSED_RESULT;
- (UIPresentationController * _Nullable)presentationControllerForPresentedViewController:(UIViewController * _Nonnull)presented presentingViewController:(UIViewController * _Nullable)presenting sourceViewController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
@end

@protocol MSFPeoplePickerDelegate;
@class MSFPersonaListView;

/// <code>PeoplePicker</code> is used to select one or more personas from a list which is populated according to the text entered into its text field. Selected personas are added to a list of <code>pickedPersonas</code> and represented visually as “badges” which can be interacted with and removed.
/// Set <code>availablePersonas</code> to provide a list of personas to filter from and populate the <code>suggestedPersonas</code> list which is shown in the persona list view based on the text field content provided. The delegate method <code>getSuggestedPersonasForText</code> can be used instead of filtering <code>availablePersonas</code> to provide custom filtering or calls to other services to return a list of <code>suggestedPersonas</code> to display in the persona list.
/// The <code>suggestedPersonas</code> are shown in a list either above or below the control based on the position of <code>PeoplePicker</code> on screen. If more space is available below the text field than above it then the persona list view will be positioned below, if not it will be positioned above the control.
SWIFT_CLASS_NAMED("PeoplePicker")
@interface MSFPeoplePicker : MSFBadgeField
/// Use <code>availablePersonas</code> to provide a list of personas that may be filtered and appear as <code>suggestedPersonas</code>in the persona list.
@property (nonatomic, copy) NSArray<id <MSFPersona>> * _Nonnull availablePersonas;
/// Use <code>pickedPersonas</code> to provide a list of personas that have been picked. These personas are displayed as interactable badges next to the text field. When a persona from the persona list is picked it gets added here.
@property (nonatomic, copy) NSArray<id <MSFPersona>> * _Nonnull pickedPersonas;
/// Set <code>showsSearchDirectoryButton</code> to determine whether or not to show the search directory button that appears at the bottom of the persona list.
@property (nonatomic) BOOL showsSearchDirectoryButton;
/// Set <code>allowsPickedPersonasToAppearAsSuggested</code> to false to remove personas from appearing in the suggested list if they have already been picked.
/// Note: This property is disregarded if <code>getSuggestedPersonasForText</code> delegate method has been implemented.
@property (nonatomic) BOOL allowsPickedPersonasToAppearAsSuggested;
/// Set <code>hidePersonaListViewWhenNoSuggestedPersonas</code> to true to hide the personaListView when no suggested personas are available, i.e. personaListView is empty.
@property (nonatomic) BOOL hidePersonaListViewWhenNoSuggestedPersonas;
@property (nonatomic, weak) id <MSFPeoplePickerDelegate> _Nullable delegate;
/// The UIView used to present ‘suggestedPersonas’. It includes personaListView
@property (nonatomic, readonly, strong) UIView * _Nonnull personaSuggestionsView;
/// The UITableView used to present ‘availablePersonas’
@property (nonatomic, readonly, strong) MSFPersonaListView * _Nonnull personaListView;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Returns the badge for the associated persona
/// \param persona The <code>Persona</code> to find the associated <code>BadgeView</code> for
///
- (MSFBadgeView * _Nullable)badgeFor:(id <MSFPersona> _Nonnull)persona SWIFT_WARN_UNUSED_RESULT;
- (void)willMoveToWindow:(UIWindow * _Nullable)newWindow;
- (void)layoutSubviews;
/// layouts personaSuggestionsView in available window frame
- (void)showPersonaSuggestions;
/// Hides personaSuggestionsView
- (void)hidePersonaSuggestions;
- (void)badgeText;
- (void)addBadgeWithDataSource:(MSFBadgeViewDataSource * _Nonnull)dataSource fromUserAction:(BOOL)fromUserAction updateConstrainedBadges:(BOOL)updateConstrainedBadges;
- (void)resetTextFieldContent;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (void)didSelectBadge:(MSFBadgeView * _Nonnull)badge;
- (void)didTapSelectedBadge:(MSFBadgeView * _Nonnull)badge;
@end


SWIFT_PROTOCOL_NAMED("PersonaListViewSearchDirectoryDelegate")
@protocol MSFPersonaListViewSearchDirectoryDelegate
- (void)personaListSearchDirectory:(MSFPersonaListView * _Nonnull)personaListView completion:(void (^ _Nonnull)(BOOL))completion;
@end


@interface MSFPeoplePicker (SWIFT_EXTENSION(FluentUI)) <MSFPersonaListViewSearchDirectoryDelegate>
- (void)personaListSearchDirectory:(MSFPersonaListView * _Nonnull)personaListView completion:(void (^ _Nonnull)(BOOL))completion;
@end


SWIFT_PROTOCOL_NAMED("PeoplePickerDelegate")
@protocol MSFPeoplePickerDelegate <MSFBadgeFieldDelegate>
@optional
/// Called when text is entered into the text field. Provides an opportunity to return a list of personas based on the entered text to populate the suggested list.
- (void)peoplePicker:(MSFPeoplePicker * _Nonnull)peoplePicker getSuggestedPersonasForText:(NSString * _Nonnull)text completion:(void (^ _Nonnull)(NSArray<id <MSFPersona>> * _Nonnull))completion;
/// Determines whether or not the suggested persona should be picked. Called when selecting a persona from the suggested list or returning text from the text field.
- (BOOL)peoplePicker:(MSFPeoplePicker * _Nonnull)peoplePicker shouldPickPersona:(id <MSFPersona> _Nonnull)persona SWIFT_WARN_UNUSED_RESULT;
/// Called after <code>shouldPickPersona</code> when a persona is picked from the suggested list or when text is returned from the text field.
- (void)peoplePicker:(MSFPeoplePicker * _Nonnull)peoplePicker didPickPersona:(id <MSFPersona> _Nonnull)persona;
/// Called when text is returned from the text field. Opportunity to match entered text to a persona (e.g. from an email address) and return that persona to be picked.
- (id <MSFPersona> _Nonnull)peoplePicker:(MSFPeoplePicker * _Nonnull)peoplePicker personaFromText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// Determines whether or not the picked persona is “valid”. If invalid the corresponding badge added to the badge field will display in an error state.
- (BOOL)peoplePicker:(MSFPeoplePicker * _Nonnull)peoplePicker personaIsValid:(id <MSFPersona> _Nonnull)persona SWIFT_WARN_UNUSED_RESULT;
/// Called when an already picked persona appearing as a badge in the badge field is selected.
- (void)peoplePicker:(MSFPeoplePicker * _Nonnull)peoplePicker didSelectPersona:(id <MSFPersona> _Nonnull)persona;
/// Called when an already selected and picked persona appearing as a badge in the badge field is tapped.
- (void)peoplePicker:(MSFPeoplePicker * _Nonnull)peoplePicker didTapSelectedPersona:(id <MSFPersona> _Nonnull)persona;
/// Called when a picked persona is removed from the badge field.
- (void)peoplePicker:(MSFPeoplePicker * _Nonnull)peoplePicker didRemovePersona:(id <MSFPersona> _Nonnull)persona;
/// Called when the search directory button is tapped.
- (void)peoplePicker:(MSFPeoplePicker * _Nonnull)peoplePicker searchDirectoryWithCompletion:(void (^ _Nonnull)(NSArray<id <MSFPersona>> * _Nonnull, BOOL))completion;
/// This is called to check if suggestions are to be hidden on textField endEditing event.
/// If not implemented, the default value assumed is false.
- (BOOL)peoplePickerShouldKeepShowingPersonaSuggestionsOnEndEditing:(MSFPeoplePicker * _Nonnull)peoplePicker SWIFT_WARN_UNUSED_RESULT;
/// Called when the PersonaListView is shown.
- (void)peoplePickerDidShowPersonaSuggestions:(MSFPeoplePicker * _Nonnull)peoplePicker;
/// Called when the PersonaListView is hidden.
- (void)peoplePickerDidHidePersonaSuggestions:(MSFPeoplePicker * _Nonnull)peoplePicker;
@end


SWIFT_PROTOCOL_NAMED("Persona")
@protocol MSFPersona
/// The image that represents the persona.
/// Used in the Avatar to replace the initials if provided.
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
/// The color that represents this persona.
/// This color will override the initials view’s background color.
/// If the avatar view is configured to display a ring, this will be the rings’s color.
/// The colored ring will not be displayed if the imageBasedRingColor property is not set to nil.
@property (nonatomic, readonly, strong) UIColor * _Nullable color;
/// An image that can be used the color for the avatar ring.
@property (nonatomic, readonly, strong) UIImage * _Nullable imageBasedRingColor;
/// The e-mail address of the persona. This value is used to calculate the Avatar initials.
@property (nonatomic, readonly, copy) NSString * _Nonnull email;
/// Defines whether the gap between the ring and the avatar content is rendered in case the avatar has a ring.
@property (nonatomic, readonly) BOOL hasRingInnerGap;
/// The name of the Persona. This value is used to calculate the Avatar initials.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The presence status of the persona.
@property (nonatomic, readonly) enum MSFAvatarPresence presence;
/// Sets whether the persona is out of office. This value will be used to calculate the presence image accordingly.
@property (nonatomic) BOOL isOutOfOffice;
/// Defines whether the ring is displayed around the Avatar.
@property (nonatomic, readonly) BOOL isRingVisible;
/// The subtitle value for the persona.
@property (nonatomic, readonly, copy) NSString * _Nonnull subtitle;
@optional
/// Fetches the image asynchronously. This is called when setting up persona row for presentation. Image caching should be handled in the implementation for optimal efficiency.
/// If the <code>image</code> is provided, it will be overrided by the fetched image when completion block is called, acting like a custom placeholder.
/// \param completion The completion block that returns the image
///
- (void)fetchImageWithCompletion:(void (^ _Nonnull)(UIImage * _Nullable))completion;
@end


SWIFT_CLASS_NAMED("PersonaBadgeViewDataSource")
@interface MSFPersonaBadgeViewDataSource : MSFBadgeViewDataSource
@property (nonatomic, strong) id <MSFPersona> _Nonnull persona;
- (nonnull instancetype)initWithPersona:(id <MSFPersona> _Nonnull)persona style:(enum MSFBadgeViewStyle)style size:(enum MSFBadgeViewSize)size OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text style:(enum MSFBadgeViewStyle)style size:(enum MSFBadgeViewSize)size SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS_NAMED("PersonaCell")
@interface MSFPersonaCell : MSFTableViewCell
@property (nonatomic) enum MSFTableViewCellCustomViewSize customViewSize;
/// Sets up the cell with an Persona and an accessory
/// \param persona The Persona to set up the cell with
///
/// \param accessoryType The type of accessory that appears on the trailing edge: a disclosure indicator or a details button with an ellipsis icon
///
- (void)setupWithPersona:(id <MSFPersona> _Nonnull)persona accessoryType:(enum MSFTableViewCellAccessoryType)accessoryType;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("PersonaData")
@interface MSFPersonaData : NSObject <MSFPersona>
/// The image that represents the persona.
/// Used in the Avatar to replace the initials if provided.
@property (nonatomic, strong) UIImage * _Nullable image;
/// The e-mail address of the persona. This value is used to calculate the Avatar initials.
@property (nonatomic, copy) NSString * _Nonnull email;
/// An image that can be used the color for the avatar ring.
@property (nonatomic, strong) UIImage * _Nullable imageBasedRingColor;
/// Defines whether the gap between the ring and the avatar content is rendered in case the avatar has a ring.
@property (nonatomic) BOOL hasRingInnerGap;
/// Defines whether the ring is displayed around the Avatar.
@property (nonatomic) BOOL isRingVisible;
/// Sets whether the persona is out of office. This value will be used to calculate the presence image accordingly.
@property (nonatomic) BOOL isOutOfOffice;
/// The color that represents this persona.
/// This color will override the initials view’s background color.
/// If the avatar view is configured to display a ring, this will be the rings’s color.
/// The colored ring will not be displayed if the imageBasedRingColor property is not set to nil.
@property (nonatomic, strong) UIColor * _Nullable color;
/// The name of the Persona. This value is used to calculate the Avatar initials.
@property (nonatomic, copy) NSString * _Nonnull name;
/// The subtitle value for the persona.
@property (nonatomic, copy) NSString * _Nonnull subtitle;
/// The presence status of the persona.
@property (nonatomic) enum MSFAvatarPresence presence;
/// Initializer for PersonaData
/// \param name The persona’s name.
///
/// \param email The persona’s email.
///
/// \param subtitle The persona’s subtitle.
///
/// \param image The persona’s image.
///
/// \param presence The persona’s presence status.
///
/// \param color The persona’s color.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name email:(NSString * _Nonnull)email subtitle:(NSString * _Nonnull)subtitle image:(UIImage * _Nullable)image presence:(enum MSFAvatarPresence)presence color:(UIColor * _Nullable)color OBJC_DESIGNATED_INITIALIZER;
/// Initializer for PersonaData
/// \param name The persona’s name.
///
/// \param email The persona’s email.
///
/// \param subtitle The persona’s subtitle.
///
/// \param image The persona’s image.
///
/// \param presence The persona’s presence status.
///
/// \param color The persona’s color.
///
/// \param isRingVisible Whether to show a ring.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name email:(NSString * _Nonnull)email subtitle:(NSString * _Nonnull)subtitle image:(UIImage * _Nullable)image presence:(enum MSFAvatarPresence)presence color:(UIColor * _Nullable)color isRingVisible:(BOOL)isRingVisible OBJC_DESIGNATED_INITIALIZER;
/// Initializer for PersonaData
/// \param firstName The persona’s first name.
///
/// \param lastName The persona’s last name.
///
/// \param email The persona’s email.
///
/// \param subtitle The persona’s subtitle.
///
/// \param image The persona’s image.
///
/// \param presence The persona’s presence status.
///
/// \param color The persona’s color.
///
- (nonnull instancetype)initWithFirstName:(NSString * _Nonnull)firstName lastName:(NSString * _Nonnull)lastName email:(NSString * _Nonnull)email subtitle:(NSString * _Nonnull)subtitle image:(UIImage * _Nullable)image presence:(enum MSFAvatarPresence)presence color:(UIColor * _Nullable)color OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum MSFPersonaListViewSelectionDirection : NSInteger;

SWIFT_CLASS_NAMED("PersonaListView")
@interface MSFPersonaListView : UITableView
/// The personas to display in the list view
@property (nonatomic, copy) NSArray<id <MSFPersona>> * _Nonnull personaList;
/// The type of accessory that appears on the trailing edge: a disclosure indicator or a details button with an ellipsis icon
@property (nonatomic) enum MSFTableViewCellAccessoryType accessoryType;
/// Bool indicating whether the ‘Search Directory’ button should be shown
@property (nonatomic) BOOL showsSearchDirectoryButton;
@property (nonatomic, weak) id <MSFPersonaListViewSearchDirectoryDelegate> _Nullable searchDirectoryDelegate;
/// Callback with the selected Persona
@property (nonatomic, copy) void (^ _Nullable onPersonaSelected)(id <MSFPersona> _Nonnull);
- (nonnull instancetype)initWithFrame:(CGRect)frame style:(UITableViewStyle)style SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Selects a persona using the index path for selected row
- (void)pickPersona;
/// Selects / deselects a row based on the PersonaListViewSelectionDirection value
/// \param direction The PersonaListViewSelectionDirection value to select a ‘next’ or ‘previous’ cell
///
- (void)selectPersonaWithDirection:(enum MSFPersonaListViewSelectionDirection)direction;
@end


@interface MSFPersonaListView (SWIFT_EXTENSION(FluentUI)) <UITableViewDelegate>
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface MSFPersonaListView (SWIFT_EXTENSION(FluentUI)) <UITableViewDataSource>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


typedef SWIFT_ENUM_NAMED(NSInteger, MSFPersonaListViewSelectionDirection, "PersonaListViewSelectionDirection", closed) {
  MSFPersonaListViewSelectionDirectionNext = 1,
  MSFPersonaListViewSelectionDirectionPrev = -1,
};

@class MSFPillButtonBarItem;
enum MSFPillButtonStyle : NSInteger;

/// An <code>PillButton</code> is a button in the shape of a pill that can have two states: on (Selected) and off (not selected)
SWIFT_CLASS_NAMED("PillButton")
@interface MSFPillButton : UIButton
/// Set <code>backgroundColor</code> to customize background color of the pill button
@property (nonatomic, strong) UIColor * _Nullable customBackgroundColor;
/// Set <code>selectedBackgroundColor</code> to customize background color of the pill button
@property (nonatomic, strong) UIColor * _Nullable customSelectedBackgroundColor;
/// Set <code>textColor</code> to customize background color of the pill button
@property (nonatomic, strong) UIColor * _Nullable customTextColor;
/// Set <code>selectedTextColor</code> to customize background color of the pill button
@property (nonatomic, strong) UIColor * _Nullable customSelectedTextColor;
/// Set <code>unreadDotColor</code> to customize color of the pill button unread dot
@property (nonatomic, strong) UIColor * _Nullable customUnreadDotColor;
- (void)didMoveToWindow;
- (nonnull instancetype)initWithPillBarItem:(MSFPillButtonBarItem * _Nonnull)pillBarItem style:(enum MSFPillButtonStyle)style OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat cornerRadius;)
+ (CGFloat)cornerRadius SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) MSFPillButtonBarItem * _Nonnull pillBarItem;
@property (nonatomic, readonly) enum MSFPillButtonStyle style;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, getter=isSelected) BOOL selected;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface MSFPillButton (SWIFT_EXTENSION(FluentUI))
+ (UIColor * _Nonnull)normalBackgroundColorForWindow:(UIWindow * _Nonnull)window ForStyle:(enum MSFPillButtonStyle)style SWIFT_WARN_UNUSED_RESULT;
@end

@protocol MSFPillButtonBarDelegate;

/// <code>PillButtonBar</code> is a horizontal scrollable list of pill shape text buttons in which only one button can be selected at a given time.
/// Set the <code>items</code> property to determine what buttons will be shown in the bar. Each <code>PillButtonBarItem</code> will be represented as a button.
/// Set the <code>delegate</code> property to listen to selection changes.
/// Set the <code>selectedItem</code> property if the selection needs to be programatically changed.
/// Once a button is selected, the previously selected button will be deselected.
SWIFT_CLASS_NAMED("PillButtonBar")
@interface MSFPillButtonBar : UIScrollView
@property (nonatomic, weak) id <MSFPillButtonBarDelegate> _Nullable barDelegate;
@property (nonatomic) BOOL centerAligned;
@property (nonatomic, copy) NSArray<MSFPillButtonBarItem *> * _Nullable items;
@property (nonatomic, readonly) enum MSFPillButtonStyle pillButtonStyle;
/// If set to nil, the previously selected item will be deselected and there won’t be any items selected
@property (nonatomic, strong) MSFPillButtonBarItem * _Nullable selectedItem;
@property (nonatomic) CGRect bounds;
/// Initializes the PillButtonBar using the provided style and color overrides.
/// \param pillButtonStyle The style override for the pill buttons in this pill button bar
///
- (nonnull instancetype)initWithPillButtonStyle:(enum MSFPillButtonStyle)pillButtonStyle;
/// Initializes the PillButtonBar using the provided style and color overrides.
/// \param pillButtonStyle The style override for the pill buttons in this pill button bar
///
/// \param pillButtonBackgroundColor The color override for the background color of the pill buttons
///
- (nonnull instancetype)initWithPillButtonStyle:(enum MSFPillButtonStyle)pillButtonStyle pillButtonBackgroundColor:(UIColor * _Nullable)pillButtonBackgroundColor;
/// Initializes the PillButtonBar using the provided style and color overrides.
/// \param pillButtonStyle The style override for the pill buttons in this pill button bar
///
/// \param pillButtonBackgroundColor The color override for the background color of the pill buttons
///
/// \param selectedPillButtonBackgroundColor The color override for the background color of the selected pill button
///
/// \param pillButtonTextColor The color override for the text of the pill buttons
///
/// \param selectedPillButtonTextColor The color override for the text of the selected pill button
///
/// \param pillButtonUnreadDotColor The color override for the unread dot for the pill buttons
///
- (nonnull instancetype)initWithPillButtonStyle:(enum MSFPillButtonStyle)pillButtonStyle pillButtonBackgroundColor:(UIColor * _Nullable)pillButtonBackgroundColor selectedPillButtonBackgroundColor:(UIColor * _Nullable)selectedPillButtonBackgroundColor pillButtonTextColor:(UIColor * _Nullable)pillButtonTextColor selectedPillButtonTextColor:(UIColor * _Nullable)selectedPillButtonTextColor pillButtonUnreadDotColor:(UIColor * _Nullable)pillButtonUnreadDotColor;
/// Initializes the PillButtonBar using the provided style and color overrides.
/// \param pillButtonStyle The style override for the pill buttons in this pill button bar
///
/// \param pillButtonBackgroundColor The color override for the background color of the pill buttons
///
/// \param selectedPillButtonBackgroundColor The color override for the background color of the selected pill button
///
/// \param pillButtonTextColor The color override for the text of the pill buttons
///
/// \param selectedPillButtonTextColor The color override for the text of the selected pill button
///
- (nonnull instancetype)initWithPillButtonStyle:(enum MSFPillButtonStyle)pillButtonStyle pillButtonBackgroundColor:(UIColor * _Nullable)pillButtonBackgroundColor selectedPillButtonBackgroundColor:(UIColor * _Nullable)selectedPillButtonBackgroundColor pillButtonTextColor:(UIColor * _Nullable)pillButtonTextColor selectedPillButtonTextColor:(UIColor * _Nullable)selectedPillButtonTextColor OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)selectItem:(MSFPillButtonBarItem * _Nonnull)item;
- (BOOL)selectItemAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (void)disableItem:(MSFPillButtonBarItem * _Nonnull)item;
- (void)disableItemAtIndex:(NSInteger)index;
- (void)enableItem:(MSFPillButtonBarItem * _Nonnull)item;
- (void)enableItemAtIndex:(NSInteger)index;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UIPointerInteraction;
@class UIPointerRegionRequest;
@class UIPointerRegion;
@class UIPointerStyle;
@protocol UIPointerInteractionAnimating;

@interface MSFPillButtonBar (SWIFT_EXTENSION(FluentUI)) <UIPointerInteractionDelegate>
- (UIPointerRegion * _Nullable)pointerInteraction:(UIPointerInteraction * _Nonnull)interaction regionForRequest:(UIPointerRegionRequest * _Nonnull)request defaultRegion:(UIPointerRegion * _Nonnull)defaultRegion SWIFT_WARN_UNUSED_RESULT;
- (UIPointerStyle * _Nullable)pointerInteraction:(UIPointerInteraction * _Nonnull)interaction styleForRegion:(UIPointerRegion * _Nonnull)region SWIFT_WARN_UNUSED_RESULT;
- (void)pointerInteraction:(UIPointerInteraction * _Nonnull)interaction willEnterRegion:(UIPointerRegion * _Nonnull)region animator:(id <UIPointerInteractionAnimating> _Nonnull)animator;
- (void)pointerInteraction:(UIPointerInteraction * _Nonnull)interaction willExitRegion:(UIPointerRegion * _Nonnull)region animator:(id <UIPointerInteractionAnimating> _Nonnull)animator;
@end


SWIFT_PROTOCOL_NAMED("PillButtonBarDelegate")
@protocol MSFPillButtonBarDelegate
@optional
/// Called after the button representing the item is tapped in the UI.
- (void)pillBar:(MSFPillButtonBar * _Nonnull)pillBar didSelectItem:(MSFPillButtonBarItem * _Nonnull)item atIndex:(NSInteger)index;
@end


/// <code>PillButtonBarItem</code> is an item that can be presented as a pill shaped text button.
SWIFT_CLASS_NAMED("PillButtonBarItem")
@interface MSFPillButtonBarItem : NSObject
/// Creates a new instance of the PillButtonBarItem that holds data used to create a pill button in a PillButtonBar.
/// \param title Title that will be displayed by a pill button in the PillButtonBar.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title OBJC_DESIGNATED_INITIALIZER;
/// Creates a new instance of the PillButtonBarItem that holds data used to create a pill button in a PillButtonBar.
/// \param title Title that will be displayed by a pill button in the PillButtonBar.
///
/// \param isUnread Whether the pill button shows the mark that represents the “unread” state.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title isUnread:(BOOL)isUnread;
/// Title that will be displayed in the button.
@property (nonatomic, copy) NSString * _Nonnull title;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MSFPillButtonStyle, "PillButtonStyle", closed) {
/// primary: the default style of PillButton; use this style in conjunction with a neutral or white background.
  MSFPillButtonStylePrimary = 0,
/// onBrand: use this style in conjunction with branded background where the background features
/// a prominent brand color in light mode and a muted gray in dark mode.
  MSFPillButtonStyleOnBrand = 1,
};

@class MSFPopupMenuItem;
@protocol MSFPopupMenuTemplateItem;
@class MSFPopupMenuSection;

/// <code>PopupMenuController</code> is used to present a popup menu that slides from top or bottom depending on <code>presentationDirection</code>. Use <code>presentationOrigin</code> to specify the vertical offset (in screen coordinates) from which to show popup menu. If not provided it will be calculated automatically: bottom of navigation bar for <code>.down</code> presentation and bottom of the screen for <code>.up</code> presentation.
/// When presented as a slide over, <code>PopupMenuController</code> will have a resizing handle that provides a user an alternative way to dismiss it.
/// <code>PopupMenuController</code> will be presented as a popover on iPad and so requires either <code>sourceView</code>/<code>sourceRect</code> or <code>barButtonItem</code> to be provided via available initializers. Use <code>permittedArrowDirections</code> to specify the direction of the popover arrow.
SWIFT_CLASS_NAMED("PopupMenuController")
@interface MSFPopupMenuController : MSFDrawerController
@property (nonatomic, strong) UIView * _Nullable contentView;
@property (nonatomic) enum MSFDrawerPresentationStyle presentationStyle;
@property (nonatomic) enum MSFDrawerResizingBehavior resizingBehavior;
@property (nonatomic) CGSize preferredContentSize;
/// Set <code>backgroundColor</code> to customize background color of controller’ view and its tableView
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// Set <code>headerItem</code> to show a menu header. If <code>subtitle</code> is present then a 2-line header will be shown. If only <code>title</code> is provided then a 1-line description will be presented. In this case a multi-line text is supported.
/// Header is not interactable and does not scroll.
@property (nonatomic, strong) MSFPopupMenuItem * _Nullable headerItem;
/// Use <code>selectedItemIndexPath</code> to get or set the selected menu item instead of doing this via <code>PopupMenuItem</code> directly
@property (nonatomic, copy) NSIndexPath * _Nullable selectedItemIndexPath;
/// set <code>separatorColor</code> to customize separator colors of PopupMenuItem cells and the drawer
@property (nonatomic, strong) UIColor * _Nonnull separatorColor;
/// Append new items to the last section of the menu
/// note:
/// If there is no section in the menu, create a new one without header and append the items to it
- (void)addItems:(NSArray<id <MSFPopupMenuTemplateItem>> * _Nonnull)items;
/// Append a new section to the end of menu
- (void)addSection:(MSFPopupMenuSection * _Nonnull)section;
/// Append new sections to the end of menu
- (void)addSections:(NSArray<MSFPopupMenuSection *> * _Nonnull)sections;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (nonnull instancetype)initWithSourceView:(UIView * _Nonnull)sourceView sourceRect:(CGRect)sourceRect presentationOrigin:(CGFloat)presentationOrigin presentationDirection:(enum MSFDrawerPresentationDirection)presentationDirection preferredMaximumHeight:(CGFloat)preferredMaximumHeight OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithBarButtonItem:(UIBarButtonItem * _Nonnull)barButtonItem presentationOrigin:(CGFloat)presentationOrigin presentationDirection:(enum MSFDrawerPresentationDirection)presentationDirection preferredMaximumHeight:(CGFloat)preferredMaximumHeight OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface MSFPopupMenuController (SWIFT_EXTENSION(FluentUI)) <UITableViewDataSource>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


@interface MSFPopupMenuController (SWIFT_EXTENSION(FluentUI)) <UITableViewDelegate>
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end

@protocol MSFPopupMenuItemTemplateCell;

/// <code>PopupMenuTemplateItem</code> represents a template item protocol inside <code>PopupMenuController</code>.
/// The built-in type is <code>PopupMenuItem</code>.
/// You can use object conforms to this protocol for customization.
SWIFT_PROTOCOL_NAMED("PopupMenuTemplateItem")
@protocol MSFPopupMenuTemplateItem
/// The custom cell class for <code>PopupMenuController</code>
@property (nonatomic) Class <MSFPopupMenuItemTemplateCell> _Nonnull cellClass;
@property (nonatomic, readonly) enum MSFPopupMenuItemExecutionMode executionMode;
@property (nonatomic) BOOL isSelected;
@property (nonatomic, readonly, copy) void (^ _Nullable onSelected)(void);
@end


/// <code>PopupMenuItem</code> represents a menu item inside <code>PopupMenuController</code>.
SWIFT_CLASS_NAMED("PopupMenuItem")
@interface MSFPopupMenuItem : NSObject <MSFPopupMenuTemplateItem>
@property (nonatomic) Class <MSFPopupMenuItemTemplateCell> _Nonnull cellClass;
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
@property (nonatomic, readonly, strong) UIImage * _Nullable selectedImage;
@property (nonatomic, readonly, strong) UIImage * _Nullable accessoryImage;
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@property (nonatomic, readonly, copy) NSString * _Nullable subtitle;
@property (nonatomic, readonly, strong) UIView * _Nullable accessoryView;
@property (nonatomic, readonly) enum MSFPopupMenuItemExecutionMode executionMode;
@property (nonatomic) BOOL isEnabled;
@property (nonatomic) BOOL isSelected;
/// <code>title</code> color
@property (nonatomic, strong) UIColor * _Nonnull titleColor;
/// <code>subtitle</code> color
@property (nonatomic, strong) UIColor * _Nonnull subtitleColor;
/// <code>image</code> tint color if it is rendered as template
@property (nonatomic, strong) UIColor * _Nonnull imageColor;
/// <code>title</code> color when<code>isSelected</code> is true. If unset, Colors.primary will be used
@property (nonatomic, strong) UIColor * _Nullable titleSelectedColor;
/// <code>subtitle</code> color when<code>isSelected</code> is true.  If unset, Colors.primary will be used
@property (nonatomic, strong) UIColor * _Nullable subtitleSelectedColor;
/// tint color if <code>selectedImage</code> is rendered as template and <code>isSelected</code> is true.  Is unset, Colors.primary will be used
@property (nonatomic, strong) UIColor * _Nullable imageSelectedColor;
/// background color of PopupMenuItem corresponding cell
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// checkmark color <code>isAccessoryCheckmarkVisible</code> and <code>isSelected</code> is true. If unset, Colors.primary will be used
@property (nonatomic, strong) UIColor * _Nullable accessoryCheckmarkColor;
@property (nonatomic, readonly, copy) void (^ _Nullable onSelected)(void);
@property (nonatomic, readonly) BOOL isAccessoryCheckmarkVisible;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image selectedImage:(UIImage * _Nullable)selectedImage accessoryImage:(UIImage * _Nullable)accessoryImage title:(NSString * _Nonnull)title subtitle:(NSString * _Nullable)subtitle accessoryView:(UIView * _Nullable)accessoryView isEnabled:(BOOL)isEnabled isSelected:(BOOL)isSelected executes:(enum MSFPopupMenuItemExecutionMode)executionMode onSelected:(void (^ _Nullable)(void))onSelected isAccessoryCheckmarkVisible:(BOOL)isAccessoryCheckmarkVisible OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImageName:(NSString * _Nonnull)imageName generateSelectedImage:(BOOL)generateSelectedImage title:(NSString * _Nonnull)title subtitle:(NSString * _Nullable)subtitle isEnabled:(BOOL)isEnabled isSelected:(BOOL)isSelected executes:(enum MSFPopupMenuItemExecutionMode)executionMode onSelected:(void (^ _Nullable)(void))onSelected isAccessoryCheckmarkVisible:(BOOL)isAccessoryCheckmarkVisible;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// <code>PopupMenuItemTemplateCell</code> represents a template cell protocol inside <code>PopupMenuController</code>.
/// The built-in type is <code>PopupMenuItemCell</code>.
/// If you are making a custom object conform to this protocol, it must be a <code>UITableViewCell</code> for the Pop Up Menu to work properly
SWIFT_PROTOCOL_NAMED("PopupMenuItemTemplateCell")
@protocol MSFPopupMenuItemTemplateCell
/// <code>PopupMenuController</code> will notify that one or more items in the list contain image(s)
@property (nonatomic) BOOL preservesSpaceForImage;
/// <code>PopupMenuController</code> will notify the custom separatorColor.
/// For custom cell, you should add your own separator.
@property (nonatomic, strong) UIColor * _Nullable customSeparatorColor;
/// <code>PopupMenuController</code> will notify the expected bottom separatorType.
/// For <code>PopupMenuItemCell</code>, the separator is at the bottom.
@property (nonatomic) enum MSFTableViewCellSeparatorType bottomSeparatorType;
/// Called when <code>PopupMenuController</code> setup the cell with the item
- (void)setupWithItem:(id <MSFPopupMenuTemplateItem> _Nonnull)item;
+ (CGFloat)preferredWidthFor:(id <MSFPopupMenuTemplateItem> _Nonnull)item preservingSpaceForImage:(BOOL)preserveSpaceForImage SWIFT_WARN_UNUSED_RESULT;
+ (CGFloat)preferredHeightFor:(id <MSFPopupMenuTemplateItem> _Nonnull)item SWIFT_WARN_UNUSED_RESULT;
@end


/// <code>PopupMenuSection</code> represents a section of menu items inside <code>PopupMenuController</code>.
SWIFT_CLASS_NAMED("PopupMenuSection")
@interface MSFPopupMenuSection : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSArray<id <MSFPopupMenuTemplateItem>> * _Nonnull items;
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title items:(NSArray<id <MSFPopupMenuTemplateItem>> * _Nonnull)items OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("ResizingHandleView")
@interface MSFResizingHandleView : UIView
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat height;)
+ (CGFloat)height SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
@end

enum MSFSearchBarStyle : NSInteger;
@protocol MSFSearchBarDelegate;

/// Drop-in replacement for UISearchBar that allows for more customization
SWIFT_CLASS_NAMED("SearchBar")
@interface MSFSearchBar : UIView
@property (nonatomic) BOOL hidesNavigationBarDuringSearch;
@property (nonatomic) CGFloat cornerRadius;
@property (nonatomic, copy) NSString * _Nullable placeholderText;
@property (nonatomic) enum MSFSearchBarStyle style;
/// Indicates when search bar either has focus or contains a search text.
@property (nonatomic, readonly) BOOL isActive;
@property (nonatomic, weak) id <MSFSearchBarDelegate> _Nullable delegate;
@property (nonatomic) UITextAutocorrectionType autocorrectionType;
@property (nonatomic, strong) UIView * _Nullable leadingView;
@property (nonatomic) BOOL isEditable;
/// indicates search in progress
@property (nonatomic, strong) MSFActivityIndicator * _Nonnull progressSpinner;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)didMoveToWindow;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)cancelSearch;
/// The string value of the search text field
@property (nonatomic, copy) NSString * _Nullable searchText;
- (BOOL)becomeFirstResponder SWIFT_WARN_UNUSED_RESULT;
- (BOOL)resignFirstResponder SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL isFirstResponder;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MSFSearchBarStyle, "Style", closed) {
  MSFSearchBarStyleLightContent = 0,
  MSFSearchBarStyleDarkContent = 1,
};


@interface MSFSearchBar (SWIFT_EXTENSION(FluentUI)) <UITextFieldDelegate>
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
@end


/// Various state update methods coming from the SearchBar
SWIFT_PROTOCOL_NAMED("SearchBarDelegate")
@protocol MSFSearchBarDelegate
- (void)searchBarDidBeginEditing:(MSFSearchBar * _Nonnull)searchBar;
- (void)searchBar:(MSFSearchBar * _Nonnull)searchBar didUpdateSearchText:(NSString * _Nullable)newSearchText;
@optional
- (void)searchBarDidFinishEditing:(MSFSearchBar * _Nonnull)searchBar;
@required
- (void)searchBarDidCancel:(MSFSearchBar * _Nonnull)searchBar;
@optional
- (void)searchBarDidRequestSearch:(MSFSearchBar * _Nonnull)searchBar;
- (void)searchBar:(MSFSearchBar * _Nonnull)searchBar didUpdateLeadingView:(UIView * _Nullable)leadingView;
@end


/// Used for SegmentedControl array of views
SWIFT_CLASS_NAMED("SegmentItem")
@interface MSFSegmentItem : NSObject
/// Creates a new instance of a <code>SegmentItem</code> that holds data used to create a segment in the <code>SegmentedControl</code>.
/// <ul>
///   <li>
///     Parameters
///     <ul>
///       <li>
///         title: Title that will be displayed by the segment and used as the accessibility label and large content viewer title.
///       </li>
///       <li>
///         isUnread:  Whether the segment shows the mark that represents the “unread” state.
///       </li>
///     </ul>
///   </li>
/// </ul>
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title isUnread:(BOOL)isUnread;
/// Creates a new instance of a <code>SegmentItem</code> that holds data used to create a segment in the <code>SegmentedControl</code>.
/// <ul>
///   <li>
///     Parameters
///     <ul>
///       <li>
///         title: Title that will be displayed by the segment if the image is nil, and used as the accessibility label and large content viewer title.
///       </li>
///       <li>
///         image: Image that will display instead of the title if not nil.
///       </li>
///       <li>
///         isUnread:  Whether the segment shows the mark that represents the “unread” state.
///       </li>
///     </ul>
///   </li>
/// </ul>
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title image:(UIImage * _Nullable)image isUnread:(BOOL)isUnread OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum MSFSegmentedControlStyle : NSInteger;

/// A styled segmented control that should be used instead of UISegmentedControl. It is designed to flex the button width proportionally to the control’s width.
SWIFT_CLASS_NAMED("SegmentedControl")
@interface MSFSegmentedControl : UIView
@property (nonatomic) BOOL isAnimated;
@property (nonatomic, readonly) NSInteger numberOfSegments;
/// Defines if the segments of the <code>SegmentedControl</code> are equal in width.
@property (nonatomic) BOOL shouldSetEqualWidthForSegments;
/// Defines if the <code>SegmentedControl</code> will take up the full width of the screen on iPhone, or half on iPad.
/// Scrolling will only work if this is false.
@property (nonatomic) BOOL isFixedWidth;
/// only used for pill style segment control. It is used to define the inset of the pillContainerView
@property (nonatomic) NSDirectionalEdgeInsets contentInset;
/// The closure for the action to be called when a segment is selected.
/// When called, the selected item and its index will be passed in to the closure.
@property (nonatomic, copy) void (^ _Nullable onSelectAction)(MSFSegmentItem * _Nonnull, NSInteger);
@property (nonatomic) NSInteger selectedSegmentIndex;
- (nonnull instancetype)init;
/// Initializes a segmented control with the specified titles.
/// \param items An array of Segmented Items representing the segments for this control.
///
/// \param style A style used for rendering of the control.
///
- (nonnull instancetype)initWithItems:(NSArray<MSFSegmentItem *> * _Nonnull)items style:(enum MSFSegmentedControlStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Insert new segment at index with the specified title. If a segment exists at that index, it will be inserted before and will therefore take its index.
/// \param item The item of the newly created segment
///
/// \param index The index at which to insert the newly created segment
///
- (void)insertSegment:(MSFSegmentItem * _Nonnull)item at:(NSInteger)index;
/// Remove the segment at the appropriate index. If there are only 2 segments in the control, or if no segment exists at the index, this method is ignored. If the segment is currently selected, we change the selection
/// \param index The index of the segment to be removed.
///
- (void)removeSegmentAt:(NSInteger)index;
/// Select segment at index
/// Warning: when called, handlers on UIControlEvents.ValueChanged are not called
/// \param index The index of the segment to set as selected
///
/// \param animated Whether or not to animate the change in selected segment
///
- (void)selectSegmentAt:(NSInteger)index animated:(BOOL)animated;
- (void)layoutSubviews;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)didMoveToWindow;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface MSFSegmentedControl (SWIFT_EXTENSION(FluentUI)) <UIScrollViewDelegate>
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MSFSegmentedControlStyle, "SegmentedControlStyle", closed) {
/// Segments are shows as labels inside a pill for use with a neutral or white background. Selection is indicated by a thumb under the selected label.
  MSFSegmentedControlStylePrimaryPill = 0,
/// Segments are shows as labels inside a pill for use on a branded background that features a prominent brand color in light mode and a muted grey in dark mode.
/// Selection is indicated by a thumb under the selected label.
  MSFSegmentedControlStyleOnBrandPill = 1,
};


/// View that converts the subviews of a container view into a loading state with the “shimmering” effect.
SWIFT_CLASS_NAMED("ShimmerView")
@interface MSFShimmerView : UIView
/// Optional synchronizer to sync multiple shimmer views.
@property (nonatomic, weak) id <MSFAnimationSynchronizerProtocol> _Nullable animationSynchronizer;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (void)layoutSubviews;
/// Create a shimmer view
/// \param containerView view to convert layout into a shimmer – each of containerView’s first-level subviews will be mirrored.
///
/// \param excludedViews subviews of <code>containerView</code> to exclude from shimmer.
///
/// \param animationSynchronizer optional synchronizer to sync multiple shimmer views.
///
/// \param shimmerStyle determines whether the shimmer is a revealing shimmer or a concealing shimmer.
///
/// \param shimmersLeafViews True to enable shimmers to auto-adjust to font height for a UILabel – this will more accurately reflect the text in the label rect rather than using the bounding box.
///
/// \param usesTextHeightForLabels Determines whether we shimmer the top level subviews, or the leaf nodes of the view hierarchy. If false, we use default height of 11.0.
///
- (nonnull instancetype)initWithContainerView:(UIView * _Nullable)containerView excludedViews:(NSArray<UIView *> * _Nonnull)excludedViews animationSynchronizer:(id <MSFAnimationSynchronizerProtocol> _Nullable)animationSynchronizer shimmerStyle:(enum MSFShimmerStyle)shimmerStyle shimmersLeafViews:(BOOL)shimmersLeafViews usesTextHeightForLabels:(BOOL)usesTextHeightForLabels OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// Manaully sync with the synchronizer.
- (void)syncAnimation;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// Specialized ShimmerView that shows 1 or more shimmering lines.
SWIFT_CLASS_NAMED("ShimmerLinesView")
@interface MSFShimmerLinesView : MSFShimmerView
/// Number of lines that will shimmer in this view. Use 0 if the number of lines should fill the available space.
@property (nonatomic) NSInteger lineCount;
/// The percent the first line (if 2+ lines) should fill the available horizontal space
@property (nonatomic) CGFloat firstLineFillPercent;
/// The percent the last line should fill the available horizontal space.
@property (nonatomic) CGFloat lastLineFillPercent;
- (void)layoutSubviews;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithContainerView:(UIView * _Nullable)containerView excludedViews:(NSArray<UIView *> * _Nonnull)excludedViews animationSynchronizer:(id <MSFAnimationSynchronizerProtocol> _Nullable)animationSynchronizer shimmerStyle:(enum MSFShimmerStyle)shimmerStyle shimmersLeafViews:(BOOL)shimmersLeafViews usesTextHeightForLabels:(BOOL)usesTextHeightForLabels OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@protocol MSFSideTabBarDelegate;
@class MSFTabBarItem;

/// View for a vertical side tab bar that can be used for app navigation.
/// Optimized for horizontal regular + vertical regular size class configuration. Prefer using TabBarView for other size class configurations.
SWIFT_CLASS_NAMED("SideTabBar")
@interface MSFSideTabBar : UIView
/// Delegate to handle user interactions in the side tab bar.
@property (nonatomic, weak) id <MSFSideTabBarDelegate> _Nullable delegate;
/// The avatar view that displays above the top tab bar items.
/// The avatar view’s size class should be AvatarSize.medium.
/// Remember to enable pointer interactions on the avatar view if it handles pointer interactions.
@property (nonatomic, strong) MSFAvatar * _Nullable avatar;
/// Tab bar iems to display in the top section of the side tab bar.
/// These TabBarItems should have 28x28 images and don’t need landscape images.
@property (nonatomic, copy) NSArray<MSFTabBarItem *> * _Nonnull topItems;
/// Tab bar iems to display in the bottom section of the side tab bar.
/// These items do not have a selected state.
/// These TabBarItems should have 24x24 images and don’t need landscape images.
@property (nonatomic, copy) NSArray<MSFTabBarItem *> * _Nonnull bottomItems;
/// Selected tab bar item in the top section of the side tab bar.
@property (nonatomic, strong) MSFTabBarItem * _Nullable selectedTopItem;
@property (nonatomic) BOOL showTopItemTitles;
@property (nonatomic) BOOL showBottomItemTitles;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// Returns the first match of an optional view for a given tab bar item.
/// Searches for the view in the top and bottom sections in that order of priority. Returns nil if the view is not found in either section.
- (UIView * _Nullable)itemViewWith:(MSFTabBarItem * _Nonnull)item SWIFT_WARN_UNUSED_RESULT;
@end


/// Delegate protocol to handle user events inside the side tab bar.
SWIFT_PROTOCOL_NAMED("SideTabBarDelegate")
@protocol MSFSideTabBarDelegate
@optional
/// Called after the view representing <code>TabBarItem</code> is selected.
/// \param sideTabBar The side tab bar.
///
/// \param item The selected tab bar item.
///
/// \param fromTop true if the item was in the top section, false if it was in the bottom section.
///
- (void)sideTabBar:(MSFSideTabBar * _Nonnull)sideTabBar didSelect:(MSFTabBarItem * _Nonnull)item fromTop:(BOOL)fromTop;
/// Called after the avatar view is tapped in the side tab bar.
/// \param sideTabBar The side tab bar.
///
/// \param avatarView The avatar view.
///
- (void)sideTabBar:(MSFSideTabBar * _Nonnull)sideTabBar didActivate:(MSFAvatar * _Nonnull)avatarView;
@end


SWIFT_CLASS_NAMED("TabBarItem")
@interface MSFTabBarItem : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The badge value will be displayed in a red oval above the tab bar item.
/// Set the badge value to nil to hide the red oval.
@property (nonatomic, copy) NSString * _Nullable badgeValue;
/// This value will determine whether or not to show the mark that represents the “unread” state.
/// If the badgeValue is set, the unreadDot will not be visible.
/// The default value of this property is false.
@property (nonatomic) BOOL isUnreadDotVisible;
/// Convenience method to set the badge value to a number.
/// If the number is zero, the badge value will be hidden.
- (void)setBadgeNumber:(NSUInteger)number;
/// Initializes <code>TabBarItem</code>
/// \param title Used for tabbar item view’s label and for its accessibilityLabel.
///
/// \param image Used for tabbar item view’s imageView and for its accessibility largeContentImage unless <code>largeContentImage</code> is specified.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title image:(UIImage * _Nonnull)image;
/// Initializes <code>TabBarItem</code>
/// \param title Used for tabbar item view’s label and for its accessibilityLabel.
///
/// \param image Used for tabbar item view’s imageView and for its accessibility largeContentImage unless <code>largeContentImage</code> is specified.
///
/// \param selectedImage Used for imageView when tabbar item view is selected.  If it is nil, it will use <code>image</code>.
///
/// \param landscapeImage Used for imageView when tabbar item view in landscape. If it is nil, it will use <code>image</code>. The image will be used in portrait mode if the tab bar item shows a label.
///
/// \param landscapeSelectedImage Used for imageView when tabbar item view is selected in landscape. If it is nil, it will use <code>selectedImage</code>. The image will be used in portrait mode if the tab bar item shows a label.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title image:(UIImage * _Nonnull)image selectedImage:(UIImage * _Nullable)selectedImage landscapeImage:(UIImage * _Nullable)landscapeImage landscapeSelectedImage:(UIImage * _Nullable)landscapeSelectedImage;
/// Initializes <code>TabBarItem</code>
/// \param title Used for tabbar item view’s label and for its accessibilityLabel.
///
/// \param image Used for tabbar item view’s imageView and for its accessibility largeContentImage unless <code>largeContentImage</code> is specified.
///
/// \param selectedImage Used for imageView when tabbar item view is selected.  If it is nil, it will use <code>image</code>.
///
/// \param landscapeImage Used for imageView when tabbar item view in landscape. If it is nil, it will use <code>image</code>. The image will be used in portrait mode if the tab bar item shows a label.
///
/// \param landscapeSelectedImage Used for imageView when tabbar item view is selected in landscape. If it is nil, it will use <code>selectedImage</code>. The image will be used in portrait mode if the tab bar item shows a label.
///
/// \param largeContentImage Used for tabbar item view’s accessibility largeContentImage.
///
/// \param accessibilityLabelBadgeFormatString Format string to use for the tabbar item’s accessibility label when the badge number is greater than zero. When the badge number is zero, the accessibility label is set to the item’s title. By default, when the badge number is greater than zero, the following format is used to builds the accessibility label: “%@, %ld items” where the item’s title and the badge number are used to populate the format specifiers. If a format string is provided through this parameter, it must contain “%@” and “%ld” in the same order and will be populated with the title and badge number.
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title image:(UIImage * _Nonnull)image selectedImage:(UIImage * _Nullable)selectedImage landscapeImage:(UIImage * _Nullable)landscapeImage landscapeSelectedImage:(UIImage * _Nullable)landscapeSelectedImage largeContentImage:(UIImage * _Nullable)largeContentImage accessibilityLabelBadgeFormatString:(NSString * _Nullable)accessibilityLabelBadgeFormatString OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol MSFTabBarViewDelegate;

/// <code>TabBarView</code> supports maximum 5 tab bar items
/// Set up <code>delegate</code> property to listen to selection changes.
/// Set up <code>items</code> array to determine the order of <code>TabBarItems</code> to show.
/// Use <code>selectedItem</code> property to change the selected tab bar item.
SWIFT_CLASS_NAMED("TabBarView")
@interface MSFTabBarView : UIView
/// List of TabBarItems in the TabBarView. Order of the array is the order of the subviews.
@property (nonatomic, copy) NSArray<MSFTabBarItem *> * _Nonnull items;
@property (nonatomic, strong) MSFTabBarItem * _Nullable selectedItem;
@property (nonatomic, weak) id <MSFTabBarViewDelegate> _Nullable delegate;
/// Set the custom spacing after the specified item.
/// \param spacing The spacing. 
///
/// \param item The item to add spacing after. 
///
- (void)setCustomSpacing:(CGFloat)spacing after:(MSFTabBarItem * _Nonnull)item;
/// Initializes MSTabBarView
/// \param showsItemTitles Determines whether or not to show the titles of the tab ba ritems.
///
- (nonnull instancetype)initWithShowsItemTitles:(BOOL)showsItemTitles OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (UIView * _Nullable)itemViewWith:(MSFTabBarItem * _Nonnull)item SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL_NAMED("TabBarViewDelegate")
@protocol MSFTabBarViewDelegate
@optional
/// Called after the view representing <code>TabBarItem</code> is selected.
- (void)tabBarView:(MSFTabBarView * _Nonnull)tabBarView didSelect:(MSFTabBarItem * _Nonnull)item;
@end


typedef SWIFT_ENUM_NAMED(NSInteger, MSFTableViewCellAccessoryType, "TableViewCellAccessoryType", closed) {
  MSFTableViewCellAccessoryTypeNone = 0,
  MSFTableViewCellAccessoryTypeDisclosureIndicator = 1,
  MSFTableViewCellAccessoryTypeDetailButton = 2,
  MSFTableViewCellAccessoryTypeCheckmark = 3,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFTableViewCellBackgroundStyleType, "TableViewCellBackgroundStyleType", closed) {
  MSFTableViewCellBackgroundStyleTypePlain = 0,
  MSFTableViewCellBackgroundStyleTypeGrouped = 1,
  MSFTableViewCellBackgroundStyleTypeClear = 2,
  MSFTableViewCellBackgroundStyleTypeCustom = 3,
};


/// Class that represents a table view cell accessory view representing a file or folder.
SWIFT_CLASS_NAMED("TableViewCellFileAccessoryView")
@interface MSFTableViewCellFileAccessoryView : UIView
/// The date will be displayed in a friendly format in the accessory view’s first column.
@property (nonatomic, copy) NSDate * _Nullable date;
/// Set to true to display the shared status in the accessory view’s second column, false otherwise.
@property (nonatomic) BOOL showSharedStatus;
/// Set to true to indicate that the document is shared with others, false otherwise.
@property (nonatomic) BOOL isShared;
/// Actions to display in the accessory view’s third column.
/// Depending on the cell’s width, some actions may be hidden.
/// A maximum of 4 actions will be displayed.
/// Actions with the smallest index in the array will have a higher priority for being displayed.
@property (nonatomic, copy) NSArray<MSFFileAccessoryViewAction *> * _Nonnull actions;
/// The minimum count of actions.
/// If there are fewer actions to display than this count, empty spaces will be reserved for those missing actions.
/// This property is useful to align columns between cells that display a different number of actions.
/// Setting this value too high could result in a broken layout.
@property (nonatomic) NSUInteger minimumActionsCount;
/// Number of actions that should overlap with the column that comes before the actions column.
/// If actionsOffsetCount > 0, this column will reduce its width but keep its content centered as if there
/// was no offset. This is particularily useful with actions that are displayed. Reserving an empty slot for
/// an action that rarely displays would cause the previous column to look uncentered. This column
/// would also look uncentered when the rarely displayed action is displayed. The solution is to
/// allow this action to overlap the space reserved for the previous column.
@property (nonatomic) NSUInteger actionsColumnOverlap;
@property (nonatomic, weak) MSFTableViewCell * _Nullable tableViewCell;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end

enum MSFTableViewHeaderFooterViewStyle : NSInteger;
enum MSFTableViewHeaderFooterViewAccessoryButtonStyle : NSInteger;
@protocol MSFTableViewHeaderFooterViewDelegate;

/// <code>TableViewHeaderFooterView</code> is used to present a section header or footer with a <code>title</code> and an optional accessory button.
/// Set the <code>TableViewHeaderFooterView.Style</code> of the view to specify its visual style. The <code>default</code> and <code>headerPrimary</code> style may be used for headers.
/// The <code>footer</code> style, which lays out the <code>title</code> near the top of the view, may be used for footers in grouped lists. Use <code>divider</code> and <code>dividerHighlighted</code> as headers for plain lists.
/// The optional accessory button should only be used with <code>default</code> style headers with the <code>title</code> as a single line of text.
/// Use <code>titleNumberOfLines</code> to configure the number of lines for the <code>title</code>. Headers generally use the default number of lines of 1 while footers may use a multiple number of lines.
SWIFT_CLASS_NAMED("TableViewHeaderFooterView")
@interface MSFTableViewHeaderFooterView : UITableViewHeaderFooterView
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull identifier;)
+ (NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
/// The height of the view based on the height of its content.
/// \param style The <code>TableViewHeaderFooterView.Style</code> used to set up the view.
///
/// \param title The title string.
///
/// \param titleNumberOfLines The number of lines that the title should display.
///
/// \param containerWidth The width of the view’s super view (e.g. the table view’s width).
///
/// \param accessoryView An optional accessory view that appears near the trailing edge of the view.
///
///
/// returns:
/// a value representing the calculated height of the view.
+ (CGFloat)heightWithStyle:(enum MSFTableViewHeaderFooterViewStyle)style title:(NSString * _Nonnull)title titleNumberOfLines:(NSInteger)titleNumberOfLines containerWidth:(CGFloat)containerWidth accessoryView:(UIView * _Nullable)accessoryView SWIFT_WARN_UNUSED_RESULT;
/// The preferred width of the view based on the width of its content.
/// \param style The <code>TableViewHeaderFooterView.Style</code> used to set up the view.
///
/// \param title The title string.
///
/// \param accessoryView An optional accessory view that appears near the trailing edge of the view.
///
/// \param leadingView An optional custom view that appears near the leading edge of the view.
///
///
/// returns:
/// a value representing the calculated preferred width of the view.
+ (CGFloat)preferredWidthWithStyle:(enum MSFTableViewHeaderFooterViewStyle)style title:(NSString * _Nonnull)title accessoryView:(UIView * _Nullable)accessoryView leadingView:(UIView * _Nullable)leadingView SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) enum MSFTableViewHeaderFooterViewAccessoryButtonStyle accessoryButtonStyle;
/// The maximum number of lines to be shown for <code>title</code>
@property (nonatomic) NSInteger titleNumberOfLines;
/// <code>onAccessoryButtonTapped</code> is called when <code>accessoryButton</code> is tapped
@property (nonatomic, copy) void (^ _Nullable onAccessoryButtonTapped)(void);
@property (nonatomic, copy) void (^ _Nullable onHeaderViewTapped)(void);
@property (nonatomic, weak) id <MSFTableViewHeaderFooterViewDelegate> _Nullable delegate;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@property (nonatomic) CGRect bounds;
@property (nonatomic) CGRect frame;
- (nonnull instancetype)initWithReuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Sets up the titleView based off of the following parameters:
/// \param style The <code>TableViewHeaderFooterView.Style</code> used to set up the view.
///
/// \param title The title string.
///
/// \param accessoryButtonTitle Optional accessory button title string.
///
- (void)setupWithStyle:(enum MSFTableViewHeaderFooterViewStyle)style title:(NSString * _Nonnull)title accessoryButtonTitle:(NSString * _Nonnull)accessoryButtonTitle;
/// \param style The <code>TableViewHeaderFooterView.Style</code> used to set up the view.
///
/// \param title The title string.
///
/// \param accessoryButtonTitle Optional accessory button title string.
///
/// \param leadingView An optional custom view that appears near the leading edge of the view.
///
- (void)setupWithStyle:(enum MSFTableViewHeaderFooterViewStyle)style title:(NSString * _Nonnull)title accessoryButtonTitle:(NSString * _Nonnull)accessoryButtonTitle leadingView:(UIView * _Nullable)leadingView;
/// \param style The <code>TableViewHeaderFooterView.Style</code> used to set up the view.
///
/// \param attributedTitle Title as an NSAttributedString for additional attributes.
///
/// \param accessoryButtonTitle Optional accessory button title string.
///
- (void)setupWithStyle:(enum MSFTableViewHeaderFooterViewStyle)style attributedTitle:(NSAttributedString * _Nonnull)attributedTitle accessoryButtonTitle:(NSString * _Nonnull)accessoryButtonTitle;
/// \param style The <code>TableViewHeaderFooterView.Style</code> used to set up the view.
///
/// \param attributedTitle Title as an NSAttributedString for additional attributes.
///
/// \param accessoryButtonTitle Optional accessory button title string.
///
/// \param leadingView An optional custom view that appears near the leading edge of the view.
///
- (void)setupWithStyle:(enum MSFTableViewHeaderFooterViewStyle)style attributedTitle:(NSAttributedString * _Nonnull)attributedTitle accessoryButtonTitle:(NSString * _Nonnull)accessoryButtonTitle leadingView:(UIView * _Nullable)leadingView;
/// \param style The <code>TableViewHeaderFooterView.Style</code> used to set up the view.
///
/// \param title The title string.
///
/// \param accessoryView The optional custom accessory view in the trailing edge of this view.
///
- (void)setupWithStyle:(enum MSFTableViewHeaderFooterViewStyle)style title:(NSString * _Nonnull)title accessoryView:(UIView * _Nonnull)accessoryView;
/// \param style The <code>TableViewHeaderFooterView.Style</code> used to set up the view.
///
/// \param title The title string.
///
/// \param accessoryView The optional custom accessory view in the trailing edge of this view.
///
/// \param leadingView An optional custom view that appears near the leading edge of the view.
/// If <code>accessoryView</code> is set, the accessory button (if any) will be replaced by this custom view. Clients are responsible
/// for the appearance and behavior of both the <code>accessoryView</code> and <code>leadingView</code>, including event handling and accessibility.
///
- (void)setupWithStyle:(enum MSFTableViewHeaderFooterViewStyle)style title:(NSString * _Nonnull)title accessoryView:(UIView * _Nonnull)accessoryView leadingView:(UIView * _Nullable)leadingView;
/// \param style The <code>TableViewHeaderFooterView.Style</code> used to set up the view.
///
/// \param accessoryButtonTitle Optional accessory button title string.
///
- (void)setupWithStyle:(enum MSFTableViewHeaderFooterViewStyle)style accessoryButtonTitle:(NSString * _Nonnull)accessoryButtonTitle;
/// \param style The <code>TableViewHeaderFooterView.Style</code> used to set up the view.
///
/// \param title The title string.
///
- (void)setupWithStyle:(enum MSFTableViewHeaderFooterViewStyle)style title:(NSString * _Nonnull)title;
- (void)layoutSubviews;
- (void)prepareForReuse;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)didMoveToWindow;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MSFTableViewHeaderFooterViewAccessoryButtonStyle, "AccessoryButtonStyle", closed) {
  MSFTableViewHeaderFooterViewAccessoryButtonStyleRegular = 0,
  MSFTableViewHeaderFooterViewAccessoryButtonStylePrimary = 1,
};

/// Defines the visual style of the view
typedef SWIFT_ENUM_NAMED(NSInteger, MSFTableViewHeaderFooterViewStyle, "Style", closed) {
  MSFTableViewHeaderFooterViewStyleHeader = 0,
  MSFTableViewHeaderFooterViewStyleDivider = 1,
  MSFTableViewHeaderFooterViewStyleDividerHighlighted = 2,
  MSFTableViewHeaderFooterViewStyleFooter = 3,
  MSFTableViewHeaderFooterViewStyleHeaderPrimary = 4,
};

@class UITextView;
@class NSURL;

@interface MSFTableViewHeaderFooterView (SWIFT_EXTENSION(FluentUI)) <UITextViewDelegate>
- (BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL_NAMED("TableViewHeaderFooterViewDelegate")
@protocol MSFTableViewHeaderFooterViewDelegate
@optional
/// Returns: true if the interaction with the header view should be allowed; false if the interaction should not be allowed.
- (BOOL)headerFooterView:(MSFTableViewHeaderFooterView * _Nonnull)headerFooterView shouldInteractWith:(NSURL * _Nonnull)URL in:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MSFTextColorStyle, "TextColorStyle", closed) {
  MSFTextColorStyleRegular = 0,
  MSFTextColorStyleSecondary = 1,
  MSFTextColorStyleWhite = 2,
  MSFTextColorStylePrimary = 3,
  MSFTextColorStyleError = 4,
  MSFTextColorStyleWarning = 5,
  MSFTextColorStyleDisabled = 6,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFTextStyle, "TextStyle", closed) {
  MSFTextStyleLargeTitle = 0,
  MSFTextStyleTitle1 = 1,
  MSFTextStyleTitle2 = 2,
  MSFTextStyleHeadline = 3,
  MSFTextStyleBody = 4,
  MSFTextStyleSubhead = 5,
  MSFTextStyleFootnote = 6,
  MSFTextStyleButton1 = 7,
  MSFTextStyleButton2 = 8,
  MSFTextStyleCaption1 = 9,
  MSFTextStyleCaption2 = 10,
};

/// Defines the string format of the time of a Date
typedef SWIFT_ENUM_NAMED(NSInteger, MSFTimeStringCompactness, "TimeStringCompactness", closed) {
  MSFTimeStringCompactnessHoursColumnsMinutes = 1,
  MSFTimeStringCompactnessHours = 2,
};

enum MSFTooltipArrowDirection : NSInteger;
enum MSFTooltipDismissMode : NSInteger;

/// A styled tooltip that is presented anchored to a view.
SWIFT_CLASS_NAMED("Tooltip")
@interface MSFTooltip : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) UIEdgeInsets defaultScreenMargins;)
+ (UIEdgeInsets)defaultScreenMargins SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MSFTooltip * _Nonnull shared;)
+ (MSFTooltip * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// The alignment of the text in the tooltip. Defaults to natural alignment (left for LTR languages, right for RTL languages).
@property (nonatomic) NSTextAlignment textAlignment;
/// Whether a tooltip is currently showing.
@property (nonatomic, readonly) BOOL isShowing;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Displays a tooltip based on the current settings, pointing to the supplied anchorView.
/// If another tooltip view is already showing, it will be dismissed and the new tooltip will be shown.
/// \param message The text to be displayed on the new tooltip view.
///
/// \param anchorView The view to point to with the new tooltip’s arrow.
///
/// \param preferredArrowDirection The preferrred direction for the tooltip’s arrow. Only the arrow’s axis is guaranteed; the direction may be changed based on available space between the anchorView and the screen’s margins. Defaults to down.
///
/// \param offset An offset from the tooltip’s default position.
///
/// \param screenMargins The margins from the window’s safe area insets used for laying out the tooltip. Defaults to 16.0 pts on all sides.
///
/// \param dismissMode The mode of tooltip dismissal. Defaults to tapping anywhere.
///
/// \param onTap An optional closure used to do work after the user taps
///
- (void)showWith:(NSString * _Nonnull)message for:(UIView * _Nonnull)anchorView preferredArrowDirection:(enum MSFTooltipArrowDirection)preferredArrowDirection offset:(CGPoint)offset screenMargins:(UIEdgeInsets)screenMargins dismissOn:(enum MSFTooltipDismissMode)dismissMode onTap:(void (^ _Nullable)(void))onTap;
/// Hides the currently shown tooltip.
- (void)hide;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MSFTooltipArrowDirection, "ArrowDirection", closed) {
  MSFTooltipArrowDirectionUp = 0,
  MSFTooltipArrowDirectionDown = 1,
  MSFTooltipArrowDirectionLeft = 2,
  MSFTooltipArrowDirectionRight = 3,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFTooltipDismissMode, "DismissMode", closed) {
  MSFTooltipDismissModeTapAnywhere = 0,
  MSFTooltipDismissModeTapOnTooltip = 1,
  MSFTooltipDismissModeTapOnTooltipOrAnchor = 2,
};


SWIFT_CLASS_NAMED("TouchForwardingView")
@interface MSFTouchForwardingView : UIView
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol MSFTwoLineTitleViewDelegate;
enum MSFTwoLineTitleViewStyle : NSInteger;
enum MSFTwoLineTitleViewInteractivePart : NSInteger;
enum MSFTwoLineTitleViewAccessoryType : NSInteger;

SWIFT_CLASS_NAMED("TwoLineTitleView")
@interface MSFTwoLineTitleView : UIView
@property (nonatomic, copy) NSString * _Nullable titleAccessibilityHint;
@property (nonatomic) UIAccessibilityTraits titleAccessibilityTraits;
@property (nonatomic, copy) NSString * _Nullable subtitleAccessibilityHint;
@property (nonatomic) UIAccessibilityTraits subtitleAccessibilityTraits;
@property (nonatomic, weak) id <MSFTwoLineTitleViewDelegate> _Nullable delegate;
- (nonnull instancetype)initWithStyle:(enum MSFTwoLineTitleViewStyle)style;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Sets the relevant strings and button styles for the title and subtitle.
/// \param title A title string.
///
/// \param subtitle An optional subtitle string. If nil, title will take up entire frame.
///
/// \param interactivePart Determines which line, if any, of the view will have interactive button behavior.
///
/// \param accessoryType Determines which accessory will be shown with the <code>interactivePart</code> of the view, if any. Ignored if <code>interactivePart</code> is <code>.none</code>.
///
- (void)setupWithTitle:(NSString * _Nonnull)title subtitle:(NSString * _Nullable)subtitle interactivePart:(enum MSFTwoLineTitleViewInteractivePart)interactivePart accessoryType:(enum MSFTwoLineTitleViewAccessoryType)accessoryType;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
@property (nonatomic) BOOL isAccessibilityElement;
- (NSInteger)accessibilityElementCount SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)accessibilityElementAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)indexOfAccessibilityElement:(id _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MSFTwoLineTitleViewStyle, "Style", closed) {
  MSFTwoLineTitleViewStyleLight = 0,
  MSFTwoLineTitleViewStyleDark = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFTwoLineTitleViewInteractivePart, "InteractivePart", closed) {
  MSFTwoLineTitleViewInteractivePartNone = 0,
  MSFTwoLineTitleViewInteractivePartTitle = 1,
  MSFTwoLineTitleViewInteractivePartSubtitle = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MSFTwoLineTitleViewAccessoryType, "AccessoryType", closed) {
  MSFTwoLineTitleViewAccessoryTypeNone = 0,
  MSFTwoLineTitleViewAccessoryTypeDisclosure = 1,
  MSFTwoLineTitleViewAccessoryTypeDownArrow = 2,
};


SWIFT_PROTOCOL_NAMED("TwoLineTitleViewDelegate")
@protocol MSFTwoLineTitleViewDelegate
- (void)twoLineTitleViewDidTapOnTitle:(MSFTwoLineTitleView * _Nonnull)twoLineTitleView;
@end



@interface UIBarButtonItem (SWIFT_EXTENSION(FluentUI))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull badgeValueDidChangeNotification;)
+ (NSNotificationName _Nonnull)badgeValueDidChangeNotification SWIFT_WARN_UNUSED_RESULT;
/// The badge value will be displayed in a red oval above the UIBarButtonItem.
/// Set the badge value to nil to hide the red oval.
@property (nonatomic, copy) NSString * _Nullable badgeValue;
/// Use this method on bar button item’s instance to set the badge value and badge accessibility label.
/// \param badgeValue Value that will be displayed in a red oval above the bar button item. Set the badgeValue to nil to hide the red oval.
///
/// \param badgeAccessibilityLabel Accessibility label for the badge. Combined with the item’s accessibility label if not nil.
///
- (void)setBadgeValue:(NSString * _Nullable)badgeValue badgeAccessibilityLabel:(NSString * _Nullable)badgeAccessibilityLabel;
@end


@interface UIColor (SWIFT_EXTENSION(FluentUI))
/// Creates a dynamic color object that returns the appropriate color value based on the current
/// rendering context.
/// The decision order for choosing between the colors is based on the following questions, in order:
/// <ul>
///   <li>
///     Is the current <code>userInterfaceStyle</code> <code>.dark</code> or <code>.light</code>?
///   </li>
///   <li>
///     Is the current <code>userInterfaceLevel</code> <code>.base</code> or <code>.elevated</code>?
///   </li>
///   <li>
///     Is the current <code>accessibilityContrast</code> <code>.normal</code> or <code>.high</code>?
///   </li>
/// </ul>
/// \param light The default color for a light context. Required.
///
/// \param lightHighContrast The override color for a light, high contrast context. Optional.
///
/// \param lightElevated The override color for a light, elevated context. Optional.
///
/// \param lightElevatedHighContrast The override color for a light, elevated, high contrast context. Optional.
///
/// \param dark The override color for a dark context. Optional.
///
/// \param darkHighContrast The override color for a dark, high contrast context. Optional.
///
/// \param darkElevated The override color for a dark, elevated context. Optional.
///
/// \param darkElevatedHighContrast The override color for a dark, elevated, high contrast context. Optional.
///
- (nonnull instancetype)initWithLight:(UIColor * _Nonnull)light lightHighContrast:(UIColor * _Nullable)lightHighContrast lightElevated:(UIColor * _Nullable)lightElevated lightElevatedHighContrast:(UIColor * _Nullable)lightElevatedHighContrast dark:(UIColor * _Nullable)dark darkHighContrast:(UIColor * _Nullable)darkHighContrast darkElevated:(UIColor * _Nullable)darkElevated darkElevatedHighContrast:(UIColor * _Nullable)darkElevatedHighContrast;
/// Creates a UIColor from a <code>ColorValue</code> instance.
/// \param colorValue Color value to use to initialize this color.
///
- (nonnull instancetype)initWithColorValue:(MSFColorValue * _Nonnull)colorValue;
@end





@interface UINavigationItem (SWIFT_EXTENSION(FluentUI))
@property (nonatomic, strong) UIView * _Nullable accessoryView;
@property (nonatomic, strong) UIView * _Nullable topAccessoryView;
@property (nonatomic, strong) MSFNavigationBarTopAccessoryViewAttributes * _Nullable topAccessoryViewAttributes;
@property (nonatomic, strong) UIScrollView * _Nullable contentScrollView;
@property (nonatomic) enum MSFNavigationBarStyle navigationBarStyle;
@property (nonatomic) enum MSFNavigationBarShadow navigationBarShadow;
@property (nonatomic) BOOL usesLargeTitle;
- (UIColor * _Nonnull)navigationBarColorFor:(UIWindow * _Nonnull)window SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) UIColor * _Nullable customNavigationBarColor;
@end




@interface UIView (SWIFT_EXTENSION(FluentUI))
/// The custom <code>FluentTheme</code> to apply to this view.
@property (nonatomic, strong) FluentTheme * _Nonnull fluentTheme;
@end




@interface UIViewController (SWIFT_EXTENSION(FluentUI))
@property (nonatomic, readonly, strong) MSFNavigationController * _Nullable msfNavigationController;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MSFWeekOfMonth, "WeekOfMonth", closed) {
  MSFWeekOfMonthFirst = 1,
  MSFWeekOfMonthSecond = 2,
  MSFWeekOfMonthThird = 3,
  MSFWeekOfMonthFourth = 4,
  MSFWeekOfMonthLast = 5,
};

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
